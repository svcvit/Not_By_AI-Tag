%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 12.6 (Build 21G115) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
1 1 1 sc
q
41.1478 19.3962 m
42.259998 19.3962 43.129002 18.951599 43.754902 18.062401 c
44.386002 17.1731 44.701599 16.025801 44.701599 14.6202 c
44.701599 13.1631 44.391201 11.9554 43.7705 10.9974 c
43.1497 10.0393 42.283298 9.5602999 41.171101 9.5602999 c
40.472801 9.5602999 39.911499 9.7152004 39.487301 10.025 c
39.233898 10.2086 38.959702 10.5298 38.664799 10.9888 c
38.664799 9.8098001 l
36.5 9.8098001 l
36.5 22.4769 l
38.703602 22.4769 l
38.703602 17.967699 l
38.983002 18.4037 39.290798 18.736401 39.626999 18.9659 c
40.025299 19.2528 40.5322 19.3962 41.1478 19.3962 c
h
40.581402 11.5825 m
41.150398 11.5825 41.592701 11.8378 41.908199 12.3484 c
42.223801 12.859 42.3815 13.5302 42.3815 14.3621 c
42.3815 15.0275 42.303902 15.5783 42.1488 16.014299 c
41.853901 16.840401 41.310799 17.2535 40.519299 17.2535 c
39.717499 17.2535 39.166599 16.849001 38.8666 16.0401 c
38.711399 15.6098 38.633801 15.0534 38.633801 14.3707 c
38.633801 13.5675 38.794201 12.902 39.114899 12.3742 c
39.4356 11.8464 39.9244 11.5825 40.581402 11.5825 c
h
W
0 0 132 43 rc
35.5 23.4769 m
45.701599 23.4769 l
45.701599 8.5602999 l
35.5 8.5602999 l
h
f
Q
q
47.5424 19.1896 m
47.5424 13.536 l
47.5424 13.0024 47.5993 12.6008 47.7131 12.3312 c
47.914799 11.855 48.3106 11.617 48.900299 11.617 c
49.655499 11.617 50.172798 11.9554 50.452099 12.6324 c
50.597 12.9996 50.669399 13.4843 50.669399 14.0867 c
50.669399 19.1896 l
52.9118 19.1896 l
52.9118 9.8098001 l
50.762501 9.8098001 l
50.762501 11.1351 l
50.741798 11.1064 50.690102 11.0203 50.6073 10.8769 c
50.524502 10.7335 50.4263 10.6073 50.3125 10.4983 c
49.9659 10.1541 49.629601 9.9188004 49.303799 9.7925997 c
48.983002 9.6664 48.6054 9.6033001 48.170898 9.6033001 c
46.919102 9.6033001 46.075901 10.1024 45.641399 11.1006 c
45.398201 11.6514 45.276699 12.4632 45.276699 13.536 c
45.276699 19.1896 l
47.5424 19.1896 l
h
W
0 0 132 43 rc
44.276699 20.1896 m
53.9118 20.1896 l
53.9118 8.6033001 l
44.276699 8.6033001 l
h
f
Q
q
54.076599 22.451099 m
56.249199 22.451099 l
56.249199 15.6184 l
59.003799 19.146601 l
61.742802 19.146601 l
58.786499 15.5582 l
61.8592 9.8098001 l
59.189999 9.8098001 l
57.164799 13.8199 l
56.249199 12.7615 l
56.249199 9.8098001 l
54.076599 9.8098001 l
54.076599 22.451099 l
h
W
0 0 132 43 rc
53.076599 23.451099 m
62.8592 23.451099 l
62.8592 8.8098001 l
53.076599 8.8098001 l
h
f
Q
q
66.655403 14.3707 m
66.515701 14.2731 66.373497 14.1928 66.2286 14.1297 c
66.088898 14.0723 65.894997 14.0178 65.646698 13.9662 c
65.150101 13.863 l
64.684502 13.7712 64.350899 13.6593 64.149101 13.5273 c
63.807701 13.3036 63.637001 12.9565 63.637001 12.4861 c
63.637001 12.0673 63.740501 11.7633 63.947399 11.5739 c
64.1595 11.3904 64.415497 11.2986 64.715599 11.2986 c
65.191498 11.2986 65.628601 11.4535 66.026901 11.7633 c
66.430397 12.073 66.6399 12.6381 66.655403 13.4585 c
66.655403 14.3707 l
h
65.313004 15.5152 m
65.721703 15.5725 66.013901 15.6443 66.189796 15.7303 c
66.505402 15.8795 66.663101 16.111799 66.663101 16.427299 c
66.663101 16.811701 66.541603 17.0756 66.2985 17.219 c
66.060501 17.3682 65.708702 17.442801 65.243202 17.442801 c
64.720703 17.442801 64.350899 17.299299 64.133598 17.012501 c
63.978401 16.8002 63.875 16.513399 63.8232 16.152 c
61.6894 16.152 l
61.736 16.9723 61.942902 17.6464 62.3102 18.1742 c
62.894699 19.000299 63.898201 19.413401 65.320801 19.413401 c
66.246696 19.413401 67.069199 19.2097 67.7882 18.802401 c
68.507301 18.3951 68.866798 17.626301 68.866798 16.496201 c
68.866798 12.1935 l
68.866798 11.8952 68.871902 11.5338 68.882301 11.1092 c
68.897797 10.788 68.941803 10.57 69.014198 10.4552 c
69.086601 10.3405 69.195198 10.2458 69.340103 10.1713 c
69.340103 9.8098001 l
66.9347 9.8098001 l
66.8675 9.9991999 66.8209 10.177 66.794998 10.3434 c
66.769203 10.5097 66.748497 10.6991 66.733002 10.9113 c
66.427803 10.5442 66.075996 10.2315 65.677696 9.9733 c
65.201797 9.6693001 64.663803 9.5172997 64.063797 9.5172997 c
63.298199 9.5172997 62.664501 9.7581997 62.162701 10.2401 c
61.666199 10.7277 61.4179 11.4162 61.4179 12.3054 c
61.4179 13.4585 61.818802 14.2932 62.620499 14.8095 c
63.0602 15.0906 63.706799 15.2914 64.560402 15.4119 c
65.313004 15.5152 l
h
W
0 0 132 43 rc
60.4179 20.413401 m
70.340103 20.413401 l
70.340103 8.5172997 l
60.4179 8.5172997 l
h
f
Q
q
74.570801 19.413401 m
75.445 19.413401 76.158798 19.1581 76.712303 18.647499 c
77.271004 18.1427 77.550301 17.3022 77.550301 16.1262 c
77.550301 9.8098001 l
75.284599 9.8098001 l
75.284599 15.5152 l
75.284599 16.008499 75.225098 16.387199 75.106201 16.6511 c
74.888901 17.132999 74.475098 17.373899 73.8647 17.373899 c
73.114601 17.373899 72.599899 17.021099 72.320602 16.3155 c
72.175697 15.9426 72.103302 15.4664 72.103302 14.887 c
72.103302 9.8098001 l
69.899696 9.8098001 l
69.899696 19.1724 l
72.033501 19.1724 l
72.033501 17.804199 l
72.318001 18.2861 72.586998 18.6332 72.8405 18.8454 c
73.2957 19.2241 73.872398 19.413401 74.570801 19.413401 c
h
W
0 0 132 43 rc
68.899696 20.413401 m
78.550301 20.413401 l
78.550301 8.8098001 l
68.899696 8.8098001 l
h
f
Q
q
88.702103 9.8098001 2.2114 12.6843 rc
87.702103 23.494101 m
91.913498 23.494101 l
91.913498 8.8098001 l
87.702103 8.8098001 l
h
f
Q
q
95.461403 17.417 m
94.949303 17.417 94.551003 17.2391 94.266502 16.8834 c
93.987099 16.5277 93.811302 16.045799 93.7388 15.4377 c
97.176201 15.4377 l
97.139999 16.086 96.961502 16.5765 96.6408 16.909201 c
96.325302 17.2477 95.932098 17.417 95.461403 17.417 c
h
95.461403 19.439199 m
96.164902 19.439199 96.798599 19.2929 97.362396 19.000299 c
97.9263 18.7078 98.3918 18.245899 98.759102 17.614901 c
99.090202 17.058399 99.304802 16.413 99.403099 15.6787 c
99.459999 15.2484 99.483299 14.6288 99.473 13.8199 c
93.684502 13.8199 l
93.715599 12.8791 93.982002 12.2193 94.483704 11.8407 c
94.788902 11.6055 95.156197 11.4879 95.585602 11.4879 c
96.040802 11.4879 96.410599 11.6313 96.695099 11.9181 c
96.850304 12.073 96.987396 12.2882 97.1064 12.5635 c
99.364304 12.5635 l
99.307404 12.0071 99.046204 11.442 98.580597 10.8683 c
97.8564 9.9561005 96.842598 9.5001001 95.539001 9.5001001 c
94.462997 9.5001001 93.513802 9.8844004 92.691299 10.6532 c
91.868896 11.4219 91.457603 12.6725 91.457603 14.4051 c
91.457603 16.028601 91.827499 17.2735 92.5672 18.139799 c
93.312103 19.0061 94.276802 19.439199 95.461403 19.439199 c
h
W
0 0 132 43 rc
90.457603 20.439199 m
100.4833 20.439199 l
100.4833 8.5001001 l
90.457603 8.5001001 l
h
f
Q
q
104.68 19.430599 m
105.203 19.430599 105.676 19.3302 106.1 19.1294 c
106.53 18.9286 106.881 18.6217 107.156 18.208599 c
107.388 17.8587 107.531 17.497299 107.582 17.124399 c
107.634 16.7572 107.66 16.1548 107.66 15.3173 c
107.66 9.8098001 l
105.402 9.8098001 l
105.402 15.5152 l
105.402 16.02 105.324 16.427299 105.169 16.737101 c
104.967 17.1731 104.585 17.3911 104.021 17.3911 c
103.436 17.3911 102.991 17.1731 102.686 16.737101 c
102.386 16.3069 102.236 15.6902 102.236 14.887 c
102.236 9.8098001 l
100.0326 9.8098001 l
100.0326 22.451099 l
102.236 22.451099 l
102.236 17.967699 l
102.557 18.512699 102.927 18.8913 103.346 19.1036 c
103.77 19.3216 104.215 19.430599 104.68 19.430599 c
h
W
0 0 132 43 rc
99.0326 23.451099 m
108.66 23.451099 l
108.66 8.8098001 l
99.0326 8.8098001 l
h
f
Q
q
114.28 14.6071 m
117.182 14.6071 l
115.754 19.5993 l
114.28 14.6071 l
h
114.427 22.5 m
117.128 22.5 l
121.179 9.8128004 l
118.587 9.8128004 l
117.85 12.4208 l
113.635 12.4208 l
112.844 9.8128004 l
110.345 9.8128004 l
114.427 22.5 l
h
W
0 0 132 43 rc
109.345 23.5 m
122.179 23.5 l
122.179 8.8128004 l
109.345 8.8128004 l
h
f
Q
q
122.88 11.968 2.375 8.3739004 rc
121.88 21.3419 m
126.255 21.3419 l
126.255 10.968 l
121.88 10.968 l
h
f
Q
q
121.471 20.3419 5.0289998 2.1580999 rc
120.471 23.5 m
127.5 23.5 l
127.5 19.3419 l
120.471 19.3419 l
h
f
Q
q
121.471 9.8099003 5.0289998 2.1580999 rc
120.471 12.968 m
127.5 12.968 l
127.5 8.8099003 l
120.471 8.8099003 l
h
f
Q
q
84.186203 19.4331 m
84.131699 19.432899 l
83.098801 19.4228 82.337502 19.1269 81.676498 18.608 c
81.261497 18.284901 80.877998 17.822599 80.614403 17.2059 c
80.261597 16.425301 80.085197 15.4663 80.085197 14.3288 c
80.085197 12.9 80.405998 11.738 81.0476 10.8428 c
81.689201 9.9476004 82.690498 9.5 84.0513 9.5 c
84.079102 9.5 84.106697 9.5002003 84.1343 9.5007 c
84.161797 9.5002003 84.189499 9.5 84.2173 9.5 c
85.578102 9.5 86.5793 9.9476004 87.220901 10.8428 c
87.862503 11.738 88.183296 12.9 88.183296 14.3288 c
88.183296 15.9413 87.828903 17.1952 87.120003 18.090401 c
86.411102 18.9855 85.433197 19.4331 84.186203 19.4331 c
h
82.615402 16.1278 m
82.888397 16.9447 83.394699 17.355 84.1343 17.3587 c
84.873802 17.355 85.380096 16.9447 85.653099 16.1278 c
85.797997 15.6917 85.870399 15.1121 85.870399 14.3891 c
85.870399 13.7005 85.797997 13.1467 85.653099 12.7278 c
85.429199 12.0655 85.037498 11.6843 84.478203 11.584 c
84.364098 11.5674 84.247101 11.5585 84.131104 11.5573 c
84.0718 11.5578 84.013199 11.5596 83.955704 11.563 c
83.307602 11.6138 82.860802 12.0021 82.615402 12.7278 c
82.470596 13.1467 82.398102 13.7005 82.398102 14.3891 c
82.398102 15.1121 82.470596 15.6917 82.615402 16.1278 c
h
W*
0 0 132 43 rc
79.085197 20.4331 m
89.183296 20.4331 l
89.183296 8.5 l
79.085197 8.5 l
h
f
Q
q
37.4305 29.1059 m
37.4305 28.576099 37.549702 28.132601 37.788101 27.7752 c
38.026402 27.4179 38.408401 27.2393 38.934101 27.2393 c
39.3423 27.2393 39.676899 27.4041 39.938099 27.7337 c
40.202599 28.066299 40.334801 28.5422 40.334801 29.1614 c
40.334801 29.786699 40.199299 30.248699 39.928299 30.547501 c
39.657299 30.8494 39.322701 31.000299 38.924301 31.000299 c
38.480301 31.000299 38.119499 30.8402 37.841999 30.5198 c
37.567699 30.199499 37.4305 29.728201 37.4305 29.1059 c
h
38.757801 31.7257 m
39.159401 31.7257 39.495701 31.6457 39.766701 31.4855 c
39.923401 31.393101 40.101398 31.2314 40.300598 31.000299 c
40.300598 33.5 l
41.1478 33.5 l
41.1478 26.6894 l
40.354401 26.6894 l
40.354401 27.377899 l
40.148701 27.072901 39.905499 26.852699 39.624699 26.717199 c
39.343899 26.5816 39.022301 26.513901 38.659901 26.513901 c
38.075401 26.513901 37.569302 26.7449 37.141602 27.2069 c
36.713902 27.6721 36.5 28.2897 36.5 29.0597 c
36.5 29.7805 36.694302 30.404301 37.082802 30.931 c
37.474602 31.4608 38.033001 31.7257 38.757801 31.7257 c
h
W
0 0 132 43 rc
35.5 34.5 m
42.1478 34.5 l
42.1478 25.513901 l
35.5 25.513901 l
h
f
Q
q
42.355202 31.614901 m
43.251499 31.614901 l
43.251499 26.6894 l
42.355202 26.6894 l
42.355202 31.614901 l
h
42.355202 33.476898 m
43.251499 33.476898 l
43.251499 32.534321 l
42.355202 32.534321 l
42.355202 33.476898 l
h
W
0 0 132 43 rc
41.355202 34.476898 m
44.251499 34.476898 l
44.251499 25.6894 l
41.355202 25.6894 l
h
f
Q
q
44.512699 26.6894 0.88160002 6.7874999 rc
43.512699 34.476898 m
46.394299 34.476898 l
46.394299 25.6894 l
43.512699 25.6894 l
h
f
Q
q
47.5028 31.638 m
47.5028 28.3528 l
47.5028 28.100201 47.5453 27.893801 47.630199 27.7337 c
47.7869 27.438 48.079102 27.2901 48.506802 27.2901 c
49.120701 27.2901 49.538601 27.5488 49.760601 28.066299 c
49.881401 28.343599 49.941799 28.724001 49.941799 29.2076 c
49.941799 31.638 l
50.823399 31.638 l
50.823399 26.6894 l
49.990799 26.6894 l
50.000599 27.4195 l
49.886299 27.2316 49.744301 27.072901 49.574501 26.9436 c
49.238201 26.684799 48.830101 26.555401 48.350101 26.555401 c
47.602402 26.555401 47.092999 26.7911 46.821999 27.2624 c
46.675098 27.514999 46.6017 27.852301 46.6017 28.2743 c
46.6017 31.638 l
47.5028 31.638 l
h
W
0 0 132 43 rc
45.6017 32.638 m
51.823399 32.638 l
51.823399 25.555401 l
45.6017 25.555401 l
h
f
Q
q
52.084599 33.476898 m
52.9319 33.476898 l
52.9319 29.535601 l
55.194599 31.638 l
56.321098 31.638 l
54.313099 29.785101 l
56.433701 26.6894 l
55.307301 26.6894 l
53.671501 29.1845 l
52.9319 28.5469 l
52.9319 26.6894 l
52.084599 26.6894 l
52.084599 33.476898 l
h
W
0 0 132 43 rc
51.084599 34.476898 m
57.433701 34.476898 l
57.433701 25.6894 l
51.084599 25.6894 l
h
f
Q
q
57.0191 31.614901 m
57.915401 31.614901 l
57.915401 26.6894 l
57.0191 26.6894 l
57.0191 31.614901 l
h
57.0191 33.476898 m
57.915401 33.476898 l
57.915401 32.534321 l
57.0191 32.534321 l
57.0191 33.476898 l
h
W
0 0 132 43 rc
56.0191 34.476898 m
58.915401 34.476898 l
58.915401 25.6894 l
56.0191 25.6894 l
h
f
Q
q
59.676201 28.241899 m
59.702301 27.964701 59.775799 27.7521 59.896599 27.6043 c
60.118599 27.3363 60.503899 27.202299 61.052399 27.202299 c
61.378899 27.202299 61.666199 27.268499 61.914398 27.400999 c
62.162498 27.536501 62.286598 27.7444 62.286598 28.024799 c
62.286598 28.237301 62.187 28.399 61.987801 28.509899 c
61.8605 28.5777 61.6091 28.6562 61.233601 28.745501 c
60.533298 28.9119 l
60.085899 29.0166 59.756199 29.133699 59.5439 29.263 c
59.165199 29.4879 58.9758 29.799 58.9758 30.1964 c
58.9758 30.6646 59.153801 31.043501 59.509602 31.333 c
59.868801 31.622601 60.350399 31.7673 60.954399 31.7673 c
61.744598 31.7673 62.3144 31.548599 62.6637 31.1112 c
62.8825 30.834 62.988602 30.5352 62.982101 30.214899 c
62.149502 30.214899 l
62.133099 30.4028 62.062901 30.5737 61.9389 30.727699 c
61.736401 30.9464 61.385399 31.055799 60.885899 31.055799 c
60.552799 31.055799 60.299801 30.995701 60.126701 30.875601 c
59.957001 30.7554 59.872101 30.5968 59.872101 30.3997 c
59.872101 30.184 59.984699 30.0116 60.209999 29.8822 c
60.340599 29.805201 60.533298 29.7374 60.787899 29.6789 c
61.370701 29.544901 l
62.0042 29.400101 62.4286 29.26 62.6441 29.124399 c
62.987 28.9119 63.158401 28.5777 63.158401 28.121799 c
63.158401 27.681299 62.9804 27.3009 62.6245 26.980499 c
62.2719 26.6602 61.7332 26.5 61.008301 26.5 c
60.228001 26.5 59.6745 26.6663 59.348 26.999001 c
59.024799 27.334801 58.8517 27.7491 58.828899 28.241899 c
59.676201 28.241899 l
h
W
0 0 132 43 rc
57.828899 32.7673 m
64.158401 32.7673 l
64.158401 25.5 l
57.828899 25.5 l
h
f
Q
q
68.839798 27.225401 m
69.424301 27.225401 69.824203 27.4333 70.039703 27.849199 c
70.258499 28.268101 70.367897 28.7332 70.367897 29.2446 c
70.367897 29.7066 70.289497 30.082399 70.132797 30.371901 c
69.884697 30.827801 69.456902 31.055799 68.849602 31.055799 c
68.310898 31.055799 67.919098 30.8617 67.674202 30.4736 c
67.429298 30.085501 67.3069 29.6173 67.3069 29.069 c
67.3069 28.5422 67.429298 28.1033 67.674202 27.7521 c
67.919098 27.400999 68.307602 27.225401 68.839798 27.225401 c
h
68.8741 31.7812 m
69.550003 31.7812 70.121399 31.5686 70.588303 31.1436 c
71.055199 30.7185 71.288597 30.093201 71.288597 29.2677 c
71.288597 28.4699 71.082901 27.810699 70.671501 27.2901 c
70.260101 26.769501 69.621803 26.509199 68.756599 26.509199 c
68.035004 26.509199 67.461998 26.738701 67.037498 27.197701 c
66.612999 27.6597 66.400803 28.2789 66.400803 29.055099 c
66.400803 29.886801 66.624496 30.549101 67.0718 31.041901 c
67.519096 31.5348 68.119904 31.7812 68.8741 31.7812 c
h
W
0 0 132 43 rc
65.400803 32.7812 m
72.288597 32.7812 l
72.288597 25.509199 l
65.400803 25.509199 l
h
f
Q
q
72.2658 26.6894 0.88160002 6.7874999 rc
71.2658 34.476898 m
74.1474 34.476898 l
74.1474 25.6894 l
71.2658 25.6894 l
h
f
Q
q
76.558701 31.7488 m
76.930901 31.7488 77.291702 31.665701 77.641098 31.4993 c
77.990402 31.3361 78.2565 31.123501 78.4394 30.8617 c
78.6157 30.6122 78.7332 30.3211 78.792 29.9884 c
78.8442 29.7605 78.870399 29.396999 78.870399 28.898001 c
75.025703 28.898001 l
75.042099 28.395901 75.167801 27.992399 75.402802 27.6875 c
75.637901 27.385599 76.001999 27.234699 76.495003 27.234699 c
76.955399 27.234699 77.322701 27.377899 77.597 27.6644 c
77.7537 27.8307 77.8647 28.023199 77.93 28.241899 c
78.796898 28.241899 l
78.774002 28.0602 78.697304 27.856899 78.566704 27.632 c
78.4394 27.4102 78.2957 27.2285 78.135696 27.0868 c
77.867996 26.840401 77.536598 26.674 77.141502 26.587799 c
76.929298 26.5385 76.689301 26.513901 76.421501 26.513901 c
75.768501 26.513901 75.215103 26.7372 74.761299 27.1838 c
74.307404 27.6336 74.080498 28.2619 74.080498 29.069 c
74.080498 29.863701 74.308998 30.509001 74.766197 31.004999 c
75.223297 31.5009 75.820801 31.7488 76.558701 31.7488 c
h
77.964302 29.558701 m
77.928398 29.9191 77.8451 30.207199 77.7145 30.4228 c
77.4729 30.8232 77.069702 31.023399 76.504799 31.023399 c
76.099899 31.023399 75.760399 30.8848 75.486099 30.607599 c
75.2118 30.333401 75.066498 29.983801 75.050201 29.558701 c
77.964302 29.558701 l
h
W
0 0 132 43 rc
73.080498 32.748798 m
79.870399 32.748798 l
79.870399 25.513901 l
73.080498 25.513901 l
h
f
Q
q
79.8573 33.5 m
80.738899 33.5 l
80.738899 30.968 l
80.947899 31.217501 81.135597 31.393101 81.302101 31.494699 c
81.586197 31.6703 81.940498 31.758101 82.364899 31.758101 c
83.125702 31.758101 83.641602 31.507 83.912598 31.004999 c
84.059502 30.730801 84.133003 30.350401 84.133003 29.863701 c
84.133003 26.6894 l
83.226898 26.6894 l
83.226898 29.8083 l
83.226898 30.1717 83.177902 30.4382 83.080002 30.607599 c
82.919998 30.8787 82.619598 31.0142 82.178802 31.0142 c
81.813103 31.0142 81.481697 30.895599 81.184601 30.6584 c
80.887497 30.4212 80.738899 29.973 80.738899 29.3139 c
80.738899 26.6894 l
79.8573 26.6894 l
79.8573 33.5 l
h
W
0 0 132 43 rc
78.8573 34.5 m
85.133003 34.5 l
85.133003 25.6894 l
78.8573 25.6894 l
h
f
Q
q
88.0317 31.638 m
88.903503 31.638 l
88.903503 30.9356 l
89.112396 31.179001 89.301804 31.3561 89.471603 31.466999 c
89.762199 31.6549 90.091904 31.7488 90.460899 31.7488 c
90.878799 31.7488 91.215103 31.6518 91.469803 31.4578 c
91.613503 31.346901 91.744102 31.183599 91.861603 30.968 c
92.057503 31.232901 92.287697 31.428499 92.5522 31.5548 c
92.816704 31.6842 93.1138 31.7488 93.443604 31.7488 c
94.148804 31.7488 94.628799 31.5086 94.883499 31.028099 c
95.020599 30.7693 95.089203 30.4212 95.089203 29.983801 c
95.089203 26.6894 l
94.173302 26.6894 l
94.173302 30.1271 l
94.173302 30.456699 94.085098 30.6831 93.908798 30.806299 c
93.735802 30.929501 93.523598 30.9911 93.272102 30.9911 c
92.926003 30.9911 92.627296 30.881701 92.3759 30.663 c
92.127701 30.4443 92.0037 30.0793 92.0037 29.568001 c
92.0037 26.6894 l
91.107399 26.6894 l
91.107399 29.9191 l
91.107399 30.2549 91.064903 30.4998 90.980003 30.653799 c
90.846199 30.8848 90.596397 31.000299 90.230698 31.000299 c
89.897697 31.000299 89.594002 30.8787 89.319801 30.6353 c
89.048698 30.392 88.9132 29.9515 88.9132 29.3139 c
88.9132 26.6894 l
88.0317 26.6894 l
88.0317 31.638 l
h
W
0 0 132 43 rc
87.0317 32.748798 m
96.089203 32.748798 l
96.089203 25.6894 l
87.0317 25.6894 l
h
f
Q
q
96.962601 28.0063 m
96.962601 27.766001 97.055702 27.576599 97.241798 27.438 c
97.427902 27.299299 97.6483 27.23 97.902901 27.23 c
98.213097 27.23 98.513496 27.2978 98.8041 27.4333 c
99.2939 27.658199 99.538803 28.0263 99.538803 28.5376 c
99.538803 29.2076 l
99.431 29.1429 99.292198 29.089001 99.122498 29.0459 c
98.952698 29.0028 98.786201 28.971901 98.622902 28.953501 c
98.089104 28.8888 l
97.769096 28.8487 97.529099 28.785601 97.369102 28.699301 c
97.098099 28.5546 96.962601 28.3235 96.962601 28.0063 c
h
99.098 29.688101 m
99.3004 29.712799 99.435898 29.792801 99.504501 29.9284 c
99.543701 30.0023 99.563202 30.108601 99.563202 30.2472 c
99.563202 30.5306 99.455498 30.735399 99.239998 30.8617 c
99.027802 30.9911 98.722504 31.055799 98.324097 31.055799 c
97.8638 31.055799 97.5373 30.9387 97.344597 30.704599 c
97.2369 30.575199 97.166702 30.3827 97.134003 30.1271 c
96.311203 30.1271 l
96.327499 30.737 96.536499 31.1605 96.938103 31.397699 c
97.343002 31.638 97.811501 31.758101 98.343697 31.758101 c
98.9608 31.758101 99.461998 31.6472 99.847298 31.4254 c
100.2293 31.2036 100.4203 30.858601 100.4203 30.3904 c
100.4203 27.5396 l
100.4203 27.4534 100.4383 27.384001 100.4742 27.331699 c
100.513 27.279301 100.593 27.253099 100.714 27.253099 c
100.753 27.253099 100.797 27.2547 100.846 27.257799 c
100.895 27.263901 100.948 27.271601 101.003 27.280899 c
101.003 26.6663 l
100.866 26.6294 100.762 26.6063 100.69 26.597 c
100.618 26.587799 100.52 26.5832 100.3958 26.5832 c
100.0922 26.5832 99.871803 26.684799 99.734703 26.8881 c
99.662804 26.995899 99.612198 27.148399 99.582802 27.345501 c
99.403297 27.1238 99.145302 26.9312 98.808998 26.768 c
98.472702 26.6047 98.102097 26.5231 97.697197 26.5231 c
97.210701 26.5231 96.812401 26.661699 96.502197 26.9389 c
96.195297 27.219299 96.041801 27.568899 96.041801 27.987801 c
96.041801 28.4468 96.193703 28.8025 96.497299 29.055099 c
96.801003 29.307699 97.199303 29.463301 97.692299 29.521799 c
99.098 29.688101 l
h
W
0 0 132 43 rc
95.041801 32.758099 m
102.003 32.758099 l
102.003 25.5231 l
95.041801 25.5231 l
h
f
Q
q
101.77 31.638 m
102.607 31.638 l
102.607 30.9356 l
102.855 31.225201 103.118 31.4331 103.396 31.559401 c
103.673 31.685699 103.982 31.7488 104.321 31.7488 c
105.066 31.7488 105.569 31.504 105.83 31.0142 c
105.974 30.746201 106.045 30.3627 106.045 29.863701 c
106.045 26.6894 l
105.149 26.6894 l
105.149 29.8083 l
105.149 30.1101 105.102 30.3535 105.007 30.5383 c
104.85 30.8463 104.566 31.000299 104.155 31.000299 c
103.946 31.000299 103.774 30.980301 103.641 30.9403 c
103.399 30.872499 103.187 30.737 103.004 30.533701 c
102.857 30.370399 102.761 30.201 102.715 30.0254 c
102.673 29.8529 102.651 29.605 102.651 29.2815 c
102.651 26.6894 l
101.77 26.6894 l
101.77 31.638 l
h
W
0 0 132 43 rc
100.77 32.748798 m
107.045 32.748798 l
107.045 25.6894 l
100.77 25.6894 l
h
f
Q
q
108.134 31.638 m
108.134 28.3528 l
108.134 28.100201 108.177 27.893801 108.262 27.7337 c
108.418 27.438 108.711 27.2901 109.138 27.2901 c
109.752 27.2901 110.17 27.5488 110.392 28.066299 c
110.513 28.343599 110.573 28.724001 110.573 29.2076 c
110.573 31.638 l
111.455 31.638 l
111.455 26.6894 l
110.622 26.6894 l
110.632 27.4195 l
110.518 27.2316 110.376 27.072901 110.206 26.9436 c
109.87 26.684799 109.462 26.555401 108.982 26.555401 c
108.234 26.555401 107.725 26.7911 107.454 27.2624 c
107.307 27.514999 107.233 27.852301 107.233 28.2743 c
107.233 31.638 l
108.134 31.638 l
h
W
0 0 132 43 rc
106.233 32.638 m
112.455 32.638 l
112.455 25.555401 l
106.233 25.555401 l
h
f
Q
q
113.26 28.241899 m
113.286 27.964701 113.359 27.7521 113.48 27.6043 c
113.702 27.3363 114.087 27.202299 114.636 27.202299 c
114.962 27.202299 115.25 27.268499 115.498 27.400999 c
115.746 27.536501 115.87 27.7444 115.87 28.024799 c
115.87 28.237301 115.771 28.399 115.571 28.509899 c
115.444 28.5777 115.193 28.6562 114.817 28.745501 c
114.117 28.9119 l
113.67 29.0166 113.34 29.133699 113.128 29.263 c
112.749 29.4879 112.559 29.799 112.559 30.1964 c
112.559 30.6646 112.737 31.043501 113.093 31.333 c
113.452 31.622601 113.934 31.7673 114.538 31.7673 c
115.328 31.7673 115.898 31.548599 116.247 31.1112 c
116.466 30.834 116.572 30.5352 116.566 30.214899 c
115.733 30.214899 l
115.717 30.4028 115.647 30.5737 115.522 30.727699 c
115.32 30.9464 114.969 31.055799 114.469 31.055799 c
114.136 31.055799 113.883 30.995701 113.71 30.875601 c
113.541 30.7554 113.456 30.5968 113.456 30.3997 c
113.456 30.184 113.568 30.0116 113.794 29.8822 c
113.924 29.805201 114.117 29.7374 114.372 29.6789 c
114.954 29.544901 l
115.588 29.400101 116.012 29.26 116.228 29.124399 c
116.571 28.9119 116.742 28.5777 116.742 28.121799 c
116.742 27.681299 116.564 27.3009 116.208 26.980499 c
115.855 26.6602 115.317 26.5 114.592 26.5 c
113.812 26.5 113.258 26.6663 112.932 26.999001 c
112.608 27.334801 112.435 27.7491 112.412 28.241899 c
113.26 28.241899 l
h
W
0 0 132 43 rc
111.412 32.7673 m
117.742 32.7673 l
117.742 25.5 l
111.412 25.5 l
h
f
Q
q
117.651 31.614901 m
118.547 31.614901 l
118.547 26.6894 l
117.651 26.6894 l
117.651 31.614901 l
h
117.651 33.476898 m
118.547 33.476898 l
118.547 32.534321 l
117.651 32.534321 l
117.651 33.476898 l
h
W
0 0 132 43 rc
116.651 34.476898 m
119.547 34.476898 l
119.547 25.6894 l
116.651 25.6894 l
h
f
Q
q
120.459 28.0063 m
120.459 27.766001 120.553 27.576599 120.739 27.438 c
120.925 27.299299 121.145 27.23 121.4 27.23 c
121.71 27.23 122.01 27.2978 122.301 27.4333 c
122.791 27.658199 123.036 28.0263 123.036 28.5376 c
123.036 29.2076 l
122.928 29.1429 122.789 29.089001 122.619 29.0459 c
122.45 29.0028 122.283 28.971901 122.12 28.953501 c
121.586 28.8888 l
121.266 28.8487 121.026 28.785601 120.866 28.699301 c
120.595 28.5546 120.459 28.3235 120.459 28.0063 c
h
122.595 29.688101 m
122.797 29.712799 122.933 29.792801 123.001 29.9284 c
123.041 30.0023 123.06 30.108601 123.06 30.2472 c
123.06 30.5306 122.952 30.735399 122.737 30.8617 c
122.525 30.9911 122.219 31.055799 121.821 31.055799 c
121.361 31.055799 121.034 30.9387 120.841 30.704599 c
120.734 30.575199 120.664 30.3827 120.631 30.1271 c
119.808 30.1271 l
119.824 30.737 120.033 31.1605 120.435 31.397699 c
120.84 31.638 121.308 31.758101 121.841 31.758101 c
122.458 31.758101 122.959 31.6472 123.344 31.4254 c
123.726 31.2036 123.917 30.858601 123.917 30.3904 c
123.917 27.5396 l
123.917 27.4534 123.935 27.384001 123.971 27.331699 c
124.01 27.279301 124.09 27.253099 124.211 27.253099 c
124.25 27.253099 124.294 27.2547 124.343 27.257799 c
124.392 27.263901 124.444 27.271601 124.5 27.280899 c
124.5 26.6663 l
124.363 26.6294 124.258 26.6063 124.187 26.597 c
124.115 26.587799 124.017 26.5832 123.893 26.5832 c
123.589 26.5832 123.369 26.684799 123.232 26.8881 c
123.16 26.995899 123.109 27.148399 123.08 27.345501 c
122.9 27.1238 122.642 26.9312 122.306 26.768 c
121.97 26.6047 121.599 26.5231 121.194 26.5231 c
120.708 26.5231 120.309 26.661699 119.999 26.9389 c
119.692 27.219299 119.539 27.568899 119.539 27.987801 c
119.539 28.4468 119.691 28.8025 119.994 29.055099 c
120.298 29.307699 120.696 29.463301 121.189 29.521799 c
122.595 29.688101 l
h
W
0 0 132 43 rc
118.539 32.758099 m
125.5 32.758099 l
125.5 25.5231 l
118.539 25.5231 l
h
f
Q
q
14.4605 18.342501 m
17.9266 15.5357 22.8836 15.5357 26.349701 18.342501 c
25.009501 19.9974 l
22.3248 17.8234 18.485399 17.8234 15.8007 19.9974 c
14.4605 18.342501 l
h
W
0 0 132 43 rc
13.4605 20.9974 m
27.349701 20.9974 l
27.349701 14.5357 l
13.4605 14.5357 l
h
f
Q
q
15.904 21.986601 2.1296 2.8769 rc
14.904 25.863501 m
19.0336 25.863501 l
19.0336 20.986601 l
14.904 20.986601 l
h
f
Q
q
22.511999 21.986601 2.1294999 2.8769 rc
21.511999 25.863501 m
25.6415 25.863501 l
25.6415 20.986601 l
21.511999 20.986601 l
h
f
Q
q
31.5 21 m
31.5 14.6487 26.351299 9.5 20 9.5 c
13.6487 9.5 8.5 14.6487 8.5 21 c
8.5 27.351299 13.6487 32.5 20 32.5 c
26.351299 32.5 31.5 27.351299 31.5 21 c
h
29.370501 21 m
29.370501 15.8248 25.1752 11.6295 20 11.6295 c
14.8248 11.6295 10.6295 15.8248 10.6295 21 c
10.6295 26.1752 14.8248 30.370501 20 30.370501 c
25.1752 30.370501 29.370501 26.1752 29.370501 21 c
h
W*
0 0 132 43 rc
7.5 33.5 m
32.5 33.5 l
32.5 8.5 l
7.5 8.5 l
h
f
ep
end
%%Trailer
%%EOF
