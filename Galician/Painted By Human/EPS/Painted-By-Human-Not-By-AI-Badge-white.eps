%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.2.1 (Build 23C71) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.49975 42 l
124.50775 42 130.99976 35.508129 130.99976 27.5 c
130.99976 1 l
15.49995 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
131.99976 43 l
131.99976 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.49975 0 l
123.50775 0 129.99976 6.4918699 129.99976 14.5 c
129.99976 41 l
14.49995 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
q
17.46055 18.342501 m
20.926649 15.5357 25.883551 15.5357 29.349649 18.342501 c
28.00955 19.9974 l
25.32485 17.8234 21.48535 17.8234 18.80065 19.9974 c
17.46055 18.342501 l
h
W
0 0 132 43 rc
16.46055 20.9974 m
30.349649 20.9974 l
30.349649 14.5357 l
16.46055 14.5357 l
h
f
Q
q
18.904051 21.986601 2.1294999 2.8769 rc
17.904051 25.863501 m
22.03355 25.863501 l
22.03355 20.986601 l
17.904051 20.986601 l
h
f
Q
q
25.512051 21.986601 2.1294999 2.8769 rc
24.512051 25.863501 m
28.64155 25.863501 l
28.64155 20.986601 l
24.512051 20.986601 l
h
f
Q
q
34.49995 21 m
34.49995 14.6487 29.35125 9.5 22.99995 9.5 c
16.64875 9.5 11.49995 14.6487 11.49995 21 c
11.49995 27.351299 16.64875 32.5 22.99995 32.5 c
29.35125 32.5 34.49995 27.351299 34.49995 21 c
h
32.370449 21 m
32.370449 15.8248 28.17515 11.6295 22.99995 11.6295 c
17.82485 11.6295 13.62955 15.8248 13.62955 21 c
13.62955 26.1752 17.82485 30.370501 22.99995 30.370501 c
28.17515 30.370501 32.370449 26.1752 32.370449 21 c
h
W*
0 0 132 43 rc
10.49995 33.5 m
35.49995 33.5 l
35.49995 8.5 l
10.49995 8.5 l
h
f
Q
q
63.357449 31.412901 m
63.087349 31.578899 62.752151 31.6619 62.351849 31.6619 c
61.629452 31.6619 61.072948 31.3874 60.682449 30.838499 c
60.295151 30.292801 60.101551 29.646601 60.101551 28.899799 c
60.101551 28.101999 60.314751 27.4622 60.741051 26.980301 c
61.167351 26.5016 61.671749 26.2623 62.25425 26.2623 c
62.615452 26.2623 62.935951 26.3325 63.215851 26.4729 c
63.49575 26.6133 63.738152 26.841499 63.94315 27.1574 c
63.94315 26.444201 l
64.733948 26.444201 l
64.733948 33.5 l
63.88945 33.5 l
63.88945 30.910299 l
63.690948 31.1497 63.513649 31.3172 63.357449 31.412901 c
h
61.385349 27.569099 m
61.147751 27.939301 61.029049 28.3988 61.029049 28.947701 c
61.029049 29.5923 61.165649 30.080601 61.439049 30.4125 c
61.715649 30.7444 62.075249 30.910299 62.517849 30.910299 c
62.914848 30.910299 63.248348 30.753901 63.518452 30.4412 c
63.788551 30.131701 63.923649 29.653 63.923649 29.005199 c
63.923649 28.363701 63.791851 27.870701 63.528252 27.525999 c
63.267948 27.184601 62.934349 27.0138 62.52755 27.0138 c
62.003651 27.0138 61.622952 27.1989 61.385349 27.569099 c
h
W*
0 0 132 43 rc
59.101551 34.5 m
65.733948 34.5 l
65.733948 25.2623 l
59.101551 25.2623 l
h
f
Q
q
42.381351 31.4081 m
42.173149 31.2805 41.981152 31.100201 41.805351 30.867201 c
41.805351 31.547001 l
40.951149 31.547001 l
40.951149 24.4002 l
41.82975 24.4002 l
41.82975 27.0186 l
42.021751 26.785601 42.19585 26.6213 42.352051 26.5256 c
42.61895 26.3564 42.949249 26.2719 43.343048 26.2719 c
43.844151 26.2719 44.283451 26.423401 44.66095 26.726601 c
45.256451 27.205299 45.554249 28.003099 45.554249 29.120001 c
45.554249 29.9466 45.347649 30.5816 44.934349 31.0252 c
44.521049 31.472 44.01825 31.6954 43.425949 31.6954 c
43.025749 31.6954 42.677551 31.5996 42.381351 31.4081 c
h
44.246052 27.525999 m
43.975948 27.190901 43.635849 27.023399 43.225849 27.023399 c
42.620548 27.023399 42.204048 27.2883 41.97625 27.818001 c
41.85585 28.0956 41.79565 28.432301 41.79565 28.827999 c
41.79565 29.3195 41.85585 29.7248 41.97625 30.0439 c
42.200748 30.640699 42.617352 30.938999 43.225849 30.938999 c
43.83115 30.938999 44.24765 30.656601 44.475449 30.091801 c
44.595852 29.798201 44.656052 29.4471 44.656052 29.0387 c
44.656052 28.3685 44.519451 27.8643 44.246052 27.525999 c
h
W*
0 0 132 43 rc
39.951149 32.6954 m
46.554249 32.6954 l
46.554249 23.4002 l
39.951149 23.4002 l
h
f
Q
q
48.852451 29.900299 m
48.81015 29.7216 48.788952 29.464701 48.788952 29.129601 c
48.788952 26.444201 l
47.910351 26.444201 l
47.910351 31.5709 l
48.745049 31.5709 l
48.745049 30.8433 l
48.992352 31.143299 49.254349 31.3587 49.530949 31.4895 c
49.807549 31.620399 50.115051 31.685801 50.453548 31.685801 c
51.19545 31.685801 51.696651 31.4321 51.956951 30.9247 c
52.100151 30.646999 52.171749 30.249701 52.171749 29.7328 c
52.171749 26.444201 l
51.27845 26.444201 l
51.27845 29.675301 l
51.27845 29.988001 51.231251 30.2402 51.136951 30.431601 c
50.980751 30.750799 50.697552 30.910299 50.287552 30.910299 c
50.07925 30.910299 49.908451 30.889601 49.775051 30.848101 c
49.534248 30.777901 49.322651 30.637501 49.14045 30.4268 c
48.994049 30.2577 48.898048 30.082199 48.852451 29.900299 c
h
W
0 0 132 43 rc
46.910351 32.685799 m
53.171749 32.685799 l
53.171749 25.444201 l
46.910351 25.444201 l
h
f
Q
q
54.274849 27.162201 m
54.15115 27.222799 54.089352 27.342501 54.089352 27.5212 c
54.089352 30.867201 l
54.924049 30.867201 l
54.924049 31.5709 l
54.089352 31.5709 l
54.089352 33.002171 l
53.200951 33.002171 l
53.200951 31.5709 l
52.493149 31.5709 l
52.493149 30.867201 l
53.200951 30.867201 l
53.200951 27.4734 l
53.200951 27.144699 53.274151 26.8766 53.420551 26.669201 c
53.567051 26.464899 53.845249 26.362801 54.255249 26.362801 c
54.382252 26.362801 54.499352 26.3692 54.60675 26.382 c
54.71735 26.394699 54.823151 26.415501 54.924049 26.444201 c
54.924049 27.123899 l
54.858952 27.1175 54.802052 27.112801 54.753151 27.1096 c
54.61655 27.1096 l
54.45705 27.1096 54.343151 27.1271 54.274849 27.162201 c
h
W
0 0 132 43 rc
51.493149 34.002171 m
55.924049 34.002171 l
55.924049 25.362801 l
51.493149 25.362801 l
h
f
Q
q
58.15955 29.5509 m
58.361351 29.576401 58.496349 29.659401 58.564751 29.799801 c
58.603748 29.8764 58.623348 29.9865 58.623348 30.1301 c
58.623348 30.4237 58.515949 30.6359 58.301151 30.766701 c
58.089649 30.9007 57.785351 30.9678 57.388351 30.9678 c
56.929451 30.9678 56.60405 30.8465 56.412048 30.604 c
56.304649 30.4699 56.234749 30.2705 56.202148 30.0056 c
55.382149 30.0056 l
55.39835 30.637501 55.606651 31.0763 56.00695 31.322001 c
56.41045 31.5709 56.877449 31.6954 57.407848 31.6954 c
58.02285 31.6954 58.522449 31.5805 58.906448 31.3507 c
59.287151 31.120899 59.477551 30.7635 59.477551 30.2785 c
59.477551 27.325001 l
59.477551 27.2356 59.495449 27.163799 59.53125 27.1096 c
59.570251 27.0553 59.650051 27.0282 59.770451 27.0282 c
59.809448 27.0282 59.853352 27.0298 59.902248 27.033001 c
59.95105 27.0394 60.003052 27.0473 60.058449 27.0569 c
60.058449 26.4203 l
59.921749 26.382 59.817551 26.358 59.746052 26.348499 c
59.67445 26.3389 59.576752 26.334101 59.453152 26.334101 c
59.150452 26.334101 58.930851 26.4394 58.794151 26.65 c
58.722549 26.7617 58.67215 26.919701 58.642849 27.123899 c
58.463848 26.894199 58.206749 26.6947 57.871552 26.5256 c
57.53635 26.3564 57.167049 26.2719 56.76355 26.2719 c
56.278648 26.2719 55.881649 26.415501 55.572449 26.7027 c
55.266548 26.993099 55.113651 27.355301 55.113651 27.789301 c
55.113651 28.264799 55.26495 28.6334 55.567551 28.8951 c
55.870251 29.1567 56.26725 29.3179 56.758652 29.3785 c
58.15955 29.5509 l
h
56.031349 27.808399 m
56.031349 27.5595 56.12405 27.3633 56.309551 27.2197 c
56.495049 27.076099 56.714748 27.0042 56.968552 27.0042 c
57.277649 27.0042 57.577049 27.074499 57.86665 27.214899 c
58.354851 27.4478 58.59885 27.829201 58.59885 28.3589 c
58.59885 29.052999 l
58.49155 28.986 58.353249 28.930201 58.183949 28.8855 c
58.014751 28.840799 57.848751 28.808901 57.68605 28.7897 c
57.154049 28.7227 l
56.835152 28.6812 56.595951 28.615801 56.436451 28.526501 c
56.166351 28.376499 56.031349 28.1371 56.031349 27.808399 c
h
W*
0 0 132 43 rc
54.113651 32.6954 m
61.058449 32.6954 l
61.058449 25.2719 l
54.113651 25.2719 l
h
f
Q
q
67.696152 31.719299 m
68.369751 31.719299 68.939247 31.4991 69.404549 31.058701 c
69.869949 30.618299 70.102654 29.970501 70.102654 29.1152 c
70.102654 28.2887 69.897552 27.605801 69.487549 27.0665 c
69.077553 26.527201 68.441353 26.2575 67.578949 26.2575 c
66.859749 26.2575 66.288651 26.495199 65.865646 26.970699 c
65.442551 27.4494 65.231049 28.0909 65.231049 28.8951 c
65.231049 29.756701 65.453949 30.442801 65.89975 30.9534 c
66.34565 31.464001 66.944351 31.719299 67.696152 31.719299 c
h
67.661949 26.9995 m
68.244453 26.9995 68.643051 27.214899 68.857849 27.6457 c
69.075951 28.0797 69.184952 28.5616 69.184952 29.091299 c
69.184952 29.57 69.10685 29.959299 68.950653 30.2593 c
68.703346 30.7316 68.276947 30.9678 67.671753 30.9678 c
67.13475 30.9678 66.744247 30.766701 66.500153 30.364599 c
66.256149 29.9625 66.134048 29.477501 66.134048 28.909401 c
66.134048 28.363701 66.256149 27.909 66.500153 27.5452 c
66.744247 27.1814 67.131554 26.9995 67.661949 26.9995 c
h
W*
0 0 132 43 rc
64.231049 32.719299 m
71.102654 32.719299 l
71.102654 25.2575 l
64.231049 25.2575 l
h
f
Q
q
81.930847 31.058701 m
81.465446 31.4991 80.896049 31.719299 80.222351 31.719299 c
79.47065 31.719299 78.871849 31.464001 78.426048 30.9534 c
77.980247 30.442801 77.757347 29.756701 77.757347 28.895 c
77.757347 28.090799 77.968849 27.4494 78.391853 26.970699 c
78.814949 26.495199 79.386047 26.2575 80.105247 26.2575 c
80.967651 26.2575 81.603851 26.5271 82.013847 27.066401 c
82.423851 27.605801 82.628853 28.2887 82.628853 29.1152 c
82.628853 29.970501 82.396248 30.618299 81.930847 31.058701 c
h
81.384148 27.6457 m
81.16935 27.2148 80.770752 26.999399 80.188248 26.999399 c
79.657753 26.999399 79.270554 27.181299 79.026451 27.545099 c
78.782448 27.908899 78.660347 28.363701 78.660347 28.909401 c
78.660347 29.4774 78.782448 29.9625 79.026451 30.364599 c
79.270554 30.766701 79.661049 30.967699 80.197952 30.967699 c
80.803253 30.967699 81.229553 30.7316 81.476852 30.2593 c
81.633049 29.959299 81.711151 29.57 81.711151 29.091299 c
81.711151 28.561501 81.60215 28.0797 81.384148 27.6457 c
h
W*
0 0 132 43 rc
76.757347 32.719299 m
83.628853 32.719299 l
83.628853 25.2575 l
76.757347 25.2575 l
h
f
Q
q
74.148849 31.4081 m
73.940552 31.2805 73.74855 31.100201 73.572853 30.867201 c
73.572853 31.5469 l
72.718651 31.5469 l
72.718651 24.4002 l
73.597252 24.4002 l
73.597252 27.0186 l
73.789253 26.785601 73.963348 26.6213 74.119553 26.525499 c
74.386452 26.3564 74.716751 26.271799 75.110451 26.271799 c
75.611649 26.271799 76.050949 26.423401 76.428452 26.726601 c
77.023949 27.205299 77.321747 28.003099 77.321747 29.120001 c
77.321747 29.946501 77.115051 30.5816 76.701752 31.0252 c
76.288551 31.471901 75.785751 31.695299 75.193451 31.695299 c
74.793152 31.695299 74.444946 31.5996 74.148849 31.4081 c
h
76.01355 27.525999 m
75.743446 27.190901 75.403351 27.023399 74.993347 27.023399 c
74.388046 27.023399 73.971451 27.2882 73.743752 27.818001 c
73.623253 28.0956 73.563049 28.432301 73.563049 28.827999 c
73.563049 29.3195 73.623253 29.724701 73.743752 30.0439 c
73.968246 30.6406 74.38475 30.938999 74.993347 30.938999 c
75.598648 30.938999 76.015152 30.656601 76.24295 30.0917 c
76.36335 29.7981 76.423553 29.4471 76.423553 29.038601 c
76.423553 28.3685 76.28685 27.8643 76.01355 27.525999 c
h
W*
0 0 132 43 rc
71.718651 32.695301 m
78.321747 32.695301 l
78.321747 23.4002 l
71.718651 23.4002 l
h
f
Q
q
84.276047 30.355 m
84.038452 30.0774 83.919647 29.756701 83.919647 29.3929 c
83.919647 26.444201 l
83.041054 26.444201 l
83.041054 31.5709 l
83.875748 31.5709 l
83.875748 30.685301 l
83.944054 30.857599 84.111649 31.0667 84.378548 31.312401 c
84.645348 31.5613 84.95295 31.685801 85.301147 31.685801 c
85.317352 31.685801 85.345047 31.6842 85.384048 31.681 c
85.423149 31.677799 85.489853 31.6714 85.584251 31.6618 c
85.584251 30.7523 l
85.53215 30.7619 85.483353 30.768299 85.437752 30.7715 c
85.395447 30.7747 85.348251 30.7763 85.296249 30.7763 c
84.853653 30.7763 84.51355 30.635799 84.276047 30.355 c
h
W
0 0 132 43 rc
82.041054 32.685799 m
86.584251 32.685799 l
86.584251 25.444201 l
82.041054 25.444201 l
h
f
Q
q
89.285049 31.422501 m
89.119148 31.3172 88.931953 31.1353 88.723747 30.876801 c
88.723747 33.5 l
87.845047 33.5 l
87.845047 26.444201 l
88.723747 26.444201 l
88.723747 29.163099 l
88.723747 29.846001 88.87175 30.3104 89.167953 30.556101 c
89.46405 30.8018 89.79435 30.9247 90.158852 30.9247 c
90.598152 30.9247 90.897552 30.7843 91.056953 30.503401 c
91.154648 30.3279 91.203453 30.051901 91.203453 29.675301 c
91.203453 26.444201 l
92.106453 26.444201 l
92.106453 29.7328 l
92.106453 30.237 92.033249 30.6311 91.886848 30.9151 c
91.616753 31.435301 91.102547 31.6954 90.344353 31.6954 c
89.921249 31.6954 89.568153 31.604401 89.285049 31.422501 c
h
W
0 0 132 43 rc
86.845047 34.5 m
93.106453 34.5 l
93.106453 25.444201 l
86.845047 25.444201 l
h
f
Q
q
93.965446 27.525999 m
93.880852 27.691999 93.838547 27.9058 93.838547 28.1675 c
93.838547 31.5709 l
92.940353 31.5709 l
92.940353 28.0861 l
92.940353 27.648899 93.013649 27.2994 93.160049 27.0378 c
93.430153 26.5495 93.937851 26.305401 94.683052 26.305401 c
95.161346 26.305401 95.568153 26.4394 95.903351 26.7075 c
96.072548 26.841499 96.214149 27.0058 96.328049 27.2005 c
96.318253 26.444201 l
97.148048 26.444201 l
97.148048 31.5709 l
96.269447 31.5709 l
96.269447 29.052999 l
96.269447 28.552 96.209251 28.1579 96.088852 27.870701 c
95.867554 27.334499 95.45105 27.0665 94.839249 27.0665 c
94.412949 27.0665 94.121651 27.2197 93.965446 27.525999 c
h
W
0 0 132 43 rc
91.940353 32.5709 m
98.148048 32.5709 l
98.148048 25.305401 l
91.940353 25.305401 l
h
f
Q
q
99.358551 30.5322 m
99.088448 30.280001 98.953453 29.8237 98.953453 29.163099 c
98.953453 26.444201 l
98.074753 26.444201 l
98.074753 31.5709 l
98.943649 31.5709 l
98.943649 30.8433 l
99.151947 31.0954 99.340652 31.2789 99.50985 31.393801 c
99.799454 31.588499 100.12775 31.685801 100.49575 31.685801 c
100.91275 31.685801 101.24775 31.5853 101.50175 31.384199 c
101.64475 31.2693 101.77475 31.100201 101.89175 30.876801 c
102.08675 31.1513 102.31675 31.353901 102.57975 31.484699 c
102.84375 31.618799 103.13975 31.685801 103.46875 31.685801 c
104.17175 31.685801 104.64975 31.436899 104.90375 30.938999 c
105.04075 30.671 105.10875 30.3104 105.10875 29.857201 c
105.10875 26.444201 l
104.19575 26.444201 l
104.19575 30.0056 l
104.19575 30.347099 104.10775 30.5816 103.93275 30.709299 c
103.75975 30.836901 103.54875 30.9007 103.29775 30.9007 c
102.95275 30.9007 102.65475 30.7875 102.40475 30.5609 c
102.15675 30.334299 102.03375 29.9561 102.03375 29.426399 c
102.03375 26.444201 l
101.13975 26.444201 l
101.13975 29.790199 l
101.13975 30.138 101.09775 30.391701 101.01375 30.5513 c
100.87975 30.7906 100.63075 30.910299 100.26675 30.910299 c
99.934547 30.910299 99.63195 30.7843 99.358551 30.5322 c
h
W
0 0 132 43 rc
97.074753 32.685799 m
106.10875 32.685799 l
106.10875 25.444201 l
97.074753 25.444201 l
h
f
Q
q
109.15975 29.799801 m
109.09075 29.659401 108.95575 29.576401 108.75475 29.5509 c
107.35375 29.3785 l
106.86175 29.3179 106.46475 29.1567 106.16275 28.8951 c
105.85975 28.6334 105.70875 28.264799 105.70875 27.789301 c
105.70875 27.355301 105.86175 26.993099 106.16675 26.7027 c
106.47675 26.415501 106.87375 26.2719 107.35875 26.2719 c
107.76175 26.2719 108.13075 26.3564 108.46675 26.5256 c
108.80175 26.6947 109.05875 26.894199 109.23775 27.123899 c
109.26675 26.919701 109.31775 26.7617 109.38875 26.65 c
109.52575 26.4394 109.74475 26.334101 110.04775 26.334101 c
110.17175 26.334101 110.26875 26.3389 110.34075 26.348499 c
110.41275 26.358 110.51675 26.382 110.65275 26.4203 c
110.65275 27.0569 l
110.59775 27.0473 110.54575 27.0394 110.49675 27.033001 c
110.44775 27.0298 110.40375 27.0282 110.36475 27.0282 c
110.24475 27.0282 110.16475 27.0553 110.12575 27.1096 c
110.08975 27.163799 110.07275 27.2356 110.07275 27.325001 c
110.07275 30.2785 l
110.07275 30.7635 109.88175 31.120899 109.50075 31.3507 c
109.11675 31.5805 108.61775 31.6954 108.00275 31.6954 c
107.47175 31.6954 107.00475 31.5709 106.60175 31.322001 c
106.20175 31.0763 105.99275 30.637501 105.97675 30.0056 c
106.79675 30.0056 l
106.82975 30.2705 106.89975 30.4699 107.00675 30.604 c
107.19875 30.8465 107.52375 30.9678 107.98275 30.9678 c
108.37975 30.9678 108.68475 30.9007 108.89575 30.766701 c
109.11075 30.6359 109.21775 30.4237 109.21775 30.1301 c
109.21775 29.9865 109.19875 29.8764 109.15975 29.799801 c
h
106.90475 27.2197 m
106.71875 27.3633 106.62575 27.5595 106.62575 27.808399 c
106.62575 28.1371 106.76075 28.376499 107.03075 28.526501 c
107.19075 28.615801 107.42975 28.6812 107.74875 28.7227 c
108.28075 28.7897 l
108.44375 28.808901 108.60975 28.840799 108.77875 28.8855 c
108.94775 28.930201 109.08575 28.986 109.19375 29.052999 c
109.19375 28.3589 l
109.19375 27.829201 108.94975 27.4478 108.46175 27.214899 c
108.17175 27.074499 107.87275 27.0042 107.56375 27.0042 c
107.30975 27.0042 107.08975 27.076099 106.90475 27.2197 c
h
W*
0 0 132 43 rc
104.70875 32.6954 m
111.65275 32.6954 l
111.65275 25.2719 l
104.70875 25.2719 l
h
f
Q
q
112.00975 29.900299 m
111.96675 29.7216 111.94575 29.464701 111.94575 29.129601 c
111.94575 26.444201 l
111.06775 26.444201 l
111.06775 31.5709 l
111.90175 31.5709 l
111.90175 30.8433 l
112.14975 31.143299 112.41175 31.3587 112.68775 31.4895 c
112.96475 31.620399 113.27175 31.685801 113.61075 31.685801 c
114.35275 31.685801 114.85375 31.4321 115.11375 30.9247 c
115.25675 30.646999 115.32875 30.249701 115.32875 29.7328 c
115.32875 26.444201 l
114.43575 26.444201 l
114.43575 29.675301 l
114.43575 29.988001 114.38775 30.2402 114.29375 30.431601 c
114.13775 30.750799 113.85475 30.910299 113.44475 30.910299 c
113.23575 30.910299 113.06575 30.889601 112.93175 30.848101 c
112.69075 30.777901 112.47975 30.637501 112.29775 30.4268 c
112.15075 30.2577 112.05475 30.082199 112.00975 29.900299 c
h
W
0 0 132 43 rc
110.06775 32.685799 m
116.32875 32.685799 l
116.32875 25.444201 l
110.06775 25.444201 l
h
f
Q
q
119.99975 31.058701 m
119.53375 31.4991 118.96475 31.719299 118.29075 31.719299 c
117.53875 31.719299 116.94075 31.464001 116.49475 30.9534 c
116.04875 30.442801 115.82575 29.756701 115.82575 28.8951 c
115.82575 28.0909 116.03775 27.4494 116.46075 26.970699 c
116.88375 26.495199 117.45475 26.2575 118.17375 26.2575 c
119.03575 26.2575 119.67275 26.527201 120.08275 27.0665 c
120.49275 27.605801 120.69775 28.2887 120.69775 29.1152 c
120.69775 29.970501 120.46475 30.618299 119.99975 31.058701 c
h
119.45275 27.6457 m
119.23775 27.214899 118.83875 26.9995 118.25675 26.9995 c
117.72675 26.9995 117.33875 27.1814 117.09475 27.5452 c
116.85075 27.909 116.72875 28.363701 116.72875 28.909401 c
116.72875 29.477501 116.85075 29.9625 117.09475 30.364599 c
117.33875 30.766701 117.72975 30.9678 118.26675 30.9678 c
118.87175 30.9678 119.29775 30.7316 119.54575 30.2593 c
119.70175 29.959299 119.77975 29.57 119.77975 29.091299 c
119.77975 28.5616 119.67075 28.0797 119.45275 27.6457 c
h
W*
0 0 132 43 rc
114.82575 32.719299 m
121.69775 32.719299 l
121.69775 25.2575 l
114.82575 25.2575 l
h
f
Q
q
111.74075 10.2245 m
116.33975 23.298201 l
119.38275 23.298201 l
123.94775 10.2245 l
121.02675 10.2245 l
120.19675 12.912 l
115.44775 12.912 l
114.55575 10.2245 l
111.74075 10.2245 l
h
117.83575 20.3092 m
116.17375 15.1649 l
119.44475 15.1649 l
117.83575 20.3092 l
h
W*
0 0 132 43 rc
110.74075 24.298201 m
124.94775 24.298201 l
124.94775 9.2244997 l
110.74075 9.2244997 l
h
f
Q
q
100.68975 17.7561 m
99.676453 17.7561 98.996147 17.4216 98.648552 16.752399 c
98.454247 16.375999 98.357048 15.7965 98.357048 15.0138 c
98.357048 10.3447 l
95.821251 10.3447 l
95.821251 20.1131 l
98.224449 20.1131 l
98.224449 18.4104 l
98.613251 19.0616 98.95195 19.506701 99.240547 19.745701 c
99.711746 20.146 100.32475 20.3461 101.07875 20.3461 c
101.12575 20.3461 101.16375 20.3431 101.19275 20.3372 c
101.22875 20.3372 101.30175 20.3342 101.41375 20.328199 c
101.41375 17.7113 l
101.25475 17.7292 101.11375 17.741199 100.98975 17.7472 c
100.86675 17.753099 100.76575 17.7561 100.68975 17.7561 c
h
W
0 0 132 43 rc
94.821251 21.3461 m
102.41375 21.3461 l
102.41375 9.3446999 l
94.821251 9.3446999 l
h
f
Q
q
93.721947 18.8764 m
94.534851 17.8428 94.941254 16.621 94.941254 15.211 c
94.941254 13.7771 94.534851 12.5493 93.721947 11.5276 c
92.90905 10.5119 91.675049 10.0041 90.019852 10.0041 c
88.364754 10.0041 87.130653 10.5119 86.317848 11.5276 c
85.504951 12.5493 85.098549 13.7771 85.098549 15.211 c
85.098549 16.621 85.504951 17.8428 86.317848 18.8764 c
87.130653 19.91 88.364754 20.4268 90.019852 20.4268 c
91.675049 20.4268 92.90905 19.91 93.721947 18.8764 c
h
90.011047 18.267 m
89.27475 18.267 88.706352 18.001101 88.305847 17.4694 c
87.911148 16.9436 87.713852 16.1908 87.713852 15.211 c
87.713852 14.2311 87.911148 13.4753 88.305847 12.9436 c
88.706352 12.4119 89.27475 12.146 90.011047 12.146 c
90.747353 12.146 91.312851 12.4119 91.707451 12.9436 c
92.10215 13.4753 92.299454 14.2311 92.299454 15.211 c
92.299454 16.1908 92.10215 16.9436 91.707451 17.4694 c
91.312851 18.001101 90.747353 18.267 90.011047 18.267 c
h
W*
0 0 132 43 rc
84.098549 21.4268 m
95.941254 21.4268 l
95.941254 9.0040998 l
84.098549 9.0040998 l
h
f
Q
q
83.600052 19.0646 m
84.377548 18.2222 84.76635 16.985399 84.76635 15.3543 c
84.76635 13.6337 84.383453 12.3222 83.617752 11.4201 c
82.857849 10.5179 81.877151 10.0668 80.675552 10.0668 c
79.909752 10.0668 79.273651 10.261 78.767052 10.6494 c
78.49015 10.8644 78.219254 11.1781 77.954147 11.5904 c
77.954147 6.5 l
75.462547 6.5 l
75.462547 20.1131 l
77.874649 20.1131 l
77.874649 18.6702 l
78.145653 19.0944 78.43425 19.429001 78.740547 19.674 c
79.300148 20.1101 79.965752 20.328199 80.73735 20.328199 c
81.86235 20.328199 82.81665 19.907 83.600052 19.0646 c
h
82.168648 15.2289 m
82.168648 15.9817 81.997849 16.6478 81.65625 17.2274 c
81.32045 17.8069 80.772652 18.096701 80.012848 18.096701 c
79.099854 18.096701 78.472549 17.6576 78.130852 16.779301 c
77.954147 16.313299 77.865852 15.7218 77.865852 15.0048 c
77.865852 13.8697 78.163254 13.0721 78.758247 12.612 c
79.111649 12.3432 79.529846 12.2087 80.012848 12.2087 c
80.713753 12.2087 81.246849 12.4836 81.612053 13.0332 c
81.983147 13.5829 82.168648 14.3148 82.168648 15.2289 c
h
W*
0 0 132 43 rc
74.462547 21.328199 m
85.76635 21.328199 l
85.76635 5.5 l
74.462547 5.5 l
h
f
Q
q
65.777153 18.2222 m
64.92305 18.2222 64.336952 17.8547 64.018852 17.119801 c
63.853951 16.731501 63.771549 16.2356 63.771549 15.6322 c
63.771549 10.3447 l
61.262249 10.3447 l
61.262249 20.0952 l
63.691952 20.0952 l
63.691952 18.6702 l
64.015953 19.1721 64.32225 19.5336 64.610847 19.754601 c
65.12925 20.149 65.78595 20.3461 66.581146 20.3461 c
67.576653 20.3461 68.389549 20.080299 69.019753 19.5485 c
69.655952 19.022699 69.973953 18.147499 69.973953 16.922701 c
69.973953 10.3447 l
67.394051 10.3447 l
67.394051 16.2864 l
67.394051 16.8002 67.326347 17.1945 67.190849 17.4694 c
66.943451 17.971201 66.472252 18.2222 65.777153 18.2222 c
h
W
0 0 132 43 rc
60.262249 21.3461 m
70.973953 21.3461 l
70.973953 9.3446999 l
60.262249 9.3446999 l
h
f
Q
q
59.118752 18.8764 m
59.931648 17.8428 60.338051 16.621 60.338051 15.211 c
60.338051 13.7771 59.931648 12.5493 59.118752 11.5276 c
58.305851 10.5119 57.07185 10.0041 55.416649 10.0041 c
53.761551 10.0041 52.52755 10.5119 51.714649 11.5276 c
50.901749 12.5493 50.49535 13.7771 50.49535 15.211 c
50.49535 16.621 50.901749 17.8428 51.714649 18.8764 c
52.52755 19.91 53.761551 20.4268 55.416649 20.4268 c
57.07185 20.4268 58.305851 19.91 59.118752 18.8764 c
h
55.407848 18.267 m
54.671551 18.267 54.103149 18.001101 53.702648 17.4694 c
53.307949 16.9436 53.110649 16.1908 53.110649 15.211 c
53.110649 14.2311 53.307949 13.4753 53.702648 12.9436 c
54.103149 12.4119 54.671551 12.146 55.407848 12.146 c
56.14415 12.146 56.709648 12.4119 57.104252 12.9436 c
57.498951 13.4753 57.696251 14.2311 57.696251 15.211 c
57.696251 16.1908 57.498951 16.9436 57.104252 17.4694 c
56.709648 18.001101 56.14415 18.267 55.407848 18.267 c
h
W*
0 0 132 43 rc
49.49535 21.4268 m
61.338051 21.4268 l
61.338051 9.0040998 l
49.49535 9.0040998 l
h
f
Q
q
45.46265 18.2222 m
44.608551 18.2222 44.022449 17.8547 43.704449 17.119801 c
43.539452 16.731501 43.45705 16.2356 43.45705 15.6322 c
43.45705 10.3447 l
40.94775 10.3447 l
40.94775 20.0952 l
43.377548 20.0952 l
43.377548 18.6702 l
43.70145 19.1721 44.007751 19.5336 44.296349 19.754601 c
44.814751 20.149 45.47155 20.3461 46.266651 20.3461 c
47.26215 20.3461 48.07505 20.080299 48.70525 19.5485 c
49.34145 19.022699 49.65955 18.147499 49.65955 16.922701 c
49.65955 10.3447 l
47.079552 10.3447 l
47.079552 16.2864 l
47.079552 16.8002 47.011848 17.1945 46.87635 17.4694 c
46.628948 17.971201 46.157749 18.2222 45.46265 18.2222 c
h
W
0 0 132 43 rc
39.94775 21.3461 m
50.65955 21.3461 l
50.65955 9.3446999 l
39.94775 9.3446999 l
h
f
Q
q
46.13435 26.444201 0.8933 5.1027999 rc
45.13435 32.547001 m
48.027649 32.547001 l
48.027649 25.444201 l
45.13435 25.444201 l
h
f
Q
q
46.13435 32.4995 0.8933 0.97657001 rc
45.13435 34.47607 m
48.027649 34.47607 l
48.027649 31.4995 l
45.13435 31.4995 l
h
f
Q
q
105.54575 23.298201 m
111.21175 23.298201 l
111.21175 21.0744 l
109.80875 21.0744 l
109.80875 12.4453 l
111.21175 12.4453 l
111.21175 10.2215 l
105.54575 10.2215 l
105.54575 12.4453 l
107.13375 12.4453 l
107.13375 21.0744 l
105.54575 21.0744 l
105.54575 23.298201 l
h
W
0 0 132 43 rc
104.54575 24.298201 m
112.21175 24.298201 l
112.21175 9.2215004 l
104.54575 9.2215004 l
h
f
ep
end
%%Trailer
%%EOF
