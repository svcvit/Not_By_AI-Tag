%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.2.1 (Build 23C71) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.49975 42 l
124.50775 42 130.99976 35.508129 130.99976 27.5 c
130.99976 1 l
15.49995 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
131.99976 43 l
131.99976 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.49975 0 l
123.50775 0 129.99976 6.4918699 129.99976 14.5 c
129.99976 41 l
14.49995 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
q
17.46055 18.342501 m
20.926649 15.5357 25.883551 15.5357 29.349649 18.342501 c
28.00955 19.9974 l
25.32485 17.8234 21.48535 17.8234 18.80065 19.9974 c
17.46055 18.342501 l
h
W
0 0 132 43 rc
16.46055 20.9974 m
30.349649 20.9974 l
30.349649 14.5357 l
16.46055 14.5357 l
h
f
Q
q
18.904051 21.986601 2.1294999 2.8769 rc
17.904051 25.863501 m
22.03355 25.863501 l
22.03355 20.986601 l
17.904051 20.986601 l
h
f
Q
q
25.512051 21.986601 2.1294999 2.8769 rc
24.512051 25.863501 m
28.64155 25.863501 l
28.64155 20.986601 l
24.512051 20.986601 l
h
f
Q
q
34.49995 21 m
34.49995 14.6487 29.35125 9.5 22.99995 9.5 c
16.64875 9.5 11.49995 14.6487 11.49995 21 c
11.49995 27.351299 16.64875 32.5 22.99995 32.5 c
29.35125 32.5 34.49995 27.351299 34.49995 21 c
h
32.370449 21 m
32.370449 15.8248 28.17515 11.6295 22.99995 11.6295 c
17.82485 11.6295 13.62955 15.8248 13.62955 21 c
13.62955 26.1752 17.82485 30.370501 22.99995 30.370501 c
28.17515 30.370501 32.370449 26.1752 32.370449 21 c
h
W*
0 0 132 43 rc
10.49995 33.5 m
35.49995 33.5 l
35.49995 8.5 l
10.49995 8.5 l
h
f
Q
q
88.918648 30.556101 m
88.619751 30.3104 88.470352 29.8461 88.470352 29.163099 c
88.470352 26.444201 l
87.58345 26.444201 l
87.58345 33.5 l
88.470352 33.5 l
88.470352 30.876801 l
88.68055 31.1353 88.869453 31.3172 89.036949 31.422501 c
89.322746 31.604401 89.679153 31.6954 90.106148 31.6954 c
90.871452 31.6954 91.39045 31.435301 91.663048 30.9151 c
91.810951 30.6311 91.88485 30.237 91.88485 29.7328 c
91.88485 26.444201 l
90.973251 26.444201 l
90.973251 29.675301 l
90.973251 30.051901 90.924049 30.3279 90.825447 30.5035 c
90.664551 30.7843 90.36235 30.9247 89.918854 30.9247 c
89.551048 30.9247 89.217651 30.8018 88.918648 30.556101 c
h
W
0 0 132 43 rc
86.58345 34.5 m
92.88485 34.5 l
92.88485 25.444201 l
86.58345 25.444201 l
h
f
Q
q
123.94775 10.2245 m
119.39375 23.2983 l
116.35775 23.2983 l
111.76975 10.2245 l
114.57875 10.2245 l
115.46775 12.912 l
120.20475 12.912 l
121.03375 10.2245 l
123.94775 10.2245 l
h
117.84975 20.3092 m
119.45475 15.1649 l
116.19275 15.1649 l
117.84975 20.3092 l
h
W*
0 0 132 43 rc
110.76975 24.2983 m
124.94775 24.2983 l
124.94775 9.2244997 l
110.76975 9.2244997 l
h
f
Q
q
45.647449 18.222099 m
44.795448 18.222099 44.210651 17.8547 43.893349 17.119801 c
43.728851 16.731501 43.646549 16.2356 43.646549 15.6322 c
43.646549 10.3446 l
41.14315 10.3446 l
41.14315 20.0952 l
43.567249 20.0952 l
43.567249 18.6702 l
43.89045 19.1721 44.196049 19.5336 44.483952 19.754601 c
45.001049 20.148899 45.656349 20.3461 46.44965 20.3461 c
47.442749 20.3461 48.253651 20.0802 48.88245 19.5485 c
49.517151 19.022699 49.83445 18.147499 49.83445 16.922701 c
49.83445 10.3446 l
47.260551 10.3446 l
47.260551 16.2864 l
47.260551 16.8002 47.192951 17.1945 47.05785 17.469299 c
46.81105 17.971201 46.34095 18.222099 45.647449 18.222099 c
h
W
0 0 132 43 rc
40.14315 21.3461 m
50.83445 21.3461 l
50.83445 9.3445997 l
40.14315 9.3445997 l
h
f
Q
q
60.48785 15.2109 m
60.48785 16.620899 60.082352 17.8428 59.27145 18.8764 c
58.460449 19.91 57.229351 20.4268 55.578049 20.4268 c
53.926849 20.4268 52.695648 19.91 51.88475 18.8764 c
51.07375 17.8428 50.66835 16.620899 50.66835 15.2109 c
50.66835 13.777 51.07375 12.5493 51.88475 11.5276 c
52.695648 10.5119 53.926849 10.0041 55.578049 10.0041 c
57.229351 10.0041 58.460449 10.5119 59.27145 11.5276 c
60.082352 12.5493 60.48785 13.777 60.48785 15.2109 c
h
53.86805 17.469299 m
54.267651 18.001101 54.834751 18.266899 55.569248 18.266899 c
56.303848 18.266899 56.86795 18.001101 57.26165 17.469299 c
57.655449 16.9436 57.852249 16.1908 57.852249 15.2109 c
57.852249 14.2311 57.655449 13.4753 57.26165 12.9436 c
56.86795 12.4119 56.303848 12.146 55.569248 12.146 c
54.834751 12.146 54.267651 12.4119 53.86805 12.9436 c
53.47435 13.4753 53.277451 14.2311 53.277451 15.2109 c
53.277451 16.1908 53.47435 16.9436 53.86805 17.469299 c
h
W*
0 0 132 43 rc
49.66835 21.4268 m
61.48785 21.4268 l
61.48785 9.0040998 l
49.66835 9.0040998 l
h
f
Q
q
65.914146 18.222099 m
65.06205 18.222099 64.477348 17.8547 64.160049 17.119801 c
63.995449 16.731501 63.91325 16.2356 63.91325 15.6322 c
63.91325 10.3446 l
61.409851 10.3446 l
61.409851 20.0952 l
63.833851 20.0952 l
63.833851 18.6702 l
64.157051 19.1721 64.462646 19.5336 64.750648 19.754601 c
65.267754 20.148899 65.922951 20.3461 66.716248 20.3461 c
67.70945 20.3461 68.520348 20.0802 69.149147 19.5485 c
69.783752 19.022699 70.101151 18.147499 70.101151 16.922701 c
70.101151 10.3446 l
67.527252 10.3446 l
67.527252 16.2864 l
67.527252 16.8002 67.459648 17.1945 67.324448 17.469299 c
67.077652 17.971201 66.607552 18.222099 65.914146 18.222099 c
h
W
0 0 132 43 rc
60.409851 21.3461 m
71.101151 21.3461 l
71.101151 9.3445997 l
60.409851 9.3445997 l
h
f
Q
q
84.85865 15.3543 m
84.85865 16.985399 84.470749 18.222099 83.695053 19.0646 c
82.913551 19.907 81.961548 20.328199 80.839149 20.328199 c
80.069351 20.328199 79.405251 20.1101 78.847054 19.674 c
78.541451 19.429001 78.253448 19.0944 77.983147 18.6702 c
77.983147 20.1131 l
75.576752 20.1131 l
75.576752 6.5 l
78.062553 6.5 l
78.062553 11.5903 l
78.32695 11.1781 78.597252 10.8644 78.873451 10.6493 c
79.378853 10.261 80.013451 10.0668 80.777451 10.0668 c
81.97625 10.0668 82.954651 10.5179 83.712753 11.4201 c
84.476646 12.3222 84.85865 13.6337 84.85865 15.3543 c
h
81.755852 17.2274 m
82.096649 16.6478 82.267151 15.9817 82.267151 15.2289 c
82.267151 14.3148 82.081947 13.5829 81.711746 13.0332 c
81.34745 12.4835 80.815651 12.2087 80.116348 12.2087 c
79.634453 12.2087 79.217247 12.3431 78.864647 12.612 c
78.271149 13.072 77.97435 13.8697 77.97435 15.0048 c
77.97435 15.7218 78.062553 16.313299 78.238853 16.779301 c
78.579651 17.657499 79.205452 18.096701 80.116348 18.096701 c
80.874352 18.096701 81.420853 17.8069 81.755852 17.2274 c
h
W*
0 0 132 43 rc
74.576752 21.328199 m
85.85865 21.328199 l
85.85865 5.5 l
74.576752 5.5 l
h
f
Q
q
93.793152 18.8764 m
94.60405 17.8428 95.009552 16.620899 95.009552 15.2109 c
95.009552 13.777 94.60405 12.5493 93.793152 11.5276 c
92.982246 10.5119 91.751053 10.0041 90.099854 10.0041 c
88.448547 10.0041 87.217453 10.5119 86.406448 11.5276 c
85.595551 12.5493 85.190048 13.777 85.190048 15.2109 c
85.190048 16.620899 85.595551 17.8428 86.406448 18.8764 c
87.217453 19.91 88.448547 20.4268 90.099854 20.4268 c
91.751053 20.4268 92.982246 19.91 93.793152 18.8764 c
h
90.09095 18.266899 m
89.356453 18.266899 88.789352 18.001101 88.389748 17.469299 c
87.996048 16.9436 87.799149 16.1908 87.799149 15.2109 c
87.799149 14.2311 87.996048 13.4753 88.389748 12.9436 c
88.789352 12.4119 89.356453 12.146 90.09095 12.146 c
90.825546 12.146 91.389648 12.4119 91.783447 12.9436 c
92.177147 13.4753 92.373947 14.2311 92.373947 15.2109 c
92.373947 16.1908 92.177147 16.9436 91.783447 17.469299 c
91.389648 18.001101 90.825546 18.266899 90.09095 18.266899 c
h
W*
0 0 132 43 rc
84.190048 21.4268 m
96.009552 21.4268 l
96.009552 9.0040998 l
84.190048 9.0040998 l
h
f
Q
q
98.708252 16.752399 m
99.054947 17.421499 99.73365 17.7561 100.74475 17.7561 c
100.82075 17.7561 100.92075 17.753099 101.04375 17.7472 c
101.16775 17.741199 101.30875 17.7292 101.46675 17.7113 c
101.46675 20.328199 l
101.35575 20.3342 101.28175 20.337099 101.24675 20.337099 c
101.21775 20.3431 101.17875 20.3461 101.13175 20.3461 c
100.37975 20.3461 99.768951 20.146 99.298752 19.745701 c
99.010849 19.506701 98.672951 19.0616 98.285049 18.410299 c
98.285049 20.1131 l
95.88755 20.1131 l
95.88755 10.3446 l
98.417351 10.3446 l
98.417351 15.0138 l
98.417351 15.7965 98.514252 16.375999 98.708252 16.752399 c
h
W
0 0 132 43 rc
94.88755 21.3461 m
102.46675 21.3461 l
102.46675 9.3445997 l
94.88755 9.3445997 l
h
f
Q
q
93.912651 27.5261 m
93.827248 27.691999 93.784554 27.9058 93.784554 28.1675 c
93.784554 31.5709 l
92.877953 31.5709 l
92.877953 28.0861 l
92.877953 27.648899 92.951851 27.2995 93.099648 27.0378 c
93.372253 26.5495 93.884651 26.305401 94.636848 26.305401 c
95.119751 26.305401 95.53035 26.4394 95.868652 26.7075 c
96.039452 26.841499 96.18235 27.005899 96.297348 27.2005 c
96.287453 26.444201 l
97.125053 26.444201 l
97.125053 31.5709 l
96.238251 31.5709 l
96.238251 29.052999 l
96.238251 28.552 96.177452 28.1579 96.055946 27.870701 c
95.83255 27.3346 95.412048 27.0665 94.794548 27.0665 c
94.36425 27.0665 94.070251 27.2197 93.912651 27.5261 c
h
W
0 0 132 43 rc
91.877953 32.5709 m
98.125053 32.5709 l
98.125053 25.305401 l
91.877953 25.305401 l
h
f
Q
q
99.660347 31.393801 m
99.489548 31.2789 99.299049 31.0954 99.088852 30.8433 c
99.088852 31.5709 l
98.211853 31.5709 l
98.211853 26.444201 l
99.098648 26.444201 l
99.098648 29.163099 l
99.098648 29.8237 99.235046 30.2801 99.507652 30.5322 c
99.783546 30.7843 100.08875 30.910299 100.42375 30.910299 c
100.79175 30.910299 101.04375 30.790701 101.17775 30.5513 c
101.26375 30.3918 101.30575 30.1381 101.30575 29.790199 c
101.30575 26.444201 l
102.20775 26.444201 l
102.20775 29.426399 l
102.20775 29.9562 102.33275 30.334299 102.58175 30.5609 c
102.83475 30.7875 103.13575 30.900801 103.48375 30.900801 c
103.73675 30.900801 103.94975 30.836901 104.12475 30.709299 c
104.30175 30.5816 104.39075 30.347099 104.39075 30.0056 c
104.39075 26.444201 l
105.31175 26.444201 l
105.31175 29.857201 l
105.31175 30.3104 105.24275 30.671 105.10475 30.9391 c
104.84875 31.436899 104.36575 31.685801 103.65675 31.685801 c
103.32475 31.685801 103.02575 31.618799 102.75975 31.4848 c
102.49375 31.353901 102.26175 31.1513 102.06475 30.876801 c
101.94675 31.100201 101.81475 31.2693 101.67075 31.384199 c
101.41475 31.5853 101.07575 31.685801 100.65575 31.685801 c
100.28475 31.685801 99.952751 31.588499 99.660347 31.393801 c
h
W
0 0 132 43 rc
97.211853 32.685799 m
106.31175 32.685799 l
106.31175 25.444201 l
97.211853 25.444201 l
h
f
Q
q
109.55175 29.799801 m
109.48275 29.659401 109.34675 29.576401 109.14275 29.5509 c
107.72875 29.378599 l
107.23275 29.3179 106.83175 29.156799 106.52675 28.8951 c
106.22075 28.6334 106.06875 28.264799 106.06875 27.789301 c
106.06875 27.355301 106.22275 26.993099 106.53175 26.7027 c
106.84375 26.415501 107.24475 26.2719 107.73375 26.2719 c
108.14075 26.2719 108.51375 26.356501 108.85175 26.5256 c
109.19075 26.6947 109.44975 26.894199 109.63075 27.124001 c
109.65975 26.919701 109.71075 26.761801 109.78375 26.650101 c
109.92175 26.4394 110.14275 26.334101 110.44875 26.334101 c
110.57375 26.334101 110.67175 26.3389 110.74375 26.348499 c
110.81675 26.358101 110.92175 26.382 111.05975 26.4203 c
111.05975 27.0569 l
111.00375 27.0474 110.95075 27.0394 110.90175 27.033001 c
110.85275 27.0298 110.80875 27.0282 110.76875 27.0282 c
110.64775 27.0282 110.56675 27.0553 110.52775 27.1096 c
110.49175 27.1639 110.47275 27.235701 110.47275 27.325001 c
110.47275 30.2785 l
110.47275 30.7635 110.28075 31.121 109.89675 31.3507 c
109.50875 31.5805 109.00475 31.6954 108.38375 31.6954 c
107.84875 31.6954 107.37775 31.5709 106.96975 31.322001 c
106.56575 31.0763 106.35575 30.637501 106.33975 30.0056 c
107.16675 30.0056 l
107.19975 30.2705 107.27075 30.4699 107.37875 30.604 c
107.57275 30.8465 107.90175 30.9678 108.36475 30.9678 c
108.76475 30.9678 109.07275 30.900801 109.28575 30.766701 c
109.50275 30.6359 109.61075 30.4237 109.61075 30.1301 c
109.61075 29.9865 109.59175 29.8764 109.55175 29.799801 c
h
107.27575 27.2197 m
107.08875 27.3633 106.99475 27.559601 106.99475 27.8085 c
106.99475 28.137199 107.13075 28.376499 107.40375 28.526501 c
107.56475 28.6159 107.80575 28.681299 108.12775 28.722799 c
108.66475 28.789801 l
108.82875 28.808901 108.99675 28.840799 109.16775 28.8855 c
109.33875 28.930201 109.47775 28.986 109.58675 29.052999 c
109.58675 28.358999 l
109.58675 27.829201 109.33975 27.447901 108.84775 27.214899 c
108.55475 27.074499 108.25275 27.004299 107.94075 27.004299 c
107.68475 27.004299 107.46275 27.076099 107.27575 27.2197 c
h
W*
0 0 132 43 rc
105.06875 32.6954 m
112.05975 32.6954 l
112.05975 25.2719 l
105.06875 25.2719 l
h
f
Q
q
113.26475 31.4895 m
112.98575 31.3587 112.72075 31.143299 112.47175 30.8433 c
112.47175 31.5709 l
111.62875 31.5709 l
111.62875 26.444201 l
112.51575 26.444201 l
112.51575 29.129601 l
112.51575 29.464701 112.53675 29.7216 112.57975 29.900299 c
112.62575 30.082199 112.72275 30.2577 112.87075 30.426901 c
113.05475 30.637501 113.26775 30.777901 113.51075 30.848101 c
113.64575 30.889601 113.81775 30.910299 114.02875 30.910299 c
114.44275 30.910299 114.72775 30.750799 114.88575 30.4317 c
114.98075 30.2402 115.02875 29.9881 115.02875 29.675301 c
115.02875 26.444201 l
115.93075 26.444201 l
115.93075 29.7328 l
115.93075 30.2498 115.85775 30.6471 115.71375 30.9247 c
115.45075 31.4321 114.94475 31.685801 114.19575 31.685801 c
113.85475 31.685801 113.54375 31.620399 113.26475 31.4895 c
h
W
0 0 132 43 rc
110.62875 32.685799 m
116.93075 32.685799 l
116.93075 25.444201 l
110.62875 25.444201 l
h
f
Q
q
120.79575 31.058701 m
120.32675 31.4991 119.75175 31.719299 119.07175 31.719299 c
118.31275 31.719299 117.70875 31.464001 117.25875 30.9534 c
116.80875 30.442801 116.58375 29.756701 116.58375 28.8951 c
116.58375 28.0909 116.79675 27.449499 117.22375 26.9708 c
117.65075 26.4953 118.22775 26.2575 118.95375 26.2575 c
119.82375 26.2575 120.46575 26.527201 120.87975 27.0665 c
121.29375 27.605801 121.50075 28.288799 121.50075 29.115299 c
121.50075 29.970501 121.26575 30.618299 120.79575 31.058701 c
h
120.24475 27.6457 m
120.02775 27.214899 119.62475 26.9995 119.03675 26.9995 c
118.50175 26.9995 118.11075 27.1814 117.86475 27.5452 c
117.61775 27.909 117.49475 28.363701 117.49475 28.909401 c
117.49475 29.477501 117.61775 29.9625 117.86475 30.364599 c
118.11075 30.766701 118.50475 30.9678 119.04675 30.9678 c
119.65775 30.9678 120.08775 30.7316 120.33775 30.2593 c
120.49575 29.9594 120.57475 29.57 120.57475 29.091299 c
120.57475 28.5616 120.46475 28.0797 120.24475 27.6457 c
h
W*
0 0 132 43 rc
115.58375 32.719299 m
122.50075 32.719299 l
122.50075 25.2575 l
115.58375 25.2575 l
h
f
Q
q
54.783649 31.298 m
54.412449 31.5788 53.929649 31.7192 53.335049 31.7192 c
52.638748 31.7192 52.065552 31.4687 51.615551 30.967699 c
51.16555 30.4667 50.940552 29.766199 50.940552 28.866301 c
50.940552 28.132299 51.145851 27.5196 51.55645 27.028099 c
51.967049 26.5399 52.517151 26.295799 53.206951 26.295799 c
53.821251 26.295799 54.325451 26.452101 54.71965 26.7649 c
55.11375 27.080799 55.360149 27.5786 55.458649 28.2584 c
54.596451 28.2584 l
54.514351 27.878599 54.364849 27.5786 54.148048 27.3584 c
53.934551 27.141399 53.643848 27.0329 53.275951 27.0329 c
52.796349 27.0329 52.44495 27.208401 52.22155 27.5595 c
51.998249 27.9105 51.886551 28.342899 51.886551 28.856701 c
51.886551 29.3673 51.965351 29.796499 52.123051 30.1444 c
52.366051 30.6805 52.770149 30.9485 53.335049 30.9485 c
53.748951 30.9485 54.049549 30.843201 54.236752 30.632601 c
54.42395 30.4252 54.54385 30.1635 54.596451 29.847601 c
55.458649 29.847601 l
55.383148 30.533701 55.15815 31.0172 54.783649 31.298 c
h
W
0 0 132 43 rc
49.940552 32.7192 m
56.458649 32.7192 l
56.458649 25.295799 l
49.940552 25.295799 l
h
f
Q
q
47.30645 27.391899 m
47.184952 27.545099 47.11105 27.765301 47.084751 28.0525 c
46.232349 28.0525 l
46.255348 27.541901 46.429451 27.1127 46.75465 26.7649 c
47.083149 26.4202 47.639851 26.2479 48.42495 26.2479 c
49.154148 26.2479 49.696152 26.413799 50.05085 26.745701 c
50.408951 27.0776 50.587952 27.471701 50.587952 27.928101 c
50.587952 28.4004 50.415451 28.746599 50.070549 28.966801 c
49.853748 29.107201 49.42675 29.252399 48.789551 29.402399 c
48.203251 29.541201 l
47.947048 29.6019 47.75325 29.6721 47.621849 29.751801 c
47.395149 29.8859 47.281849 30.0646 47.281849 30.288 c
47.281849 30.492201 47.367249 30.6565 47.538052 30.781 c
47.712151 30.9055 47.966751 30.967699 48.30175 30.967699 c
48.804352 30.967699 49.157452 30.854401 49.36105 30.6278 c
49.48595 30.4683 49.556549 30.291201 49.572948 30.0965 c
50.410549 30.0965 l
50.417149 30.4284 50.310349 30.7379 50.090248 31.025101 c
49.73885 31.4783 49.165649 31.704901 48.37075 31.704901 c
47.76305 31.704901 47.278549 31.554899 46.917252 31.2549 c
46.55925 30.954901 46.38015 30.562401 46.38015 30.077299 c
46.38015 29.665701 46.570648 29.343399 46.951752 29.110399 c
47.165249 28.9764 47.496948 28.855101 47.947048 28.746599 c
48.65155 28.574301 l
49.02935 28.481701 49.282249 28.4004 49.410351 28.3302 c
49.610748 28.2153 49.710949 28.047701 49.710949 27.827499 c
49.710949 27.5371 49.586048 27.321699 49.336449 27.181299 c
49.086849 27.0441 48.797749 26.9755 48.46925 26.9755 c
47.91745 26.9755 47.52985 27.1143 47.30645 27.391899 c
h
W
0 0 132 43 rc
45.232349 32.704899 m
51.587952 32.704899 l
51.587952 25.2479 l
45.232349 25.2479 l
h
f
Q
q
43.440849 31.685699 m
43.81535 31.685699 44.178249 31.5996 44.529751 31.4272 c
44.881248 31.258101 45.148949 31.037901 45.332851 30.7666 c
45.51025 30.5082 45.628551 30.2066 45.687649 29.8619 c
45.74015 29.625799 45.766449 29.249201 45.766449 28.7323 c
41.898651 28.7323 l
41.91515 28.212099 42.04155 27.794001 42.278049 27.4781 c
42.514549 27.1654 42.880852 27.009001 43.37685 27.009001 c
43.839951 27.009001 44.20945 27.1574 44.485451 27.454201 c
44.643051 27.626499 44.754749 27.825899 44.82045 28.0525 c
45.692551 28.0525 l
45.669552 27.864201 45.59235 27.653601 45.460949 27.4207 c
45.332851 27.190901 45.188351 27.0026 45.027351 26.855801 c
44.758049 26.6005 44.424648 26.4282 44.027149 26.3388 c
43.813648 26.2878 43.57225 26.2623 43.302952 26.2623 c
42.64595 26.2623 42.089149 26.493601 41.632648 26.956301 c
41.176048 27.4223 40.94775 28.073299 40.94775 28.909401 c
40.94775 29.7327 41.17765 30.4013 41.63755 30.915001 c
42.09745 31.428801 42.698551 31.685699 43.440849 31.685699 c
h
44.85495 29.4168 m
44.818851 29.7901 44.73505 30.088499 44.603649 30.311899 c
44.36055 30.726801 43.954948 30.9342 43.38665 30.9342 c
42.979351 30.9342 42.637749 30.7906 42.361851 30.503401 c
42.085949 30.2194 41.939751 29.857201 41.923351 29.4168 c
44.85495 29.4168 l
h
W*
0 0 132 43 rc
39.94775 32.685699 m
46.766449 32.685699 l
46.766449 25.2623 l
39.94775 25.2623 l
h
f
Q
q
57.417549 31.3123 m
57.148151 31.066601 56.978951 30.857599 56.910049 30.685301 c
56.910049 31.570801 l
56.067451 31.570801 l
56.067451 26.444201 l
56.95435 26.444201 l
56.95435 29.392799 l
56.95435 29.756599 57.074249 30.077299 57.314049 30.355 c
57.553848 30.635799 57.897049 30.776199 58.34375 30.776199 c
58.396351 30.776199 58.443951 30.774599 58.486649 30.7714 c
58.53265 30.7682 58.581951 30.7619 58.634449 30.7523 c
58.634449 31.6618 l
58.539249 31.6714 58.471951 31.6777 58.432449 31.680901 c
58.393051 31.684099 58.36515 31.685699 58.348751 31.685699 c
57.99725 31.685699 57.686852 31.5613 57.417549 31.3123 c
h
W
0 0 132 43 rc
55.067451 32.685699 m
59.634449 32.685699 l
59.634449 25.444201 l
55.067451 25.444201 l
h
f
Q
q
61.44355 26.6691 m
61.29575 26.8766 61.221851 27.1446 61.221851 27.473301 c
61.221851 30.867201 l
60.507351 30.867201 l
60.507351 31.570801 l
61.221851 31.570801 l
61.221851 33.00209 l
62.118549 33.00209 l
62.118549 31.570801 l
62.961048 31.570801 l
62.961048 30.867201 l
62.118549 30.867201 l
62.118549 27.5212 l
62.118549 27.342501 62.18095 27.222799 62.305752 27.162201 c
62.374748 27.1271 62.48975 27.109501 62.65065 27.109501 c
62.788651 27.109501 l
62.837952 27.1127 62.895351 27.1175 62.961048 27.123899 c
62.961048 26.444201 l
62.859249 26.4154 62.752548 26.394699 62.64085 26.381901 c
62.532452 26.3692 62.41415 26.362801 62.286049 26.362801 c
61.87215 26.362801 61.591351 26.464899 61.44355 26.6691 c
h
W
0 0 132 43 rc
59.507351 34.00209 m
63.961048 34.00209 l
63.961048 25.362801 l
59.507351 25.362801 l
h
f
Q
q
65.67865 31.7192 m
66.35865 31.7192 66.933449 31.499001 67.403152 31.058599 c
67.872849 30.618299 68.10775 29.9704 68.10775 29.1152 c
68.10775 28.2887 67.900848 27.605801 67.486954 27.066401 c
67.073051 26.5271 66.430847 26.2575 65.560448 26.2575 c
64.834549 26.2575 64.258049 26.495199 63.831051 26.970699 c
63.404049 27.4494 63.190449 28.090799 63.190449 28.895 c
63.190449 29.756599 63.41555 30.442699 63.865551 30.9533 c
64.315552 31.4639 64.919952 31.7192 65.67865 31.7192 c
h
65.64415 26.999399 m
66.232147 26.999399 66.634552 27.2148 66.851349 27.645599 c
67.071449 28.079599 67.18145 28.561501 67.18145 29.091299 c
67.18145 29.569901 67.102654 29.959299 66.944946 30.259199 c
66.695351 30.731501 66.265053 30.967699 65.654053 30.967699 c
65.112053 30.967699 64.71785 30.7666 64.47155 30.364599 c
64.225151 29.9625 64.102051 29.4774 64.102051 28.909401 c
64.102051 28.363701 64.225151 27.908899 64.47155 27.545099 c
64.71785 27.181299 65.108749 26.999399 65.64415 26.999399 c
h
W*
0 0 132 43 rc
62.190449 32.7192 m
69.10775 32.7192 l
69.10775 25.2575 l
62.190449 25.2575 l
h
f
Q
q
78.873253 31.7192 m
79.553146 31.7192 80.127953 31.499001 80.597748 31.058599 c
81.067451 30.618299 81.302254 29.9704 81.302254 29.1152 c
81.302254 28.2887 81.095352 27.605801 80.68145 27.066401 c
80.267548 26.5271 79.62545 26.2575 78.754951 26.2575 c
78.029053 26.2575 77.452553 26.495199 77.025551 26.970699 c
76.598549 27.4494 76.385048 28.090799 76.385048 28.895 c
76.385048 29.756599 76.610046 30.442699 77.060051 30.9533 c
77.510048 31.4639 78.114449 31.7192 78.873253 31.7192 c
h
78.838753 26.999399 m
79.426651 26.999399 79.829048 27.2148 80.045853 27.645599 c
80.265953 28.0797 80.375954 28.561501 80.375954 29.091299 c
80.375954 29.569901 80.29715 29.959299 80.13945 30.259199 c
79.889847 30.731501 79.459549 30.967699 78.848549 30.967699 c
78.306648 30.967699 77.912453 30.766701 77.666054 30.364599 c
77.419746 29.9625 77.296547 29.4774 77.296547 28.909401 c
77.296547 28.363701 77.419746 27.908899 77.666054 27.545099 c
77.912453 27.181299 78.303352 26.999399 78.838753 26.999399 c
h
W*
0 0 132 43 rc
75.385048 32.7192 m
82.302254 32.7192 l
82.302254 25.2575 l
75.385048 25.2575 l
h
f
Q
q
72.805153 31.4081 m
72.594948 31.280399 72.401154 31.1001 72.223747 30.867201 c
72.223747 31.5469 l
71.361549 31.5469 l
71.361549 24.4002 l
72.248451 24.4002 l
72.248451 27.0186 l
72.442253 26.785601 72.61795 26.6213 72.77565 26.525499 c
73.044952 26.3564 73.378349 26.271799 73.775848 26.271799 c
74.281647 26.271799 74.725151 26.423401 75.106148 26.726601 c
75.707253 27.205299 76.007851 28.003099 76.007851 29.120001 c
76.007851 29.946501 75.799248 30.5816 75.38205 31.025101 c
74.964951 31.471901 74.457451 31.695299 73.85955 31.695299 c
73.455551 31.695299 73.10405 31.5996 72.805153 31.4081 c
h
74.687347 27.525999 m
74.414749 27.190901 74.071449 27.023399 73.657547 27.023399 c
73.046654 27.023399 72.626152 27.2882 72.396248 27.818001 c
72.27475 28.0956 72.213951 28.432301 72.213951 28.827999 c
72.213951 29.319401 72.27475 29.724701 72.396248 30.0438 c
72.622849 30.6406 73.04335 30.938999 73.657547 30.938999 c
74.268547 30.938999 74.68895 30.656601 74.918953 30.0917 c
75.040451 29.7981 75.10125 29.4471 75.10125 29.038601 c
75.10125 28.3685 74.963249 27.864201 74.687347 27.525999 c
h
W*
0 0 132 43 rc
70.361549 32.695301 m
77.007851 32.695301 l
77.007851 23.4002 l
70.361549 23.4002 l
h
f
Q
q
83.433548 31.3123 m
83.164253 31.066601 82.995049 30.857599 82.926048 30.685301 c
82.926048 31.570801 l
82.083549 31.570801 l
82.083549 26.444201 l
82.970451 26.444201 l
82.970451 29.392799 l
82.970451 29.756599 83.090248 30.0774 83.330048 30.355 c
83.569847 30.635799 83.913147 30.776199 84.359848 30.776199 c
84.412453 30.776199 84.460052 30.774599 84.502747 30.7714 c
84.548752 30.7682 84.597954 30.7619 84.650551 30.7523 c
84.650551 31.6618 l
84.555252 31.6714 84.487953 31.6777 84.448547 31.680901 c
84.409149 31.684099 84.381149 31.685699 84.364754 31.685699 c
84.013351 31.685699 83.70285 31.5613 83.433548 31.3123 c
h
W
0 0 132 43 rc
81.083549 32.685699 m
85.650551 32.685699 l
85.650551 25.444201 l
81.083549 25.444201 l
h
f
Q
q
105.58875 23.2983 m
111.24175 23.2983 l
111.24175 21.0744 l
109.84275 21.0744 l
109.84275 12.4453 l
111.24175 12.4453 l
111.24175 10.2215 l
105.58875 10.2215 l
105.58875 12.4453 l
107.17275 12.4453 l
107.17275 21.0744 l
105.58875 21.0744 l
105.58875 23.2983 l
h
W
0 0 132 43 rc
104.58875 24.2983 m
112.24175 24.2983 l
112.24175 9.2215004 l
104.58875 9.2215004 l
h
f
Q
q
59.100449 26.444201 0.9016 5.1027002 rc
58.100449 32.546902 m
61.002048 32.546902 l
61.002048 25.444201 l
58.100449 25.444201 l
h
f
Q
q
59.100449 32.4995 0.9016 0.97649002 rc
58.100449 34.47599 m
61.002048 34.47599 l
61.002048 31.4995 l
58.100449 31.4995 l
h
f
ep
end
%%Trailer
%%EOF
