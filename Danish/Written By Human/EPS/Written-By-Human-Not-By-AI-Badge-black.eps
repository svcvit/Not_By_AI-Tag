%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.2.1 (Build 23C71) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
1 1 1 sc
q
75.8321 32.263802 m
75.845001 32.62434 75.907898 32.888321 76.020897 33.055729 c
76.224297 33.35191 76.616501 33.5 77.197502 33.5 c
77.252403 33.5 77.308899 33.49839 77.366997 33.495171 c
77.425102 33.491951 77.491302 33.487122 77.565498 33.480679 c
77.565498 32.688721 l
77.475098 32.69516 77.408997 32.69838 77.366997 32.69838 c
77.3283 32.701599 77.2911 32.703209 77.2556 32.703209 c
76.990898 32.703209 76.832802 32.633991 76.781097 32.495602 c
76.7295 32.360298 76.703598 32.012699 76.703598 31.452499 c
77.565498 31.452499 l
77.565498 30.7668 l
76.694 30.7668 l
76.694 26.304701 l
75.8321 26.304701 l
75.8321 30.7668 l
75.110603 30.7668 l
75.110603 31.452499 l
75.8321 31.452499 l
75.8321 32.263802 l
h
W
0 0 132 43 rc
74.110603 34.5 m
78.565498 34.5 l
78.565498 25.304701 l
74.110603 25.304701 l
h
f
Q
q
115.522 31.476601 m
113.285 29.2794 l
113.285 33.39854 l
112.447 33.39854 l
112.447 26.304701 l
113.285 26.304701 l
113.285 28.246 l
114.016 28.912399 l
115.633 26.304701 l
116.747 26.304701 l
114.65 29.5401 l
116.636 31.476601 l
115.522 31.476601 l
h
W
0 0 132 43 rc
111.447 34.39854 m
117.747 34.39854 l
117.747 25.304701 l
111.447 25.304701 l
h
f
Q
q
119.088 31.5926 m
119.456 31.5926 119.813 31.505699 120.159 31.3318 c
120.504 31.1612 120.767 30.9391 120.948 30.6654 c
121.122 30.4046 121.238 30.100401 121.296 29.752701 c
121.348 29.5145 121.374 29.1346 121.374 28.6131 c
117.573 28.6131 l
117.589 28.088301 117.713 27.666599 117.946 27.3479 c
118.178 27.0324 118.538 26.874599 119.025 26.874599 c
119.481 26.874599 119.844 27.0243 120.115 27.3237 c
120.27 27.497601 120.38 27.698799 120.444 27.927401 c
121.301 27.927401 l
121.279 27.7374 121.203 27.5249 121.074 27.2899 c
120.948 27.0581 120.806 26.8682 120.648 26.7201 c
120.383 26.4625 120.055 26.2887 119.665 26.198601 c
119.455 26.1471 119.218 26.1213 118.953 26.1213 c
118.307 26.1213 117.76 26.3547 117.311 26.821501 c
116.863 27.2915 116.638 27.948299 116.638 28.7918 c
116.638 29.622299 116.864 30.296801 117.316 30.8151 c
117.768 31.333401 118.359 31.5926 119.088 31.5926 c
h
120.478 29.3036 m
120.443 29.6803 120.36 29.9813 120.231 30.206699 c
119.992 30.6252 119.594 30.8344 119.035 30.8344 c
118.635 30.8344 118.299 30.6896 118.028 30.399799 c
117.757 30.1133 117.613 29.7479 117.597 29.3036 c
120.478 29.3036 l
h
W*
0 0 132 43 rc
115.638 32.592602 m
122.374 32.592602 l
122.374 25.1213 l
115.638 25.1213 l
h
f
Q
q
123.202 30.250099 m
122.967 29.969999 122.849 29.6465 122.849 29.279499 c
122.849 26.3048 l
121.977 26.3048 l
121.977 31.4767 l
122.805 31.4767 l
122.805 30.5833 l
122.873 30.7572 123.039 30.968 123.304 31.2159 c
123.569 31.466999 123.874 31.5926 124.219 31.5926 c
124.235 31.5926 124.263 31.591 124.301 31.587799 c
124.34 31.584499 124.406 31.5781 124.5 31.568399 c
124.5 30.6509 l
124.448 30.660601 124.4 30.667 124.355 30.6702 c
124.313 30.6735 124.266 30.6751 124.214 30.6751 c
123.775 30.6751 123.438 30.5334 123.202 30.250099 c
h
W
0 0 132 43 rc
120.977 32.592602 m
125.5 32.592602 l
125.5 25.3048 l
120.977 25.3048 l
h
f
Q
q
108.522 27.927299 m
108.548 27.6376 108.621 27.415501 108.74 27.2609 c
108.96 26.9809 109.34 26.840799 109.883 26.840799 c
110.206 26.840799 110.49 26.91 110.735 27.0485 c
110.98 27.1901 111.103 27.4074 111.103 27.700399 c
111.103 27.922501 111.005 28.091499 110.808 28.207399 c
110.682 28.278299 110.433 28.360399 110.062 28.453699 c
109.37 28.6276 l
108.927 28.737 108.601 28.8594 108.391 28.9946 c
108.017 29.229601 107.83 29.554701 107.83 29.969999 c
107.83 30.4594 108.006 30.855301 108.357 31.158001 c
108.713 31.4606 109.189 31.6119 109.786 31.6119 c
110.567 31.6119 111.13 31.383301 111.476 30.926201 c
111.692 30.6364 111.797 30.3242 111.791 29.9893 c
110.967 29.9893 l
110.951 30.185699 110.882 30.364401 110.759 30.5254 c
110.559 30.753901 110.212 30.8682 109.718 30.8682 c
109.389 30.8682 109.139 30.805401 108.968 30.679899 c
108.8 30.5543 108.716 30.3885 108.716 30.182501 c
108.716 29.9571 108.827 29.776899 109.05 29.641701 c
109.179 29.561199 109.37 29.490299 109.621 29.429199 c
110.197 29.289101 l
110.824 29.1378 111.243 28.991301 111.456 28.849701 c
111.795 28.6276 111.965 28.278299 111.965 27.8018 c
111.965 27.3414 111.789 26.9438 111.437 26.608999 c
111.088 26.2742 110.556 26.1068 109.839 26.1068 c
109.068 26.1068 108.521 26.2806 108.198 26.6283 c
107.878 26.9792 107.707 27.4123 107.684 27.927299 c
108.522 27.927299 l
h
W
0 0 132 43 rc
106.684 32.6119 m
112.965 32.6119 l
112.965 25.1068 l
106.684 25.1068 l
h
f
Q
q
106.209 31.3318 m
105.864 31.505699 105.507 31.5926 105.139 31.5926 c
104.41 31.5926 103.819 31.333401 103.367 30.8151 c
102.915 30.296801 102.689 29.622299 102.689 28.7918 c
102.689 27.948299 102.914 27.2915 103.362 26.821501 c
103.811 26.3547 104.358 26.1213 105.004 26.1213 c
105.268 26.1213 105.506 26.1471 105.715 26.198601 c
106.106 26.2887 106.434 26.4625 106.698 26.7201 c
106.857 26.8682 106.999 27.0581 107.125 27.2899 c
107.254 27.5249 107.33 27.7374 107.352 27.927401 c
106.495 27.927401 l
106.431 27.698799 106.321 27.497601 106.166 27.3237 c
105.895 27.0243 105.531 26.874599 105.076 26.874599 c
104.589 26.874599 104.229 27.0324 103.997 27.3479 c
103.764 27.666599 103.64 28.088301 103.624 28.6131 c
107.425 28.6131 l
107.425 29.1346 107.399 29.5145 107.347 29.752701 c
107.289 30.100401 107.173 30.4046 106.999 30.6654 c
106.818 30.9391 106.555 31.1612 106.209 31.3318 c
h
106.282 30.206699 m
106.411 29.9813 106.493 29.6803 106.529 29.3036 c
103.648 29.3036 l
103.664 29.7479 103.808 30.1133 104.079 30.399799 c
104.35 30.6896 104.686 30.8344 105.086 30.8344 c
105.644 30.8344 106.043 30.6252 106.282 30.206699 c
h
W*
0 0 132 43 rc
101.689 32.592602 m
108.425 32.592602 l
108.425 25.1213 l
101.689 25.1213 l
h
f
Q
q
98.7836 30.742701 m
99.028999 31.0453 99.288803 31.2626 99.563202 31.3946 c
99.837601 31.5266 100.1426 31.5926 100.4784 31.5926 c
101.214 31.5926 101.711 31.336599 101.97 30.8248 c
102.112 30.544701 102.183 30.1439 102.183 29.622299 c
102.183 26.3048 l
101.297 26.3048 l
101.297 29.5644 l
101.297 29.8799 101.25 30.134199 101.156 30.3274 c
101.001 30.6493 100.72 30.810301 100.3137 30.810301 c
100.1071 30.810301 99.937698 30.7894 99.805298 30.747499 c
99.566399 30.676701 99.356598 30.535 99.175797 30.322599 c
99.030602 30.151899 98.935303 29.974899 98.890198 29.791401 c
98.848198 29.611099 98.827202 29.3519 98.827202 29.013901 c
98.827202 26.3048 l
97.955597 26.3048 l
97.955597 31.4767 l
98.7836 31.4767 l
98.7836 30.742701 l
h
W
0 0 132 43 rc
96.955597 32.592602 m
103.183 32.592602 l
103.183 25.3048 l
96.955597 25.3048 l
h
f
Q
q
94.539101 31.3946 m
94.264702 31.2626 94.004898 31.0453 93.759499 30.742701 c
93.759499 31.4767 l
92.931503 31.4767 l
92.931503 26.3048 l
93.803101 26.3048 l
93.803101 29.013901 l
93.803101 29.3519 93.824097 29.611099 93.865997 29.791401 c
93.911201 29.974899 94.0065 30.151899 94.151703 30.322599 c
94.332497 30.535 94.542297 30.676701 94.781197 30.747499 c
94.913498 30.7894 95.083 30.810301 95.289597 30.810301 c
95.696404 30.810301 95.977203 30.6493 96.132103 30.3274 c
96.2258 30.134199 96.272598 29.8799 96.272598 29.5644 c
96.272598 26.3048 l
97.158699 26.3048 l
97.158699 29.622299 l
97.158699 30.1439 97.087601 30.544701 96.945602 30.8248 c
96.687401 31.336599 96.190201 31.5926 95.454201 31.5926 c
95.1185 31.5926 94.813499 31.5266 94.539101 31.3946 c
h
W
0 0 132 43 rc
91.931503 32.592602 m
98.158699 32.592602 l
98.158699 25.3048 l
91.931503 25.3048 l
h
f
Q
q
90.067001 31.5926 m
90.434998 31.5926 90.791702 31.505699 91.1371 31.3318 c
91.482498 31.1612 91.745598 30.9391 91.9263 30.6654 c
92.100601 30.4046 92.216904 30.100401 92.275002 29.752701 c
92.326599 29.5145 92.352402 29.1346 92.352402 28.6131 c
88.551399 28.6131 l
88.567497 28.088301 88.691803 27.666599 88.924202 27.3479 c
89.1567 27.0324 89.516602 26.874599 90.003998 26.874599 c
90.459198 26.874599 90.822304 27.0243 91.093498 27.3237 c
91.248398 27.497601 91.3582 27.698799 91.422798 27.927401 c
92.2798 27.927401 l
92.257202 27.7374 92.181297 27.5249 92.0522 27.2899 c
91.9263 27.0581 91.784302 26.8682 91.626099 26.7201 c
91.361397 26.4625 91.033798 26.2887 90.643204 26.198601 c
90.433403 26.1471 90.196098 26.1213 89.931396 26.1213 c
89.285797 26.1213 88.738602 26.3547 88.289902 26.821501 c
87.841202 27.2915 87.616898 27.948299 87.616898 28.7918 c
87.616898 29.622299 87.842796 30.296801 88.2948 30.8151 c
88.746696 31.333401 89.337402 31.5926 90.067001 31.5926 c
h
91.456596 29.3036 m
91.421097 29.6803 91.338799 29.9813 91.209702 30.206699 c
90.970802 30.6252 90.572197 30.8344 90.013702 30.8344 c
89.613403 30.8344 89.277702 30.6896 89.006599 30.399799 c
88.735397 30.1133 88.591698 29.7479 88.5756 29.3036 c
91.456596 29.3036 l
h
W*
0 0 132 43 rc
86.616898 32.592602 m
93.352402 32.592602 l
93.352402 25.1213 l
86.616898 25.1213 l
h
f
Q
q
81.5662 31.298 m
81.398399 31.1821 81.211098 30.997 81.004501 30.742701 c
81.004501 31.4767 l
80.142601 31.4767 l
80.142601 26.3048 l
81.014198 26.3048 l
81.014198 29.047701 l
81.014198 29.7141 81.148201 30.1745 81.4161 30.428801 c
81.687302 30.6831 81.987503 30.810301 82.316704 30.810301 c
82.678299 30.810301 82.925201 30.6896 83.057602 30.448099 c
83.141502 30.2871 83.183502 30.0312 83.183502 29.6803 c
83.183502 26.3048 l
84.069603 26.3048 l
84.069603 29.313299 l
84.069603 29.8477 84.1922 30.2292 84.437599 30.4578 c
84.686096 30.6863 84.981499 30.8006 85.3237 30.8006 c
85.572197 30.8006 85.782097 30.7362 85.953102 30.6075 c
86.127502 30.478701 86.2146 30.2421 86.2146 29.8976 c
86.2146 26.3048 l
87.120102 26.3048 l
87.120102 29.7479 l
87.120102 30.205 87.052299 30.5688 86.916702 30.8393 c
86.664902 31.341499 86.190399 31.5926 85.493202 31.5926 c
85.167099 31.5926 84.873398 31.525 84.6119 31.389799 c
84.350403 31.257799 84.122803 31.053301 83.929199 30.776501 c
83.812897 31.001801 83.6838 31.172501 83.541801 31.288401 c
83.290001 31.491199 82.957497 31.5926 82.544296 31.5926 c
82.179497 31.5926 81.8535 31.4944 81.5662 31.298 c
h
W
0 0 132 43 rc
79.142601 32.592602 m
88.120102 32.592602 l
88.120102 25.3048 l
79.142601 25.3048 l
h
f
Q
q
73.771301 29.689899 m
73.703499 29.548201 73.569504 29.4645 73.3694 29.438801 c
71.979698 29.2649 l
71.492302 29.2038 71.098396 29.041201 70.798203 28.777201 c
70.498001 28.513201 70.3479 28.141399 70.3479 27.661699 c
70.3479 27.2239 70.499603 26.8585 70.803101 26.5655 c
71.109703 26.275801 71.503601 26.130899 71.984497 26.130899 c
72.384804 26.130899 72.751198 26.2162 73.083702 26.386801 c
73.416199 26.557501 73.671204 26.758699 73.848801 26.990499 c
73.8778 26.784401 73.927803 26.625099 73.998901 26.5124 c
74.134399 26.2999 74.352303 26.193701 74.652496 26.193701 c
74.7752 26.193701 74.872002 26.1985 74.9431 26.2082 c
75.014099 26.2178 75.117401 26.242001 75.252998 26.2806 c
75.252998 26.922899 l
75.198097 26.9132 75.1464 26.9051 75.098 26.898701 c
75.049599 26.8955 75.005997 26.8939 74.9673 26.8939 c
74.847801 26.8939 74.7687 26.9212 74.730003 26.976 c
74.694504 27.030701 74.676697 27.1031 74.676697 27.1933 c
74.676697 30.1728 l
74.676697 30.6621 74.4879 31.022699 74.110199 31.254499 c
73.729301 31.4863 73.233803 31.6022 72.623703 31.6022 c
72.097504 31.6022 71.6343 31.476601 71.234001 31.2255 c
70.836998 30.9776 70.630402 30.535 70.614197 29.897499 c
71.427696 29.897499 l
71.459999 30.1647 71.529404 30.365999 71.635902 30.5012 c
71.826401 30.7458 72.1492 30.8682 72.604301 30.8682 c
72.998199 30.8682 73.300003 30.8006 73.509804 30.6654 c
73.7229 30.5334 73.829399 30.3193 73.829399 30.0231 c
73.829399 29.878201 73.809998 29.7672 73.771301 29.689899 c
h
71.534203 27.087 m
71.350197 27.231899 71.258202 27.429899 71.258202 27.681 c
71.258202 28.0126 71.392197 28.254101 71.660103 28.405399 c
71.818298 28.495501 72.055603 28.561501 72.371902 28.603399 c
72.899696 28.671 l
73.061096 28.6903 73.2257 28.7225 73.3936 28.7675 c
73.561501 28.812599 73.698601 28.868999 73.805199 28.9366 c
73.805199 28.2363 l
73.805199 27.7019 73.563103 27.3172 73.078903 27.082199 c
72.791603 26.940599 72.494598 26.869699 72.187897 26.869699 c
71.936096 26.869699 71.718201 26.9422 71.534203 27.087 c
h
W*
0 0 132 43 rc
69.3479 32.6022 m
76.252998 32.6022 l
76.252998 25.130899 l
69.3479 25.130899 l
h
f
Q
q
66.454002 26.5317 m
66.3088 26.7409 66.236099 27.0114 66.236099 27.343 c
66.236099 30.766701 l
65.533997 30.766701 l
65.533997 31.476601 l
66.236099 31.476601 l
66.236099 32.920479 l
67.117401 32.920479 l
67.117401 31.476601 l
67.945396 31.476601 l
67.945396 30.766701 l
67.117401 30.766701 l
67.117401 27.391199 l
67.117401 27.211 67.178703 27.0902 67.301399 27.0291 c
67.369202 26.9937 67.482201 26.976 67.640297 26.976 c
67.775902 26.976 l
67.824303 26.9792 67.880798 26.983999 67.945396 26.9904 c
67.945396 26.304701 l
67.845299 26.2757 67.740402 26.254801 67.6306 26.241899 c
67.524101 26.229099 67.407898 26.222601 67.281998 26.222601 c
66.875298 26.222601 66.599297 26.3256 66.454002 26.5317 c
h
W
0 0 132 43 rc
64.533997 33.920479 m
68.945396 33.920479 l
68.945396 25.222601 l
64.533997 25.222601 l
h
f
Q
q
64.267303 31.3318 m
63.921902 31.505699 63.565201 31.5926 63.197201 31.5926 c
62.467602 31.5926 61.8769 31.333401 61.424999 30.8151 c
60.973 30.296801 60.747101 29.622299 60.747101 28.7918 c
60.747101 27.948299 60.971401 27.2915 61.420101 26.821501 c
61.868801 26.3547 62.416 26.1213 63.0616 26.1213 c
63.326302 26.1213 63.563499 26.1471 63.773399 26.198601 c
64.164001 26.2887 64.4916 26.4625 64.756302 26.7201 c
64.914497 26.8682 65.056503 27.0581 65.182404 27.2899 c
65.311501 27.5249 65.387398 27.7374 65.410004 27.927401 c
64.552902 27.927401 l
64.488403 27.698799 64.378601 27.497601 64.223701 27.3237 c
63.952499 27.0243 63.589401 26.874599 63.134201 26.874599 c
62.646801 26.874599 62.2868 27.0324 62.054401 27.3479 c
61.821999 27.666599 61.697701 28.088301 61.681599 28.6131 c
65.482597 28.6131 l
65.482597 29.1346 65.456802 29.5145 65.405197 29.752701 c
65.347 30.100401 65.230797 30.4046 65.056503 30.6654 c
64.875801 30.9391 64.612701 31.1612 64.267303 31.3318 c
h
64.339897 30.206699 m
64.469002 29.9813 64.5513 29.6803 64.5868 29.3036 c
61.705799 29.3036 l
61.721901 29.7479 61.865601 30.1133 62.1367 30.399799 c
62.407902 30.6896 62.743599 30.8344 63.143902 30.8344 c
63.7024 30.8344 64.100998 30.6252 64.339897 30.206699 c
h
W*
0 0 132 43 rc
59.747101 32.592602 m
66.482597 32.592602 l
66.482597 25.1213 l
59.747101 25.1213 l
h
f
Q
q
57.001202 31.476601 m
58.386002 27.265699 l
59.833801 31.476601 l
60.787701 31.476601 l
58.831501 26.304701 l
57.901798 26.304701 l
55.989201 31.476601 l
57.001202 31.476601 l
h
W
0 0 132 43 rc
54.989201 32.476601 m
61.787701 32.476601 l
61.787701 25.304701 l
54.989201 25.304701 l
h
f
Q
q
54.780602 31.3318 m
54.4352 31.505699 54.078499 31.5926 53.710499 31.5926 c
52.980999 31.5926 52.390301 31.333401 51.938301 30.8151 c
51.486401 30.296801 51.260399 29.622299 51.260399 28.7918 c
51.260399 27.948299 51.484798 27.2915 51.933498 26.821501 c
52.382198 26.3547 52.929298 26.1213 53.575001 26.1213 c
53.839699 26.1213 54.0769 26.1471 54.286701 26.198601 c
54.677299 26.2887 55.005001 26.4625 55.269699 26.7201 c
55.427898 26.8682 55.569901 27.0581 55.695801 27.2899 c
55.824902 27.5249 55.900799 27.7374 55.923401 27.927401 c
55.066299 27.927401 l
55.001801 27.698799 54.891998 27.497601 54.737099 27.3237 c
54.4659 27.0243 54.102699 26.874599 53.647598 26.874599 c
53.160198 26.874599 52.800201 27.0324 52.567799 27.3479 c
52.3354 27.666599 52.211102 28.088301 52.195 28.6131 c
55.995998 28.6131 l
55.995998 29.1346 55.9702 29.5145 55.918499 29.752701 c
55.860401 30.100401 55.744202 30.4046 55.569901 30.6654 c
55.389099 30.9391 55.125999 31.1612 54.780602 31.3318 c
h
54.853298 30.206699 m
54.982399 29.9813 55.064701 29.6803 55.100201 29.3036 c
52.2192 29.3036 l
52.235298 29.7479 52.379002 30.1133 52.650101 30.399799 c
52.921299 30.6896 53.257 30.8344 53.657299 30.8344 c
54.215698 30.8344 54.614399 30.6252 54.853298 30.206699 c
h
W*
0 0 132 43 rc
50.260399 32.592602 m
56.995998 32.592602 l
56.995998 25.1213 l
50.260399 25.1213 l
h
f
Q
q
49.993801 30.250099 m
49.758099 29.969999 49.640301 29.6465 49.640301 29.279499 c
49.640301 26.3048 l
48.7687 26.3048 l
48.7687 31.4767 l
49.596699 31.4767 l
49.596699 30.5833 l
49.664501 30.7572 49.8307 30.968 50.095402 31.2159 c
50.3601 31.466999 50.665199 31.5926 51.010601 31.5926 c
51.026699 31.5926 51.054199 31.591 51.092899 31.587799 c
51.131699 31.584499 51.1978 31.5781 51.291401 31.568399 c
51.291401 30.6509 l
51.239799 30.660601 51.191399 30.667 51.146198 30.6702 c
51.104198 30.6735 51.0574 30.6751 51.005798 30.6751 c
50.5667 30.6751 50.229401 30.5334 49.993801 30.250099 c
h
W
0 0 132 43 rc
47.7687 32.592602 m
52.291401 32.592602 l
52.291401 25.3048 l
47.7687 25.3048 l
h
f
Q
q
45.100399 28.246 m
45.831501 28.912399 l
47.448799 26.304701 l
48.562401 26.304701 l
46.465801 29.5401 l
48.451099 31.476601 l
47.337399 31.476601 l
45.100399 29.2794 l
45.100399 33.39854 l
44.262699 33.39854 l
44.262699 26.304701 l
45.100399 26.304701 l
45.100399 28.246 l
h
W
0 0 132 43 rc
43.262699 34.39854 m
49.562401 34.39854 l
49.562401 25.304701 l
43.262699 25.304701 l
h
f
Q
q
40.3377 27.927299 m
40.363499 27.6376 40.4361 27.4154 40.555599 27.2609 c
40.775101 26.980801 41.155998 26.840799 41.698299 26.840799 c
42.021099 26.840799 42.305199 26.91 42.550499 27.048401 c
42.795799 27.1901 42.918499 27.4074 42.918499 27.7003 c
42.918499 27.922501 42.820099 28.091499 42.6231 28.207399 c
42.497299 28.2782 42.248699 28.3603 41.877499 28.453699 c
41.185001 28.627501 l
40.742802 28.737 40.416801 28.859301 40.206902 28.994499 c
39.8325 29.2295 39.645302 29.554701 39.645302 29.969999 c
39.645302 30.459299 39.821201 30.855301 40.1731 31.1579 c
40.528099 31.460501 41.004299 31.6119 41.601501 31.6119 c
42.382702 31.6119 42.945999 31.383301 43.291401 30.9261 c
43.507599 30.6364 43.612499 30.3241 43.606098 29.9893 c
42.782902 29.9893 l
42.7668 30.185699 42.697399 30.364401 42.574699 30.525299 c
42.374599 30.753901 42.027599 30.8682 41.533699 30.8682 c
41.204399 30.8682 40.954201 30.805401 40.783199 30.6798 c
40.615299 30.5543 40.531399 30.3885 40.531399 30.182501 c
40.531399 29.9571 40.6427 29.7768 40.865501 29.6416 c
40.994598 29.5611 41.185001 29.490299 41.436798 29.4291 c
42.013 29.289101 l
42.639301 29.1378 43.058899 28.991301 43.271999 28.8496 c
43.610901 28.627501 43.780399 28.2782 43.780399 27.801701 c
43.780399 27.3414 43.6045 26.9438 43.252602 26.608999 c
42.903999 26.2742 42.371399 26.1068 41.654701 26.1068 c
40.883202 26.1068 40.336102 26.2806 40.013302 26.6283 c
39.693699 26.9792 39.522598 27.412201 39.5 27.927299 c
40.3377 27.927299 l
h
W
0 0 132 43 rc
38.5 32.6119 m
44.780399 32.6119 l
44.780399 25.1068 l
38.5 25.1068 l
h
f
Q
q
92.085403 22.728001 m
91.859802 22.745399 91.681702 22.757099 91.551102 22.762899 c
91.420502 22.7745 91.275002 22.7803 91.1147 22.7803 c
89.707497 22.7803 88.819801 22.4958 88.451698 21.926901 c
88.101402 21.543699 87.9263 20.844101 87.9263 19.8281 c
87.9263 19.218599 l
86.536903 19.218599 l
86.536903 17.468201 l
87.953003 17.468201 l
87.953003 9.8135004 l
90.4823 9.8135004 l
90.4823 17.468201 l
92.147797 17.468201 l
92.147797 19.218599 l
90.4823 19.218599 l
90.4823 20.019699 l
90.4823 20.2055 90.544701 20.373899 90.669403 20.524799 c
90.800003 20.681601 91.031502 20.754101 91.363998 20.7425 c
91.702499 20.7367 91.942902 20.7251 92.085403 20.707701 c
92.085403 22.728001 l
h
W
0 0 132 43 rc
85.536903 23.7803 m
93.147797 23.7803 l
93.147797 8.8135004 l
85.536903 8.8135004 l
h
f
Q
q
78.293701 18.278 m
78.9646 19.1141 80.116501 19.532101 81.749298 19.532101 c
82.812103 19.532101 83.756203 19.326 84.581497 18.913799 c
85.406799 18.5016 85.819397 17.7236 85.819397 16.579901 c
85.819397 12.2257 l
85.819397 11.9238 85.825401 11.5581 85.837196 11.1285 c
85.855003 10.8034 85.905502 10.5827 85.988602 10.4666 c
86.0718 10.3505 86.196404 10.2547 86.362701 10.1793 c
86.362701 9.8135004 l
83.601799 9.8135004 l
83.524597 10.0051 83.471199 10.1851 83.441498 10.3534 c
83.411797 10.5218 83.388 10.7134 83.370201 10.9282 c
83.019897 10.5566 82.616203 10.2402 82.158997 9.9790001 c
81.612701 9.6712999 80.995201 9.5173998 80.306503 9.5173998 c
79.427803 9.5173998 78.700401 9.7613001 78.124496 10.2489 c
77.554497 10.7424 77.269501 11.4391 77.269501 12.3389 c
77.269501 13.5059 77.729599 14.3506 78.650002 14.8731 c
79.154602 15.1575 79.896797 15.3607 80.876503 15.4827 c
81.740402 15.5872 l
82.209503 15.6452 82.544899 15.7178 82.746803 15.8049 c
83.109001 15.9558 83.2901 16.190901 83.2901 16.510201 c
83.2901 16.8992 83.150497 17.1663 82.871498 17.311399 c
82.598396 17.4624 82.194603 17.5378 81.660202 17.5378 c
81.0606 17.5378 80.636002 17.3927 80.386703 17.1024 c
80.208504 16.8876 80.089798 16.5973 80.030403 16.2316 c
77.5812 16.2316 l
77.634598 17.0618 77.872101 17.7439 78.293701 18.278 c
h
80.181801 11.6074 m
80.419296 11.4158 80.710197 11.3201 81.054604 11.3201 c
81.600899 11.3201 82.1026 11.4768 82.559799 11.7903 c
83.022903 12.1038 83.263298 12.6757 83.281197 13.5059 c
83.281197 14.4289 l
83.120796 14.3302 82.957603 14.249 82.791298 14.1851 c
82.630997 14.1271 82.408401 14.0719 82.123398 14.0196 c
81.553398 13.9151 l
81.018997 13.8223 80.636002 13.7091 80.404503 13.5755 c
80.012604 13.3491 79.816704 12.9979 79.816704 12.5218 c
79.816704 12.098 79.9384 11.7932 80.181801 11.6074 c
h
W*
0 0 132 43 rc
76.269501 20.532101 m
87.362701 20.532101 l
87.362701 8.5173998 l
76.269501 8.5173998 l
h
f
Q
q
71.2033 10.8846 m
71.737701 11.4652 72.037498 12.037 72.102798 12.6002 c
69.5112 12.6002 l
69.374603 12.3215 69.217201 12.1038 69.039101 11.9471 c
68.712601 11.6568 68.288002 11.5116 67.765503 11.5116 c
67.272697 11.5116 66.851196 11.6306 66.5009 11.8687 c
65.924896 12.2518 65.619202 12.9195 65.583504 13.8716 c
72.227501 13.8716 l
72.239403 14.6902 72.2127 15.3172 72.1474 15.7526 c
72.034599 16.495701 71.7882 17.148899 71.408203 17.712 c
70.986603 18.350599 70.452202 18.818001 69.805099 19.1141 c
69.157898 19.410101 68.430496 19.558201 67.623001 19.558201 c
66.263397 19.558201 65.155998 19.1199 64.301003 18.2432 c
63.452 17.3666 63.0275 16.1068 63.0275 14.4638 c
63.0275 12.7105 63.4995 11.4449 64.443497 10.6669 c
65.387604 9.8889999 66.477097 9.5 67.712097 9.5 c
69.208298 9.5 70.372101 9.9615002 71.2033 10.8846 c
h
68.976799 16.9979 m
69.344902 16.6612 69.549698 16.164801 69.591301 15.5088 c
65.645897 15.5088 l
65.728996 16.124201 65.930901 16.611799 66.251503 16.9718 c
66.578102 17.331699 67.035202 17.5117 67.623001 17.5117 c
68.163399 17.5117 68.614601 17.340401 68.976799 16.9979 c
h
W*
0 0 132 43 rc
62.0275 20.558201 m
73.239403 20.558201 l
73.239403 8.5 l
62.0275 8.5 l
h
f
Q
q
59.566898 15.6307 m
63.0937 9.8135004 l
60.029999 9.8135004 l
57.705502 13.8716 l
56.654598 12.8005 l
56.654598 9.8135004 l
54.160801 9.8135004 l
54.160801 22.6061 l
56.654598 22.6061 l
56.654598 15.6917 l
59.816299 19.2621 l
62.960098 19.2621 l
59.566898 15.6307 l
h
W
0 0 132 43 rc
53.160801 23.6061 m
64.093697 23.6061 l
64.093697 8.8135004 l
53.160801 8.8135004 l
h
f
Q
q
53.4879 9.8135004 m
49.960999 15.6307 l
53.354301 19.2621 l
50.2104 19.2621 l
47.048698 15.6917 l
47.048698 22.6061 l
44.555 22.6061 l
44.555 9.8135004 l
47.048698 9.8135004 l
47.048698 12.8005 l
48.099701 13.8716 l
50.424198 9.8135004 l
53.4879 9.8135004 l
h
W
0 0 132 43 rc
43.555 23.6061 m
54.4879 23.6061 l
54.4879 8.8135004 l
43.555 8.8135004 l
h
f
Q
q
108.465 9.8164997 m
104.233 22.585899 l
101.411 22.585899 l
97.1465 9.8164997 l
99.757202 9.8164997 l
100.584 12.4414 l
104.987 12.4414 l
105.757 9.8164997 l
108.465 9.8164997 l
h
102.798 19.666401 m
104.29 14.6418 l
101.257 14.6418 l
102.798 19.666401 l
h
W*
0 0 132 43 rc
96.1465 23.585899 m
109.465 23.585899 l
109.465 8.8164997 l
96.1465 8.8164997 l
h
f
Q
q
40.088001 9.8135004 2.5739 9.4920998 rc
39.088001 20.305599 m
43.6619 20.305599 l
43.6619 8.8135004 l
39.088001 8.8135004 l
h
f
Q
q
40.088001 20.4377 2.5739 2.2902999 rc
39.088001 23.728001 m
43.6619 23.728001 l
43.6619 19.4377 l
39.088001 19.4377 l
h
f
Q
q
110.242 20.413799 m
110.242 11.9856 l
108.77 11.9856 l
108.77 9.8135004 l
114.024 9.8135004 l
114.024 11.9856 l
112.723 11.9856 l
112.723 20.413799 l
114.024 20.413799 l
114.024 22.585899 l
108.77 22.585899 l
108.77 20.413799 l
110.242 20.413799 l
h
W
0 0 132 43 rc
107.77 23.585899 m
115.024 23.585899 l
115.024 8.8135004 l
107.77 8.8135004 l
h
f
Q
q
28.349701 18.342501 m
24.8836 15.5357 19.9266 15.5357 16.460501 18.342501 c
17.800699 19.9974 l
20.485399 17.8234 24.3248 17.8234 27.009501 19.9974 c
28.349701 18.342501 l
h
W
0 0 132 43 rc
15.4605 20.9974 m
29.349701 20.9974 l
29.349701 14.5357 l
15.4605 14.5357 l
h
f
Q
q
17.903999 21.986601 2.1296 2.8769 rc
16.903999 25.863501 m
21.0336 25.863501 l
21.0336 20.986601 l
16.903999 20.986601 l
h
f
Q
q
24.511999 21.986601 2.1294999 2.8769 rc
23.511999 25.863501 m
27.6415 25.863501 l
27.6415 20.986601 l
23.511999 20.986601 l
h
f
Q
q
22 9.5 m
28.351299 9.5 33.5 14.6487 33.5 21 c
33.5 27.351299 28.351299 32.5 22 32.5 c
15.6487 32.5 10.5 27.351299 10.5 21 c
10.5 14.6487 15.6487 9.5 22 9.5 c
h
22 11.6295 m
27.1752 11.6295 31.370501 15.8248 31.370501 21 c
31.370501 26.1752 27.1752 30.370501 22 30.370501 c
16.8248 30.370501 12.6295 26.1752 12.6295 21 c
12.6295 15.8248 16.8248 11.6295 22 11.6295 c
h
W*
0 0 132 43 rc
9.5 33.5 m
34.5 33.5 l
34.5 8.5 l
9.5 8.5 l
h
f
ep
end
%%Trailer
%%EOF
