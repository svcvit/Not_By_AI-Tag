%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.2.1 (Build 23C71) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
1 1 1 sc
q
74.624001 12.1154 m
74.265297 11.5627 73.856796 11.161 73.398201 10.9103 c
72.939697 10.6595 72.3694 10.5342 71.6875 10.5342 c
70.564598 10.5342 69.618103 10.9729 68.848 11.8504 c
68.083702 12.7336 67.701599 13.8647 67.701599 15.2436 c
67.701599 16.8333 68.077797 18.084 68.830299 18.995701 c
69.588699 19.9074 70.599899 20.363199 71.8638 20.363199 c
72.445801 20.363199 72.963203 20.2379 73.415802 19.9872 c
73.8685 19.742201 74.235901 19.400299 74.518097 18.9615 c
74.518097 23.406 l
77.066597 23.406 l
77.066597 10.8248 l
74.624001 10.8248 l
74.624001 12.1154 l
h
70.294197 15.4231 m
70.294197 14.5627 70.470497 13.8761 70.823303 13.3632 c
71.170097 12.8447 71.699203 12.5855 72.410599 12.5855 c
73.121902 12.5855 73.662804 12.8419 74.033096 13.3547 c
74.403503 13.8675 74.588699 14.5313 74.588699 15.3462 c
74.588699 16.4858 74.291801 17.3006 73.697998 17.7906 c
73.333504 18.086901 72.910301 18.235001 72.4282 18.235001 c
71.693298 18.235001 71.152496 17.964399 70.805603 17.4231 c
70.464699 16.887501 70.294197 16.2208 70.294197 15.4231 c
h
W*
0 0 132 43 rc
66.701599 24.406 m
78.066597 24.406 l
78.066597 9.5341997 l
66.701599 9.5341997 l
h
f
Q
q
63.103001 10.6966 m
64.293503 10.7393 l
64.293503 12.5598 l
64.140198 12.5494 l
64.037804 12.5427 l
63.799702 12.5427 l
63.2882 12.5427 62.982498 12.5883 62.882599 12.6795 c
62.7826 12.7764 62.7327 13.0157 62.7327 13.3974 c
62.7327 18.320499 l
64.293503 18.320499 l
64.293503 20.055599 l
62.7327 20.055599 l
62.7327 22.653799 l
60.245899 22.653799 l
60.245899 20.055599 l
58.905499 20.055599 l
58.905499 18.320499 l
60.245899 18.320499 l
60.245899 12.5855 l
60.245899 12.0043 60.387001 11.5741 60.669201 11.2949 c
61.104198 10.8561 61.915501 10.6567 63.103001 10.6966 c
h
W
0 0 132 43 rc
57.905499 23.653799 m
65.293503 23.653799 l
65.293503 9.6567001 l
57.905499 9.6567001 l
h
f
Q
q
58.970798 13.5598 m
58.906101 13.0071 58.6092 12.4459 58.080101 11.8761 c
57.257099 10.9701 56.104801 10.5171 54.623402 10.5171 c
53.4006 10.5171 52.3218 10.8989 51.387001 11.6624 c
50.452301 12.4259 49.984901 13.6681 49.984901 15.3889 c
49.984901 17.0014 50.4053 18.2379 51.245998 19.098301 c
52.092499 19.9587 53.1889 20.388901 54.535198 20.388901 c
55.334702 20.388901 56.054901 20.243601 56.695702 19.952999 c
57.336498 19.662399 57.865501 19.203699 58.282902 18.5769 c
58.659199 18.0242 58.903198 17.3832 59.0149 16.653799 c
59.079498 16.2265 59.105999 15.6111 59.0942 14.8077 c
52.5158 14.8077 l
52.551102 13.8732 52.853802 13.2179 53.424099 12.8419 c
53.770901 12.6083 54.188301 12.4915 54.6763 12.4915 c
55.1936 12.4915 55.613899 12.6339 55.937302 12.9188 c
56.113602 13.0726 56.269402 13.2863 56.404701 13.5598 c
58.970798 13.5598 l
h
56.484001 16.414499 m
56.442902 17.058399 56.240002 17.545601 55.875599 17.876101 c
55.516899 18.212299 55.070202 18.380301 54.535198 18.380301 c
53.953201 18.380301 53.5005 18.203699 53.1772 17.850401 c
52.859699 17.4972 52.659801 17.018499 52.577499 16.414499 c
56.484001 16.414499 l
h
W*
0 0 132 43 rc
48.984901 21.388901 m
60.105999 21.388901 l
60.105999 9.5171003 l
48.984901 9.5171003 l
h
f
Q
q
41.0061 18.337601 m
40.153702 18.337601 39.568802 17.9872 39.251301 17.286301 c
39.0867 16.916 39.004398 16.443001 39.004398 15.8675 c
39.004398 10.8248 l
36.5 10.8248 l
36.5 20.123899 l
38.924999 20.123899 l
38.924999 18.764999 l
39.248402 19.243601 39.5541 19.588301 39.842098 19.799101 c
40.359501 20.1752 41.014999 20.363199 41.808601 20.363199 c
42.802101 20.363199 43.6134 20.109699 44.2425 19.6026 c
44.877399 19.101101 45.194801 18.266399 45.194801 17.098301 c
45.194801 10.8248 l
42.6199 10.8248 l
42.6199 16.491501 l
42.6199 16.981501 42.552299 17.3575 42.417099 17.619699 c
42.1702 18.098301 41.699902 18.337601 41.0061 18.337601 c
h
W
0 0 132 43 rc
35.5 21.363199 m
46.194801 21.363199 l
46.194801 9.8247995 l
35.5 9.8247995 l
h
f
Q
q
101.527 16.9359 m
101.874 17.5741 102.553 17.8932 103.564 17.8932 c
103.64 17.8932 103.74 17.890301 103.864 17.8846 c
103.987 17.878901 104.128 17.8675 104.287 17.850401 c
104.287 20.346201 l
104.175 20.3519 104.102 20.3547 104.066 20.3547 c
104.037 20.360399 103.999 20.363199 103.952 20.363199 c
103.199 20.363199 102.588 20.1724 102.118 19.7906 c
101.83 19.5627 101.492 19.138201 101.104 18.517099 c
101.104 20.141001 l
98.705002 20.141001 l
98.705002 10.8248 l
101.236 10.8248 l
101.236 15.2778 l
101.236 16.0242 101.333 16.5769 101.527 16.9359 c
h
W
0 0 132 43 rc
97.705002 21.363199 m
105.287 21.363199 l
105.287 9.8247995 l
97.705002 9.8247995 l
h
f
Q
q
96.609703 18.9615 m
97.420998 17.9758 97.826599 16.810499 97.826599 15.4658 c
97.826599 14.0983 97.420998 12.9274 96.609703 11.953 c
95.798401 10.9843 94.566803 10.5 92.914902 10.5 c
91.262901 10.5 90.031303 10.9843 89.220001 11.953 c
88.408699 12.9274 88.003098 14.0983 88.003098 15.4658 c
88.003098 16.810499 88.408699 17.9758 89.220001 18.9615 c
90.031303 19.9473 91.262901 20.440201 92.914902 20.440201 c
94.566803 20.440201 95.798401 19.9473 96.609703 18.9615 c
h
92.905998 18.380301 m
92.171204 18.380301 91.603897 18.126801 91.204102 17.619699 c
90.810204 17.1182 90.613297 16.400299 90.613297 15.4658 c
90.613297 14.5313 90.810204 13.8105 91.204102 13.3034 c
91.603897 12.7963 92.171204 12.5427 92.905998 12.5427 c
93.6409 12.5427 94.205299 12.7963 94.599098 13.3034 c
94.992996 13.8105 95.190002 14.5313 95.190002 15.4658 c
95.190002 16.400299 94.992996 17.1182 94.599098 17.619699 c
94.205299 18.126801 93.6409 18.380301 92.905998 18.380301 c
h
W*
0 0 132 43 rc
87.003098 21.440201 m
98.826599 21.440201 l
98.826599 9.5 l
87.003098 9.5 l
h
f
Q
q
87.689102 15.4658 m
87.689102 16.810499 87.283501 17.9758 86.472198 18.9615 c
85.660896 19.9473 84.429298 20.440201 82.777298 20.440201 c
81.125397 20.440201 79.893799 19.9473 79.082497 18.9615 c
78.271202 17.9758 77.865601 16.810499 77.865601 15.4658 c
77.865601 14.0983 78.271202 12.9274 79.082497 11.953 c
79.893799 10.9843 81.125397 10.5 82.777298 10.5 c
84.429298 10.5 85.660896 10.9843 86.472198 11.953 c
87.283501 12.9274 87.689102 14.0983 87.689102 15.4658 c
h
81.066597 17.619699 m
81.4664 18.126801 82.033699 18.380301 82.768501 18.380301 c
83.503403 18.380301 84.067802 18.126801 84.461601 17.619699 c
84.855499 17.1182 85.052498 16.400299 85.052498 15.4658 c
85.052498 14.5313 84.855499 13.8105 84.461601 13.3034 c
84.067802 12.7963 83.503403 12.5427 82.768501 12.5427 c
82.033699 12.5427 81.4664 12.7963 81.066597 13.3034 c
80.672699 13.8105 80.4758 14.5313 80.4758 15.4658 c
80.4758 16.400299 80.672699 17.1182 81.066597 17.619699 c
h
W*
0 0 132 43 rc
76.865601 21.440201 m
88.689102 21.440201 l
88.689102 9.5 l
76.865601 9.5 l
h
f
Q
q
114.575 23.181801 m
119.133 10.942 l
116.216 10.942 l
115.387 13.458 l
110.644 13.458 l
109.754 10.942 l
106.941 10.942 l
111.535 23.181801 l
114.575 23.181801 l
h
114.636 15.5672 m
113.029 20.3834 l
111.369 15.5672 l
114.636 15.5672 l
h
W*
0 0 132 43 rc
105.941 24.181801 m
120.133 24.181801 l
120.133 9.9420004 l
105.941 9.9420004 l
h
f
Q
q
46.655102 21.2521 2.5485001 2.2479 rc
45.655102 24.5 m
50.203602 24.5 l
50.203602 20.2521 l
45.655102 20.2521 l
h
f
Q
q
46.655102 10.8248 2.5485001 9.3162003 rc
45.655102 21.141001 m
50.203602 21.141001 l
50.203602 9.8247995 l
45.655102 9.8247995 l
h
f
Q
q
121.427 21.0998 m
121.427 13.0211 l
119.841 13.0211 l
119.841 10.9391 l
125.5 10.9391 l
125.5 13.0211 l
124.099 13.0211 l
124.099 21.0998 l
125.5 21.0998 l
125.5 23.181801 l
119.841 23.181801 l
119.841 21.0998 l
121.427 21.0998 l
h
W
0 0 132 43 rc
118.841 24.181801 m
126.5 24.181801 l
126.5 9.9391003 l
118.841 9.9391003 l
h
f
Q
q
54.096001 31.6276 m
53.836201 31.387899 53.706299 30.9349 53.706299 30.268499 c
53.706299 27.6157 l
52.935501 27.6157 l
52.935501 34.5 l
53.706299 34.5 l
53.706299 31.940599 l
53.889 32.192799 54.0532 32.3703 54.198799 32.473 c
54.447201 32.650478 54.757 32.73922 55.128101 32.73922 c
55.793301 32.73922 56.2444 32.4855 56.4814 31.9779 c
56.609798 31.7008 56.674099 31.316299 56.674099 30.824301 c
56.674099 27.6157 l
55.881802 27.6157 l
55.881802 30.768299 l
55.881802 31.1357 55.839001 31.405001 55.7533 31.5763 c
55.613499 31.8503 55.3508 31.987301 54.965401 31.987301 c
54.645599 31.987301 54.355801 31.867399 54.096001 31.6276 c
h
W
0 0 132 43 rc
51.935501 35.5 m
57.674099 35.5 l
57.674099 26.6157 l
51.935501 26.6157 l
h
f
Q
q
63.2019 32.463699 m
62.964901 32.625568 62.670799 32.706532 62.319698 32.706532 c
61.685902 32.706532 61.197701 32.438801 60.855099 31.9032 c
60.515301 31.3708 60.345402 30.740299 60.345402 30.0117 c
60.345402 29.2332 60.532398 28.608999 60.906502 28.1388 c
61.280499 27.6717 61.723 27.4382 62.234001 27.4382 c
62.5509 27.4382 62.8321 27.506701 63.077702 27.6437 c
63.3232 27.780701 63.5359 28.0033 63.715801 28.3116 c
63.715801 27.6157 l
64.4095 27.6157 l
64.4095 34.5 l
63.668701 34.5 l
63.668701 31.973301 l
63.494499 32.206799 63.338902 32.3703 63.2019 32.463699 c
h
61.471699 28.713301 m
61.263302 29.0744 61.1591 29.5228 61.1591 30.058399 c
61.1591 30.6873 61.278999 31.1637 61.518799 31.487499 c
61.761501 31.811399 62.077 31.973301 62.465302 31.973301 c
62.813599 31.973301 63.106201 31.8207 63.343201 31.5156 c
63.5802 31.213499 63.698601 30.7465 63.698601 30.114401 c
63.698601 29.4886 63.583 29.0075 63.351799 28.6712 c
63.123402 28.3381 62.8307 28.171499 62.473801 28.171499 c
62.014198 28.171499 61.680199 28.3521 61.471699 28.713301 c
h
W*
0 0 132 43 rc
59.345402 35.5 m
65.4095 35.5 l
65.4095 26.4382 l
59.345402 26.4382 l
h
f
Q
q
74.833603 32.463699 m
74.596603 32.625568 74.302597 32.706532 73.951401 32.706532 c
73.317596 32.706532 72.829399 32.438801 72.486801 31.9032 c
72.147003 31.3708 71.977203 30.740299 71.977203 30.0117 c
71.977203 29.2332 72.1642 28.608999 72.5382 28.1388 c
72.912201 27.6717 73.354698 27.4382 73.8657 27.4382 c
74.182602 27.4382 74.463898 27.506701 74.709396 27.6437 c
74.954903 27.780701 75.167603 28.0033 75.347504 28.3116 c
75.347504 27.6157 l
76.041199 27.6157 l
76.041199 34.5 l
75.3004 34.5 l
75.3004 31.973301 l
75.126198 32.206799 74.970596 32.3703 74.833603 32.463699 c
h
73.1035 28.713301 m
72.894997 29.0744 72.790802 29.5228 72.790802 30.058399 c
72.790802 30.6873 72.910698 31.1637 73.150597 31.487499 c
73.393204 31.811399 73.708702 31.973301 74.097 31.973301 c
74.445297 31.973301 74.7379 31.8207 74.974899 31.5156 c
75.211899 31.213499 75.330299 30.7465 75.330299 30.114401 c
75.330299 29.4886 75.214699 29.0075 74.983498 28.6712 c
74.755096 28.3381 74.462402 28.171499 74.105598 28.171499 c
73.645897 28.171499 73.311897 28.3521 73.1035 28.713301 c
h
W*
0 0 132 43 rc
70.977203 35.5 m
77.041199 35.5 l
77.041199 26.4382 l
70.977203 26.4382 l
h
f
Q
q
81.455498 32.463699 m
81.218498 32.625568 80.9245 32.706532 80.573303 32.706532 c
79.939499 32.706532 79.451302 32.438801 79.108704 31.9032 c
78.768997 31.3708 78.599098 30.740299 78.599098 30.0117 c
78.599098 29.2332 78.786102 28.608999 79.160103 28.1388 c
79.534103 27.6717 79.976601 27.4382 80.487701 27.4382 c
80.804604 27.4382 81.0858 27.506701 81.331299 27.6437 c
81.576797 27.780701 81.789497 28.0033 81.969398 28.3116 c
81.969398 27.6157 l
82.6632 27.6157 l
82.6632 34.5 l
81.922302 34.5 l
81.922302 31.973301 l
81.7481 32.206799 81.592499 32.3703 81.455498 32.463699 c
h
79.725403 28.713301 m
79.516998 29.0744 79.412804 29.5228 79.412804 30.058399 c
79.412804 30.6873 79.5327 31.1637 79.772499 31.487499 c
80.015198 31.811399 80.330597 31.973301 80.718903 31.973301 c
81.0672 31.973301 81.359901 31.8207 81.596802 31.5156 c
81.833801 31.213499 81.952301 30.7465 81.952301 30.114401 c
81.952301 29.4886 81.8367 29.0075 81.6054 28.6712 c
81.376999 28.3381 81.084396 28.171499 80.727501 28.171499 c
80.267799 28.171499 79.9338 28.3521 79.725403 28.713301 c
h
W*
0 0 132 43 rc
77.599098 35.5 m
83.6632 35.5 l
83.6632 26.4382 l
77.599098 26.4382 l
h
f
Q
q
86.804298 32.118 m
86.396004 32.547699 85.8964 32.76255 85.305397 32.76255 c
84.645897 32.76255 84.120598 32.513451 83.729401 32.015301 c
83.338303 31.517099 83.1427 30.847601 83.1427 30.007 c
83.1427 29.2223 83.3283 28.5965 83.699501 28.1294 c
84.070602 27.665501 84.571701 27.4335 85.202599 27.4335 c
85.959198 27.4335 86.517403 27.6966 86.877098 28.222799 c
87.236801 28.749001 87.416702 29.4154 87.416702 30.2218 c
87.416702 31.056299 87.212502 31.688299 86.804298 32.118 c
h
86.3246 28.788 m
86.1362 28.367599 85.786499 28.1574 85.275398 28.1574 c
84.810097 28.1574 84.470299 28.3349 84.256203 28.689899 c
84.042099 29.0448 83.934998 29.488501 83.934998 30.021 c
83.934998 30.575199 84.042099 31.0485 84.256203 31.4408 c
84.470299 31.833099 84.812897 32.029301 85.283997 32.029301 c
85.815002 32.029301 86.189003 31.798901 86.405998 31.337999 c
86.542999 31.045401 86.611603 30.665501 86.611603 30.1984 c
86.611603 29.681601 86.5159 29.211399 86.3246 28.788 c
h
W*
0 0 132 43 rc
82.1427 33.76255 m
88.416702 33.76255 l
88.416702 26.4335 l
82.1427 26.4335 l
h
f
Q
q
91.335602 32.118 m
90.927299 32.547699 90.427696 32.76255 89.8367 32.76255 c
89.1772 32.76255 88.651901 32.513451 88.260803 32.015301 c
87.869598 31.517099 87.674103 30.847601 87.674103 30.007 c
87.674103 29.2223 87.859596 28.5965 88.230797 28.1294 c
88.601898 27.665501 89.102997 27.4335 89.733902 27.4335 c
90.490501 27.4335 91.048698 27.6966 91.408401 28.222799 c
91.768097 28.749001 91.947998 29.4154 91.947998 30.2218 c
91.947998 31.056299 91.743896 31.688299 91.335602 32.118 c
h
90.856003 28.788 m
90.667503 28.367599 90.317802 28.1574 89.806702 28.1574 c
89.3414 28.1574 89.001602 28.3349 88.787498 28.689899 c
88.573402 29.0448 88.466301 29.488501 88.466301 30.021 c
88.466301 30.575199 88.573402 31.0485 88.787498 31.4408 c
89.001602 31.833099 89.3442 32.029301 89.8153 32.029301 c
90.346298 32.029301 90.720299 31.798901 90.937302 31.337999 c
91.074402 31.045401 91.142899 30.665501 91.142899 30.1984 c
91.142899 29.681601 91.047203 29.211399 90.856003 28.788 c
h
W*
0 0 132 43 rc
86.674103 33.76255 m
92.947998 33.76255 l
92.947998 26.4335 l
86.674103 26.4335 l
h
f
Q
q
113.847 28.540501 m
113.741 28.689899 113.677 28.9048 113.654 29.184999 c
112.913 29.184999 l
112.933 28.6868 113.084 28.268 113.367 27.9286 c
113.652 27.5924 114.136 27.4242 114.819 27.4242 c
115.453 27.4242 115.924 27.5861 116.232 27.91 c
116.543 28.233801 116.699 28.618299 116.699 29.063601 c
116.699 29.524401 116.549 29.8622 116.249 30.077101 c
116.061 30.2141 115.69 30.3557 115.136 30.5021 c
114.626 30.637501 l
114.403 30.696699 114.235 30.7652 114.121 30.843 c
113.924 30.973801 113.825 31.148199 113.825 31.3661 c
113.825 31.565399 113.899 31.7257 114.048 31.8472 c
114.199 31.968599 114.42 32.029301 114.712 32.029301 c
115.149 32.029301 115.455 31.9188 115.632 31.697701 c
115.741 31.542 115.802 31.3692 115.817 31.1793 c
116.545 31.1793 l
116.55 31.503099 116.458 31.805099 116.266 32.0854 c
115.961 32.527512 115.463 32.748581 114.772 32.748581 c
114.243 32.748581 113.822 32.602242 113.508 32.309601 c
113.197 32.016899 113.042 31.6339 113.042 31.160601 c
113.042 30.759001 113.207 30.4445 113.538 30.217199 c
113.724 30.086399 114.012 29.9681 114.403 29.8622 c
115.016 29.694099 l
115.344 29.6038 115.564 29.524401 115.675 29.4559 c
115.849 29.3438 115.936 29.1803 115.936 28.9655 c
115.936 28.6821 115.828 28.472 115.611 28.334999 c
115.394 28.201099 115.143 28.1341 114.857 28.1341 c
114.378 28.1341 114.041 28.2696 113.847 28.540501 c
h
W
0 0 132 43 rc
111.913 33.748581 m
117.699 33.748581 l
117.699 26.4242 l
111.913 26.4242 l
h
f
Q
q
120.087 32.477699 m
119.781 32.645859 119.466 32.729919 119.14 32.729919 c
118.495 32.729919 117.973 32.479301 117.573 31.978001 c
117.173 31.4767 116.973 30.8244 116.973 30.021 c
116.973 29.205299 117.172 28.570101 117.569 28.115499 c
117.965 27.664 118.449 27.438299 119.02 27.438299 c
119.254 27.438299 119.464 27.4632 119.65 27.513 c
119.995 27.600201 120.285 27.768299 120.519 28.017401 c
120.659 28.160601 120.785 28.344299 120.896 28.568501 c
121.01 28.795799 121.077 29.001301 121.097 29.184999 c
120.339 29.184999 l
120.282 28.9639 120.185 28.7693 120.048 28.6012 c
119.808 28.3116 119.487 28.166901 119.085 28.166901 c
118.653 28.166901 118.335 28.319401 118.13 28.624599 c
117.924 28.9328 117.814 29.3407 117.8 29.8482 c
121.162 29.8482 l
121.162 30.3526 121.139 30.7201 121.093 30.9505 c
121.042 31.286699 120.939 31.580999 120.785 31.8332 c
120.625 32.0979 120.392 32.312698 120.087 32.477699 c
h
120.151 31.3895 m
120.265 31.171499 120.338 30.8804 120.369 30.5161 c
117.821 30.5161 l
117.836 30.945801 117.963 31.2992 118.202 31.5763 c
118.442 31.856501 118.739 31.9967 119.093 31.9967 c
119.587 31.9967 119.94 31.7943 120.151 31.3895 c
h
W*
0 0 132 43 rc
115.973 33.729919 m
122.162 33.729919 l
122.162 26.438299 l
115.973 26.438299 l
h
f
Q
q
122.588 30.987801 m
122.551 30.813499 122.532 30.562799 122.532 30.235901 c
122.532 27.6157 l
121.761 27.6157 l
121.761 32.617828 l
122.494 32.617828 l
122.494 31.9079 l
122.711 32.2006 122.94 32.410801 123.183 32.538429 c
123.426 32.666088 123.696 32.729919 123.993 32.729919 c
124.643 32.729919 125.083 32.482399 125.312 31.987301 c
125.437 31.7164 125.5 31.3288 125.5 30.8244 c
125.5 27.6157 l
124.716 27.6157 l
124.716 30.768299 l
124.716 31.0735 124.675 31.319401 124.592 31.5063 c
124.455 31.8176 124.207 31.973301 123.847 31.973301 c
123.664 31.973301 123.514 31.9531 123.397 31.9126 c
123.186 31.844101 123 31.7071 122.841 31.5016 c
122.712 31.336599 122.628 31.1653 122.588 30.987801 c
h
W
0 0 132 43 rc
120.761 33.729919 m
126.5 33.729919 l
126.5 26.6157 l
120.761 26.6157 l
h
f
Q
q
110.086 32.538429 m
109.844 32.410801 109.614 32.2006 109.397 31.9079 c
109.397 32.617828 l
108.665 32.617828 l
108.665 27.6157 l
109.436 27.6157 l
109.436 30.235901 l
109.436 30.562799 109.454 30.813499 109.491 30.987801 c
109.531 31.1653 109.615 31.336599 109.744 31.5016 c
109.904 31.7071 110.089 31.844101 110.301 31.9126 c
110.418 31.9531 110.568 31.973301 110.75 31.973301 c
111.11 31.973301 111.358 31.8176 111.495 31.5063 c
111.578 31.319401 111.62 31.0735 111.62 30.768299 c
111.62 27.6157 l
112.403 27.6157 l
112.403 30.8244 l
112.403 31.3288 112.34 31.7164 112.215 31.987301 c
111.986 32.482399 111.547 32.729919 110.896 32.729919 c
110.599 32.729919 110.329 32.666088 110.086 32.538429 c
h
W
0 0 132 43 rc
107.665 33.729919 m
113.403 33.729919 l
113.403 26.6157 l
107.665 26.6157 l
h
f
Q
q
106.989 32.477699 m
106.684 32.645859 106.368 32.729919 106.043 32.729919 c
105.398 32.729919 104.875 32.479301 104.476 31.978001 c
104.076 31.4767 103.876 30.8244 103.876 30.021 c
103.876 29.205299 104.074 28.570101 104.471 28.115499 c
104.868 27.664 105.352 27.438299 105.923 27.438299 c
106.157 27.438299 106.367 27.4632 106.553 27.513 c
106.898 27.600201 107.188 27.768299 107.422 28.017401 c
107.562 28.160601 107.688 28.344299 107.799 28.568501 c
107.913 28.795799 107.98 29.001301 108 29.184999 c
107.242 29.184999 l
107.185 28.9639 107.088 28.7693 106.951 28.6012 c
106.711 28.3116 106.39 28.166901 105.987 28.166901 c
105.556 28.166901 105.238 28.319401 105.032 28.624599 c
104.827 28.9328 104.717 29.3407 104.703 29.8482 c
108.064 29.8482 l
108.064 30.3526 108.042 30.7201 107.996 30.9505 c
107.944 31.286699 107.842 31.580999 107.688 31.8332 c
107.528 32.0979 107.295 32.312698 106.989 32.477699 c
h
107.054 31.3895 m
107.168 31.171499 107.241 30.8804 107.272 30.5161 c
104.724 30.5161 l
104.738 30.945801 104.865 31.2992 105.105 31.5763 c
105.345 31.856501 105.642 31.9967 105.996 31.9967 c
106.49 31.9967 106.842 31.7943 107.054 31.3895 c
h
W*
0 0 132 43 rc
102.876 33.729919 m
109.064 33.729919 l
109.064 26.438299 l
102.876 26.438299 l
h
f
Q
q
98.437202 32.445 m
98.288696 32.332901 98.1231 32.1539 97.940399 31.9079 c
97.940399 32.617828 l
97.178101 32.617828 l
97.178101 27.6157 l
97.948997 27.6157 l
97.948997 30.2686 l
97.948997 30.913099 98.067398 31.3584 98.304398 31.6043 c
98.544197 31.8503 98.8097 31.973301 99.100998 31.973301 c
99.4207 31.973301 99.639099 31.856501 99.756203 31.622999 c
99.830399 31.4673 99.8675 31.219801 99.8675 30.8804 c
99.8675 27.6157 l
100.651 27.6157 l
100.651 30.525499 l
100.651 31.042299 100.76 31.411301 100.977 31.632401 c
101.197 31.853399 101.458 31.964001 101.76 31.964001 c
101.98 31.964001 102.166 31.901699 102.317 31.7771 c
102.471 31.652599 102.548 31.4237 102.548 31.090599 c
102.548 27.6157 l
103.349 27.6157 l
103.349 30.945801 l
103.349 31.387899 103.289 31.739799 103.169 32.001301 c
102.947 32.487099 102.527 32.729919 101.91 32.729919 c
101.622 32.729919 101.362 32.664539 101.131 32.53376 c
100.9 32.406101 100.698 32.208401 100.527 31.940599 c
100.4242 32.1586 100.3101 32.323601 100.1844 32.435699 c
99.9617 32.63184 99.667702 32.729919 99.3022 32.729919 c
98.979599 32.729919 98.691299 32.63496 98.437202 32.445 c
h
W
0 0 132 43 rc
96.178101 33.729919 m
104.349 33.729919 l
104.349 26.6157 l
96.178101 26.6157 l
h
f
Q
q
93.713097 32.365601 m
93.478897 32.1259 93.331902 31.9219 93.271896 31.753799 c
93.271896 32.617828 l
92.539597 32.617828 l
92.539597 27.6157 l
93.310501 27.6157 l
93.310501 30.4928 l
93.310501 30.8477 93.414703 31.160601 93.6231 31.431499 c
93.831497 31.7055 94.129898 31.842501 94.518204 31.842501 c
94.563797 31.842501 94.605202 31.841 94.642403 31.8379 c
94.682297 31.8347 94.725098 31.828501 94.770798 31.819201 c
94.770798 32.70657 l
94.688004 32.715912 94.629501 32.722141 94.5952 32.72525 c
94.560997 32.728371 94.536697 32.729919 94.5224 32.729919 c
94.217003 32.729919 93.947197 32.60849 93.713097 32.365601 c
h
W
0 0 132 43 rc
91.539597 33.729919 m
95.770798 33.729919 l
95.770798 26.6157 l
91.539597 26.6157 l
h
f
Q
q
70.928101 32.365601 m
70.694 32.1259 70.546997 31.9219 70.487 31.753799 c
70.487 32.617828 l
69.7547 32.617828 l
69.7547 27.6157 l
70.525497 27.6157 l
70.525497 30.4928 l
70.525497 30.8477 70.629799 31.160601 70.838203 31.431499 c
71.0466 31.7055 71.344902 31.842501 71.7332 31.842501 c
71.7789 31.842501 71.820297 31.841 71.857399 31.8379 c
71.8974 31.8347 71.940201 31.828501 71.985901 31.819201 c
71.985901 32.70657 l
71.903099 32.715912 71.844597 32.722141 71.810303 32.72525 c
71.776001 32.728371 71.751801 32.729919 71.737503 32.729919 c
71.431999 32.729919 71.162201 32.60849 70.928101 32.365601 c
h
W
0 0 132 43 rc
68.7547 33.729919 m
72.985901 33.729919 l
72.985901 26.6157 l
68.7547 26.6157 l
h
f
Q
q
68.058296 32.477699 m
67.7528 32.645859 67.437302 32.729919 67.111801 32.729919 c
66.466599 32.729919 65.944199 32.479301 65.544502 31.978001 c
65.144798 31.4767 64.944901 30.8244 64.944901 30.021 c
64.944901 29.205299 65.143303 28.570101 65.540199 28.115499 c
65.936996 27.664 66.420898 27.438299 66.991898 27.438299 c
67.225998 27.438299 67.435898 27.4632 67.621498 27.513 c
67.966904 27.600201 68.256699 27.768299 68.490799 28.017401 c
68.630699 28.160601 68.756302 28.344299 68.867699 28.568501 c
68.981903 28.795799 69.049004 29.001301 69.068901 29.184999 c
68.310898 29.184999 l
68.253799 28.9639 68.156799 28.7693 68.019699 28.6012 c
67.7799 28.3116 67.458702 28.166901 67.056198 28.166901 c
66.625099 28.166901 66.306702 28.319401 66.101196 28.624599 c
65.895599 28.9328 65.785698 29.3407 65.7714 29.8482 c
69.133202 29.8482 l
69.133202 30.3526 69.110298 30.7201 69.064697 30.9505 c
69.013298 31.286699 68.9105 31.580999 68.756302 31.8332 c
68.596397 32.0979 68.3638 32.312698 68.058296 32.477699 c
h
68.122498 31.3895 m
68.236702 31.171499 68.309502 30.8804 68.340897 30.5161 c
65.792801 30.5161 l
65.807098 30.945801 65.934196 31.2992 66.174004 31.5763 c
66.413803 31.856501 66.710701 31.9967 67.064697 31.9967 c
67.558701 31.9967 67.911201 31.7943 68.122498 31.3895 c
h
W*
0 0 132 43 rc
63.944901 33.729919 m
70.133202 33.729919 l
70.133202 26.438299 l
63.944901 26.438299 l
h
f
Q
q
50.670101 32.76255 m
51.186901 32.76255 51.606602 32.625549 51.929199 32.351501 c
52.254601 32.077499 52.450199 31.605801 52.5159 30.936399 c
51.766399 30.936399 l
51.720798 31.2446 51.616501 31.5 51.4538 31.702299 c
51.2911 31.907801 51.0298 32.010601 50.670101 32.010601 c
50.1791 32.010601 49.8279 31.749001 49.6166 31.226 c
49.479599 30.8866 49.411098 30.4678 49.411098 29.969601 c
49.411098 29.4683 49.508099 29.0464 49.702301 28.703899 c
49.8964 28.361401 50.2019 28.1901 50.618698 28.1901 c
50.938499 28.1901 51.191101 28.296 51.376701 28.5077 c
51.565201 28.722601 51.695099 29.015301 51.766399 29.385799 c
52.5159 29.385799 l
52.430199 28.722601 52.216099 28.236799 51.873501 27.9286 c
51.530899 27.6234 51.092701 27.4709 50.5588 27.4709 c
49.959202 27.4709 49.480999 27.709101 49.1241 28.185499 c
48.7673 28.665001 48.588799 29.2628 48.588799 29.978901 c
48.588799 30.857 48.784401 31.5404 49.175499 32.029301 c
49.5667 32.51812 50.064899 32.76255 50.670101 32.76255 c
h
W
0 0 132 43 rc
47.588799 33.76255 m
53.5159 33.76255 l
53.5159 26.4709 l
47.588799 26.4709 l
h
f
Q
q
45.325199 29.184999 m
45.348099 28.9048 45.4123 28.689899 45.517899 28.540501 c
45.712101 28.2696 46.049 28.1341 46.528599 28.1341 c
46.814098 28.1341 47.0653 28.201099 47.282299 28.334999 c
47.499298 28.472 47.6078 28.6821 47.6078 28.9655 c
47.6078 29.1803 47.520699 29.3438 47.3466 29.4559 c
47.235199 29.524401 47.0154 29.6038 46.687099 29.694099 c
46.074699 29.8622 l
45.683498 29.9681 45.395199 30.086399 45.209599 30.217199 c
44.878399 30.4445 44.712799 30.759001 44.712799 31.160601 c
44.712799 31.6339 44.868401 32.016899 45.1796 32.309601 c
45.493698 32.602242 45.914799 32.748581 46.443001 32.748581 c
47.1339 32.748581 47.632099 32.527512 47.937599 32.0854 c
48.128799 31.805099 48.2216 31.503099 48.2159 31.1793 c
47.4879 31.1793 l
47.473598 31.3692 47.412201 31.542 47.303699 31.697701 c
47.126701 31.9188 46.819801 32.029301 46.382999 32.029301 c
46.091801 32.029301 45.870499 31.968599 45.7192 31.8472 c
45.570801 31.7257 45.496498 31.565399 45.496498 31.3661 c
45.496498 31.148199 45.595001 30.973801 45.792 30.843 c
45.9062 30.7652 46.074699 30.696699 46.297401 30.637501 c
46.806999 30.5021 l
47.360802 30.3557 47.731998 30.2141 47.920399 30.077101 c
48.2202 29.8622 48.370098 29.524401 48.370098 29.063601 c
48.370098 28.618299 48.2145 28.233801 47.903301 27.91 c
47.595001 27.5861 47.123901 27.4242 46.490101 27.4242 c
45.807701 27.4242 45.323799 27.5924 45.0383 27.9286 c
44.755699 28.268 44.604301 28.6868 44.5844 29.184999 c
45.325199 29.184999 l
h
W
0 0 132 43 rc
43.5844 33.748581 m
49.370098 33.748581 l
49.370098 26.4242 l
43.5844 26.4242 l
h
f
Q
q
42.244701 32.729919 m
42.570099 32.729919 42.885601 32.645859 43.191101 32.477699 c
43.496601 32.312698 43.729301 32.0979 43.889198 31.8332 c
44.043301 31.580999 44.146099 31.286699 44.197498 30.9505 c
44.243198 30.7201 44.265999 30.3526 44.265999 29.8482 c
40.904301 29.8482 l
40.918499 29.3407 41.0284 28.9328 41.234001 28.624599 c
41.439602 28.319401 41.7579 28.166901 42.188999 28.166901 c
42.591599 28.166901 42.912701 28.3116 43.152599 28.6012 c
43.2896 28.7693 43.3867 28.9639 43.443802 29.184999 c
44.201801 29.184999 l
44.181801 29.001301 44.1147 28.795799 44.0005 28.568501 c
43.889198 28.344299 43.7635 28.160601 43.6236 28.017401 c
43.3895 27.768299 43.099701 27.600201 42.754299 27.513 c
42.568699 27.4632 42.358898 27.438299 42.124802 27.438299 c
41.553799 27.438299 41.069801 27.664 40.673 28.115499 c
40.276199 28.570101 40.077702 29.205299 40.077702 30.021 c
40.077702 30.8244 40.277599 31.4767 40.677299 31.978001 c
41.077 32.479301 41.5994 32.729919 42.244701 32.729919 c
h
43.473801 30.5161 m
43.442299 30.8804 43.369499 31.171499 43.255299 31.3895 c
43.044102 31.7943 42.691502 31.9967 42.197601 31.9967 c
41.843498 31.9967 41.5466 31.856501 41.306801 31.5763 c
41.067001 31.2992 40.939899 30.945801 40.925701 30.5161 c
43.473801 30.5161 l
h
W*
0 0 132 43 rc
39.077702 33.729919 m
45.265999 33.729919 l
45.265999 26.438299 l
39.077702 26.438299 l
h
f
Q
q
37.422798 32.70657 m
37.7826 32.70657 38.0966 32.61005 38.365002 32.417 c
38.510601 32.307999 38.6591 32.1492 38.810398 31.940599 c
38.810398 32.571129 l
39.521301 32.571129 l
39.521301 28.0221 l
39.521301 27.3869 39.4356 26.885599 39.264301 26.5182 c
38.944599 25.839399 38.340698 25.5 37.452801 25.5 c
36.9589 25.5 36.543499 25.621401 36.2066 25.8643 c
35.869701 26.104099 35.681301 26.480801 35.6413 26.9946 c
36.424999 26.9946 l
36.462101 26.770399 36.5364 26.597601 36.647701 26.476101 c
36.821899 26.289301 37.095901 26.1959 37.469898 26.1959 c
38.060902 26.1959 38.4478 26.423201 38.630501 26.8778 c
38.738998 27.145599 38.789001 27.623501 38.780399 28.3116 c
38.626202 28.056299 38.440601 27.8664 38.223701 27.7418 c
38.006699 27.6173 37.719799 27.555 37.3629 27.555 c
36.8661 27.555 36.430698 27.7465 36.056702 28.129499 c
35.6856 28.5156 35.5 29.1523 35.5 30.0397 c
35.5 30.8773 35.687 31.5312 36.061001 32.001301 c
36.437901 32.4715 36.8918 32.70657 37.422798 32.70657 c
h
38.810398 30.1378 m
38.810398 30.757401 38.693298 31.2167 38.459202 31.5156 c
38.225101 31.814501 37.926701 31.964001 37.564201 31.964001 c
37.021702 31.964001 36.6506 31.6868 36.450699 31.132601 c
36.3451 30.8368 36.292301 30.4492 36.292301 29.9697 c
36.292301 29.406099 36.3965 28.9764 36.6049 28.680599 c
36.8162 28.387899 37.098801 28.2416 37.452801 28.2416 c
38.006699 28.2416 38.3964 28.514 38.621899 29.058901 c
38.747601 29.367201 38.810398 29.726801 38.810398 30.1378 c
h
W*
0 0 132 43 rc
34.5 33.70657 m
40.521301 33.70657 l
40.521301 24.5 l
34.5 24.5 l
h
f
Q
q
59.090302 27.6157 0.77079999 6.86095 rc
58.090302 35.47665 m
60.861099 35.47665 l
60.861099 26.6157 l
58.090302 26.6157 l
h
f
Q
q
57.466801 27.6157 0.78369999 4.9787402 rc
56.466801 33.59444 m
59.2505 33.59444 l
59.2505 26.6157 l
56.466801 26.6157 l
h
f
Q
q
57.466801 33.523869 0.78369999 0.95278001 rc
56.466801 35.47665 m
59.2505 35.47665 l
59.2505 32.523869 l
56.466801 32.523869 l
h
f
Q
q
14.4605 18.342501 m
17.9266 15.5357 22.8836 15.5357 26.349701 18.342501 c
25.009501 19.9974 l
22.3248 17.8234 18.485399 17.8234 15.8007 19.9974 c
14.4605 18.342501 l
h
W
0 0 132 43 rc
13.4605 20.9974 m
27.349701 20.9974 l
27.349701 14.5357 l
13.4605 14.5357 l
h
f
Q
q
15.904 21.986601 2.1296 2.8769 rc
14.904 25.863501 m
19.0336 25.863501 l
19.0336 20.986601 l
14.904 20.986601 l
h
f
Q
q
22.511999 21.986601 2.1294999 2.8769 rc
21.511999 25.863501 m
25.6415 25.863501 l
25.6415 20.986601 l
21.511999 20.986601 l
h
f
Q
q
31.5 21 m
31.5 14.6487 26.351299 9.5 20 9.5 c
13.6487 9.5 8.5 14.6487 8.5 21 c
8.5 27.351299 13.6487 32.5 20 32.5 c
26.351299 32.5 31.5 27.351299 31.5 21 c
h
29.370501 21 m
29.370501 15.8248 25.1752 11.6295 20 11.6295 c
14.8248 11.6295 10.6295 15.8248 10.6295 21 c
10.6295 26.1752 14.8248 30.370501 20 30.370501 c
25.1752 30.370501 29.370501 26.1752 29.370501 21 c
h
W*
0 0 132 43 rc
7.5 33.5 m
32.5 33.5 l
32.5 8.5 l
7.5 8.5 l
h
f
ep
end
%%Trailer
%%EOF
