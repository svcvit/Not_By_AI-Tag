%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.2.1 (Build 23C71) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
1 1 1 sc
q
53.926201 31.627701 m
53.6688 31.387899 53.5401 30.9349 53.5401 30.2686 c
53.5401 27.6157 l
52.776299 27.6157 l
52.776299 34.5 l
53.5401 34.5 l
53.5401 31.940599 l
53.7211 32.192799 53.883801 32.3703 54.028 32.473 c
54.2742 32.650501 54.5811 32.739239 54.948898 32.739239 c
55.608002 32.739239 56.055 32.4855 56.289799 31.9779 c
56.417099 31.7008 56.480701 31.316299 56.480701 30.824301 c
56.480701 27.6157 l
55.695702 27.6157 l
55.695702 30.768299 l
55.695702 31.1357 55.653198 31.405001 55.568401 31.5763 c
55.429798 31.8503 55.169498 31.987301 54.787601 31.987301 c
54.470798 31.987301 54.183601 31.867399 53.926201 31.627701 c
h
W
0 0 132 43 rc
51.776299 35.5 m
57.480701 35.5 l
57.480701 26.6157 l
51.776299 26.6157 l
h
f
Q
q
80.9842 32.706539 m
81.3321 32.706539 81.623497 32.625591 81.858299 32.463699 c
81.994102 32.3703 82.1483 32.206799 82.3209 31.973301 c
82.3209 34.5 l
83.055 34.5 l
83.055 27.6157 l
82.3675 27.6157 l
82.3675 28.3116 l
82.189301 28.003401 81.9786 27.7808 81.735298 27.643801 c
81.491997 27.5068 81.213303 27.438299 80.8993 27.438299 c
80.392998 27.438299 79.954498 27.671801 79.5839 28.1388 c
79.213303 28.608999 79.028 29.233299 79.028 30.0117 c
79.028 30.740299 79.196297 31.3708 79.532997 31.9032 c
79.872398 32.438801 80.356201 32.706539 80.9842 32.706539 c
h
79.834198 30.058399 m
79.834198 29.5228 79.9375 29.074499 80.143997 28.713301 c
80.350502 28.3521 80.681503 28.171499 81.137001 28.171499 c
81.490601 28.171499 81.780502 28.3381 82.006798 28.671301 c
82.236 29.0075 82.350601 29.4886 82.350601 30.114401 c
82.350601 30.7465 82.2332 31.2136 81.998398 31.5156 c
81.763603 31.8207 81.473602 31.973301 81.128502 31.973301 c
80.743698 31.973301 80.431099 31.811399 80.190697 31.4876 c
79.953102 31.1637 79.834198 30.6873 79.834198 30.058399 c
h
W*
0 0 132 43 rc
78.028 35.5 m
84.055 35.5 l
84.055 26.438299 l
78.028 26.438299 l
h
f
Q
q
85.673302 32.762562 m
86.258904 32.762562 86.753899 32.547722 87.158401 32.118 c
87.563004 31.6884 87.765198 31.056299 87.765198 30.2218 c
87.765198 29.4154 87.586998 28.7491 87.230598 28.2229 c
86.8741 27.696699 86.321098 27.433599 85.571404 27.433599 c
84.946198 27.433599 84.449799 27.665501 84.082001 28.129499 c
83.714302 28.5965 83.530403 29.2223 83.530403 30.007 c
83.530403 30.8477 83.724197 31.517099 84.111702 32.015301 c
84.499298 32.51347 85.019798 32.762562 85.673302 32.762562 c
h
85.6436 28.157499 m
86.149902 28.157499 86.496498 28.367701 86.683197 28.788 c
86.872704 29.211399 86.967499 29.681601 86.967499 30.1985 c
86.967499 30.665501 86.899597 31.045401 86.763802 31.3381 c
86.548798 31.798901 86.1782 32.029301 85.6521 32.029301 c
85.185303 32.029301 84.845802 31.833099 84.633598 31.4408 c
84.421501 31.0485 84.315399 30.575199 84.315399 30.021 c
84.315399 29.4886 84.421501 29.044901 84.633598 28.689899 c
84.845802 28.334999 85.182503 28.157499 85.6436 28.157499 c
h
W*
0 0 132 43 rc
82.530403 33.762562 m
88.765198 33.762562 l
88.765198 26.433599 l
82.530403 26.433599 l
h
f
Q
q
90.1633 32.762562 m
90.748802 32.762562 91.243896 32.547722 91.648399 32.118 c
92.053001 31.6884 92.255203 31.056299 92.255203 30.2218 c
92.255203 29.4154 92.077003 28.7491 91.720596 28.2229 c
91.364098 27.696699 90.811096 27.433599 90.061401 27.433599 c
89.436203 27.433599 88.939796 27.665501 88.571999 28.129499 c
88.204201 28.5965 88.020401 29.2223 88.020401 30.007 c
88.020401 30.8477 88.214104 31.517099 88.6017 32.015301 c
88.989304 32.51347 89.509804 32.762562 90.1633 32.762562 c
h
90.133499 28.157499 m
90.6399 28.157499 90.986504 28.367701 91.173203 28.788 c
91.362701 29.211399 91.457497 29.681601 91.457497 30.1985 c
91.457497 30.665501 91.389603 31.045401 91.253799 31.3381 c
91.038803 31.798901 90.668198 32.029301 90.141998 32.029301 c
89.675301 32.029301 89.3358 31.833099 89.123596 31.4408 c
88.911499 31.0485 88.805397 30.575199 88.805397 30.021 c
88.805397 29.4886 88.911499 29.044901 89.123596 28.689899 c
89.3358 28.334999 89.672401 28.157499 90.133499 28.157499 c
h
W*
0 0 132 43 rc
87.020401 33.762562 m
93.255203 33.762562 l
93.255203 26.433599 l
87.020401 26.433599 l
h
f
Q
q
113.763 29.184999 m
113.785 28.9048 113.849 28.690001 113.954 28.540501 c
114.146 28.2696 114.48 28.134199 114.955 28.134199 c
115.238 28.134199 115.487 28.201099 115.702 28.334999 c
115.917 28.472 116.024 28.682199 116.024 28.9655 c
116.024 29.180401 115.938 29.3438 115.766 29.4559 c
115.655 29.524401 115.437 29.6038 115.112 29.694099 c
114.505 29.8622 l
114.118 29.9681 113.832 30.086399 113.648 30.217199 c
113.32 30.4445 113.156 30.759001 113.156 31.160601 c
113.156 31.6339 113.31 32.016899 113.618 32.309601 c
113.93 32.602249 114.347 32.748589 114.87 32.748589 c
115.555 32.748589 116.048 32.527531 116.351 32.0854 c
116.541 31.805201 116.633 31.503099 116.627 31.1793 c
115.906 31.1793 l
115.891 31.369301 115.831 31.542101 115.723 31.697701 c
115.548 31.9188 115.244 32.029301 114.811 32.029301 c
114.522 32.029301 114.303 31.968599 114.153 31.8472 c
114.006 31.7258 113.932 31.565399 113.932 31.3661 c
113.932 31.148199 114.03 30.973801 114.225 30.843 c
114.338 30.7652 114.505 30.696699 114.726 30.637501 c
115.231 30.5021 l
115.78 30.355801 116.147 30.2141 116.334 30.077101 c
116.631 29.8622 116.78 29.524401 116.78 29.063601 c
116.78 28.618299 116.626 28.233801 116.317 27.91 c
116.012 27.586201 115.545 27.424299 114.917 27.424299 c
114.241 27.424299 113.761 27.5924 113.478 27.928699 c
113.198 28.268101 113.048 28.6868 113.029 29.184999 c
113.763 29.184999 l
h
W
0 0 132 43 rc
112.029 33.748589 m
117.78 33.748589 l
117.78 26.424299 l
112.029 26.424299 l
h
f
Q
q
119.199 32.729881 m
119.521 32.729881 119.834 32.645809 120.136 32.477699 c
120.439 32.312599 120.67 32.097801 120.828 31.833099 c
120.981 31.5809 121.083 31.286699 121.134 30.950399 c
121.179 30.719999 121.201 30.3526 121.201 29.8482 c
117.87 29.8482 l
117.885 29.3407 117.993 28.9328 118.197 28.6245 c
118.401 28.319401 118.716 28.1668 119.143 28.1668 c
119.542 28.1668 119.861 28.3116 120.098 28.6012 c
120.234 28.7693 120.33 28.9639 120.387 29.184999 c
121.138 29.184999 l
121.118 29.001301 121.051 28.795799 120.938 28.568501 c
120.828 28.344299 120.704 28.160601 120.565 28.017401 c
120.333 27.768299 120.046 27.600201 119.704 27.513 c
119.52 27.4632 119.312 27.4382 119.08 27.4382 c
118.514 27.4382 118.034 27.664 117.641 28.115499 c
117.248 28.570101 117.051 29.2052 117.051 30.021 c
117.051 30.824301 117.249 31.476601 117.645 31.9779 c
118.042 32.479198 118.559 32.729881 119.199 32.729881 c
h
120.416 30.5161 m
120.385 30.8804 120.313 31.171499 120.2 31.3895 c
119.991 31.794201 119.641 31.996599 119.152 31.996599 c
118.801 31.996599 118.507 31.856501 118.269 31.5763 c
118.032 31.2992 117.906 30.945801 117.892 30.5161 c
120.416 30.5161 l
h
W*
0 0 132 43 rc
116.051 33.729881 m
122.201 33.729881 l
122.201 26.4382 l
116.051 26.4382 l
h
f
Q
q
123.204 32.538391 m
122.964 32.410702 122.736 32.2006 122.521 31.9079 c
122.521 32.61779 l
121.796 32.61779 l
121.796 27.6157 l
122.559 27.6157 l
122.559 30.235901 l
122.559 30.562799 122.578 30.8134 122.615 30.987801 c
122.654 31.1653 122.738 31.3365 122.865 31.501499 c
123.023 31.707001 123.207 31.844 123.417 31.9125 c
123.532 31.952999 123.681 31.973301 123.862 31.973301 c
124.218 31.973301 124.465 31.8176 124.6 31.506201 c
124.682 31.319401 124.723 31.0734 124.723 30.768299 c
124.723 27.6157 l
125.5 27.6157 l
125.5 30.824301 l
125.5 31.328699 125.438 31.7164 125.313 31.987301 c
125.087 32.4823 124.651 32.729881 124.006 32.729881 c
123.712 32.729881 123.445 32.66605 123.204 32.538391 c
h
W
0 0 132 43 rc
120.796 33.729881 m
126.5 33.729881 l
126.5 26.6157 l
120.796 26.6157 l
h
f
Q
q
109.638 30.987801 m
109.601 30.8134 109.582 30.562799 109.582 30.235901 c
109.582 27.6157 l
108.819 27.6157 l
108.819 32.61779 l
109.544 32.61779 l
109.544 31.9079 l
109.759 32.2006 109.987 32.410702 110.227 32.538391 c
110.468 32.66605 110.735 32.729881 111.029 32.729881 c
111.674 32.729881 112.11 32.4823 112.336 31.987301 c
112.461 31.7164 112.523 31.328699 112.523 30.824301 c
112.523 27.6157 l
111.746 27.6157 l
111.746 30.768299 l
111.746 31.0734 111.705 31.319401 111.623 31.506201 c
111.488 31.8176 111.241 31.973301 110.885 31.973301 c
110.704 31.973301 110.555 31.952999 110.44 31.9125 c
110.23 31.844 110.046 31.707001 109.888 31.501499 c
109.761 31.3365 109.677 31.1653 109.638 30.987801 c
h
W
0 0 132 43 rc
107.819 33.729881 m
113.523 33.729881 l
113.523 26.6157 l
107.819 26.6157 l
h
f
Q
q
106.221 32.729881 m
106.544 32.729881 106.856 32.645809 107.159 32.477699 c
107.462 32.312599 107.692 32.097801 107.85 31.833099 c
108.003 31.5809 108.105 31.286699 108.156 30.950399 c
108.201 30.719999 108.224 30.3526 108.224 29.8482 c
104.893 29.8482 l
104.907 29.3407 105.016 28.9328 105.22 28.6245 c
105.423 28.319401 105.739 28.1668 106.166 28.1668 c
106.565 28.1668 106.883 28.3116 107.121 28.6012 c
107.256 28.7693 107.353 28.9639 107.409 29.184999 c
108.16 29.184999 l
108.14 29.001301 108.074 28.795799 107.961 28.568501 c
107.85 28.344299 107.726 28.160601 107.587 28.017401 c
107.355 27.768299 107.068 27.600201 106.726 27.513 c
106.542 27.4632 106.334 27.4382 106.102 27.4382 c
105.536 27.4382 105.057 27.664 104.664 28.115499 c
104.271 28.570101 104.074 29.2052 104.074 30.021 c
104.074 30.824301 104.272 31.476601 104.668 31.9779 c
105.064 32.479198 105.582 32.729881 106.221 32.729881 c
h
107.439 30.5161 m
107.408 30.8804 107.336 31.171499 107.222 31.3895 c
107.013 31.794201 106.664 31.996599 106.174 31.996599 c
105.824 31.996599 105.529 31.856501 105.292 31.5763 c
105.054 31.2992 104.928 30.945801 104.914 30.5161 c
107.439 30.5161 l
h
W*
0 0 132 43 rc
103.074 33.729881 m
109.224 33.729881 l
109.224 26.4382 l
103.074 26.4382 l
h
f
Q
q
98.553299 31.6043 m
98.318497 31.358299 98.201103 30.913099 98.201103 30.268499 c
98.201103 27.6157 l
97.437302 27.6157 l
97.437302 32.61779 l
98.192596 32.61779 l
98.192596 31.9079 l
98.373596 32.1539 98.537697 32.332901 98.684799 32.445 c
98.9366 32.634911 99.222298 32.729881 99.542 32.729881 c
99.904099 32.729881 100.1955 32.631802 100.4161 32.4356 c
100.541 32.323502 100.654 32.158501 100.756 31.940599 c
100.925 32.208302 101.125 32.406101 101.354 32.533718 c
101.583 32.66449 101.84 32.729881 102.126 32.729881 c
102.737 32.729881 103.153 32.487 103.374 32.001301 c
103.493 31.7397 103.552 31.387899 103.552 30.945801 c
103.552 27.6157 l
102.758 27.6157 l
102.758 31.0905 l
102.758 31.4237 102.682 31.652599 102.529 31.7771 c
102.379 31.9016 102.196 31.9639 101.978 31.9639 c
101.678 31.9639 101.419 31.853399 101.201 31.632299 c
100.986 31.4112 100.879 31.042299 100.879 30.5254 c
100.879 27.6157 l
100.1021 27.6157 l
100.1021 30.8804 l
100.1021 31.219801 100.0653 31.4673 99.991798 31.622999 c
99.875801 31.856501 99.659401 31.973301 99.342598 31.973301 c
99.054001 31.973301 98.790901 31.8503 98.553299 31.6043 c
h
W
0 0 132 43 rc
96.437302 33.729881 m
104.552 33.729881 l
104.552 26.6157 l
96.437302 26.6157 l
h
f
Q
q
93.914398 31.431499 m
93.707802 31.160601 93.604599 30.8477 93.604599 30.492701 c
93.604599 27.6157 l
92.840797 27.6157 l
92.840797 32.61779 l
93.566399 32.61779 l
93.566399 31.753799 l
93.625801 31.9219 93.7715 32.125801 94.003502 32.365601 c
94.235397 32.608452 94.5028 32.729881 94.805496 32.729881 c
94.819603 32.729881 94.843597 32.728321 94.877602 32.725208 c
94.911499 32.722092 94.969498 32.71587 95.051598 32.706532 c
95.051598 31.819099 l
95.006302 31.828501 94.963898 31.8347 94.924301 31.837799 c
94.887497 31.8409 94.846497 31.842501 94.801201 31.842501 c
94.416496 31.842501 94.120903 31.7055 93.914398 31.431499 c
h
W
0 0 132 43 rc
91.840797 33.729881 m
96.051598 33.729881 l
96.051598 26.6157 l
91.840797 26.6157 l
h
f
Q
q
74.198502 32.538391 m
73.958 32.410702 73.730301 32.2006 73.515297 31.9079 c
73.515297 32.61779 l
72.789703 32.61779 l
72.789703 27.6157 l
73.553497 27.6157 l
73.553497 30.235901 l
73.553497 30.562799 73.571899 30.8134 73.608704 30.987801 c
73.6483 31.1653 73.731697 31.3365 73.859001 31.501499 c
74.017403 31.707001 74.201302 31.844 74.410698 31.9125 c
74.526604 31.952999 74.675201 31.973301 74.856201 31.973301 c
75.212601 31.973301 75.458801 31.8176 75.594498 31.506201 c
75.676598 31.319401 75.717598 31.0734 75.717598 30.768299 c
75.717598 27.6157 l
76.494102 27.6157 l
76.494102 30.824301 l
76.494102 31.328699 76.4319 31.7164 76.307404 31.987301 c
76.0811 32.4823 75.6455 32.729881 75.000504 32.729881 c
74.706299 32.729881 74.438904 32.66605 74.198502 32.538391 c
h
W
0 0 132 43 rc
71.789703 33.729881 m
77.494102 33.729881 l
77.494102 26.6157 l
71.789703 26.6157 l
h
f
Q
q
71.129997 32.477699 m
70.827301 32.645809 70.514702 32.729881 70.1922 32.729881 c
69.552902 32.729881 69.035202 32.479198 68.639099 31.9779 c
68.243103 31.476601 68.045097 30.824301 68.045097 30.021 c
68.045097 29.2052 68.241699 28.570101 68.634903 28.115499 c
69.028099 27.664 69.507599 27.4382 70.073402 27.4382 c
70.305397 27.4382 70.513298 27.4632 70.697197 27.513 c
71.039497 27.600201 71.326599 27.768299 71.558601 28.017401 c
71.697197 28.160601 71.821701 28.344299 71.931999 28.568501 c
72.045097 28.795799 72.111603 29.001301 72.131401 29.184999 c
71.380302 29.184999 l
71.323799 28.9639 71.2276 28.7693 71.091797 28.6012 c
70.854202 28.3116 70.535896 28.1668 70.137001 28.1668 c
69.7099 28.1668 69.394501 28.319401 69.190804 28.6245 c
68.987099 28.9328 68.878197 29.3407 68.863998 29.8482 c
72.195099 29.8482 l
72.195099 30.3526 72.172401 30.719999 72.127197 30.950399 c
72.076302 31.286699 71.974403 31.5809 71.821701 31.833099 c
71.6632 32.097801 71.432701 32.312599 71.129997 32.477699 c
h
71.193604 31.3895 m
71.306801 31.171499 71.378899 30.8804 71.410004 30.5161 c
68.8853 30.5161 l
68.899399 30.945801 69.025299 31.2992 69.262901 31.5763 c
69.500504 31.856501 69.794701 31.996599 70.1455 31.996599 c
70.634903 31.996599 70.984299 31.794201 71.193604 31.3895 c
h
W*
0 0 132 43 rc
67.045097 33.729881 m
73.195099 33.729881 l
73.195099 26.4382 l
67.045097 26.4382 l
h
f
Q
q
65.888901 28.5452 m
64.675301 32.617809 l
63.788399 32.617809 l
65.4645 27.6157 l
66.279297 27.6157 l
67.993599 32.617809 l
67.1576 32.617809 l
65.888901 28.5452 l
h
W
0 0 132 43 rc
62.788399 33.617809 m
68.993599 33.617809 l
68.993599 26.6157 l
62.788399 26.6157 l
h
f
Q
q
62.642502 32.477699 m
62.339802 32.645809 62.027199 32.729881 61.7047 32.729881 c
61.065399 32.729881 60.547699 32.479198 60.1516 31.9779 c
59.7556 31.476601 59.557499 30.824301 59.557499 30.021 c
59.557499 29.2052 59.7542 28.570101 60.1474 28.115499 c
60.5406 27.664 61.0201 27.4382 61.585899 27.4382 c
61.817799 27.4382 62.025799 27.4632 62.209599 27.513 c
62.551899 27.600201 62.8391 27.768299 63.070999 28.017401 c
63.209702 28.160601 63.334099 28.344299 63.4445 28.568501 c
63.557598 28.795799 63.6241 29.001301 63.643902 29.184999 c
62.892799 29.184999 l
62.836201 28.9639 62.740101 28.7693 62.604301 28.6012 c
62.3666 28.3116 62.048401 28.1668 61.649502 28.1668 c
61.222401 28.1668 60.906898 28.319401 60.7033 28.6245 c
60.499599 28.9328 60.390701 29.3407 60.376499 29.8482 c
63.7075 29.8482 l
63.7075 30.3526 63.684898 30.719999 63.639702 30.950399 c
63.588699 31.286699 63.4869 31.5809 63.334099 31.833099 c
63.175701 32.097801 62.945202 32.312599 62.642502 32.477699 c
h
62.7061 31.3895 m
62.819302 31.171499 62.891399 30.8804 62.922501 30.5161 c
60.397701 30.5161 l
60.4119 30.945801 60.5378 31.2992 60.775398 31.5763 c
61.013 31.856501 61.307201 31.996599 61.658001 31.996599 c
62.1474 31.996599 62.496799 31.794201 62.7061 31.3895 c
h
W*
0 0 132 43 rc
58.557499 33.729881 m
64.707497 33.729881 l
64.707497 26.4382 l
58.557499 26.4382 l
h
f
Q
q
58.449699 32.365601 m
58.2178 32.125801 58.072102 31.9219 58.012699 31.753799 c
58.012699 32.61779 l
57.286999 32.61779 l
57.286999 27.6157 l
58.0508 27.6157 l
58.0508 30.492701 l
58.0508 30.8477 58.154099 31.160601 58.3606 31.431499 c
58.567101 31.7055 58.862701 31.842501 59.247501 31.842501 c
59.292702 31.842501 59.333801 31.8409 59.370499 31.837799 c
59.410099 31.8347 59.452599 31.828501 59.497799 31.819099 c
59.497799 32.706532 l
59.415798 32.71587 59.3578 32.722092 59.323898 32.725208 c
59.289902 32.728321 59.2659 32.729881 59.251701 32.729881 c
58.949001 32.729881 58.681702 32.608452 58.449699 32.365601 c
h
W
0 0 132 43 rc
56.286999 33.729881 m
60.497799 33.729881 l
60.497799 26.6157 l
56.286999 26.6157 l
h
f
Q
q
50.530899 32.762562 m
51.0429 32.762562 51.458698 32.625561 51.7784 32.351601 c
52.100899 32.077599 52.294701 31.605801 52.359699 30.936399 c
51.617199 30.936399 l
51.571899 31.244699 51.468601 31.5 51.3074 31.7024 c
51.146099 31.9079 50.887299 32.010601 50.530899 32.010601 c
50.0443 32.010601 49.696301 31.7491 49.487 31.226 c
49.3512 30.8866 49.283298 30.4678 49.283298 29.969601 c
49.283298 29.4683 49.379501 29.0464 49.571899 28.703899 c
49.764198 28.361401 50.066898 28.190201 50.4799 28.190201 c
50.796799 28.190201 51.0471 28.296 51.230999 28.507799 c
51.417702 28.722601 51.546398 29.015301 51.617199 29.385799 c
52.359699 29.385799 l
52.274899 28.722601 52.062698 28.2369 51.723202 27.9286 c
51.383801 27.623501 50.949501 27.4709 50.420502 27.4709 c
49.8265 27.4709 49.3526 27.709101 48.999001 28.185499 c
48.645401 28.665001 48.468601 29.2628 48.468601 29.979 c
48.468601 30.857 48.662399 31.540501 49.0499 32.029301 c
49.4375 32.518139 49.931099 32.762562 50.530899 32.762562 c
h
W
0 0 132 43 rc
47.468601 33.762562 m
53.359699 33.762562 l
53.359699 26.4709 l
47.468601 26.4709 l
h
f
Q
q
45.234901 29.184999 m
45.2575 28.9048 45.321201 28.690001 45.4258 28.540501 c
45.618198 28.2696 45.952 28.134199 46.427299 28.134199 c
46.710098 28.134199 46.959099 28.201099 47.174099 28.334999 c
47.389099 28.472 47.496601 28.682199 47.496601 28.9655 c
47.496601 29.180401 47.410301 29.3438 47.237701 29.4559 c
47.127399 29.524401 46.909599 29.6038 46.584301 29.694099 c
45.977501 29.8622 l
45.589901 29.9681 45.304199 30.086399 45.1203 30.217199 c
44.792099 30.4445 44.628101 30.759001 44.628101 31.160601 c
44.628101 31.6339 44.7822 32.016899 45.090599 32.309601 c
45.401798 32.602249 45.819 32.748589 46.3424 32.748589 c
47.027 32.748589 47.520599 32.527531 47.823299 32.0854 c
48.012901 31.805201 48.104801 31.503099 48.099098 31.1793 c
47.3778 31.1793 l
47.363602 31.369301 47.302799 31.542101 47.195301 31.697701 c
47.019901 31.9188 46.715801 32.029301 46.283001 32.029301 c
45.9944 32.029301 45.7752 31.968599 45.625301 31.8472 c
45.478199 31.7258 45.404598 31.565399 45.404598 31.3661 c
45.404598 31.148199 45.502201 30.973801 45.697399 30.843 c
45.8106 30.7652 45.977501 30.696699 46.198101 30.637501 c
46.703098 30.5021 l
47.2519 30.355801 47.619598 30.2141 47.806301 30.077101 c
48.103401 29.8622 48.2519 29.524401 48.2519 29.063601 c
48.2519 28.618299 48.097698 28.233801 47.789398 27.91 c
47.483898 27.586201 47.017101 27.424299 46.389099 27.424299 c
45.713001 27.424299 45.233501 27.5924 44.9506 27.928699 c
44.670502 28.268101 44.520599 28.6868 44.500801 29.184999 c
45.234901 29.184999 l
h
W
0 0 132 43 rc
43.500801 33.748589 m
49.2519 33.748589 l
49.2519 26.424299 l
43.500801 26.424299 l
h
f
Q
q
42.183201 32.729881 m
42.505699 32.729881 42.818298 32.645809 43.120998 32.477699 c
43.423698 32.312599 43.654202 32.097801 43.812599 31.833099 c
43.965401 31.5809 44.0672 31.286699 44.118198 30.950399 c
44.163399 30.719999 44.1861 30.3526 44.1861 29.8482 c
40.855 29.8482 l
40.869202 29.3407 40.9781 28.9328 41.181801 28.6245 c
41.385399 28.319401 41.700901 28.1668 42.127998 28.1668 c
42.526901 28.1668 42.8452 28.3116 43.082802 28.6012 c
43.218601 28.7693 43.3148 28.9639 43.3713 29.184999 c
44.122398 29.184999 l
44.1026 29.001301 44.036098 28.795799 43.923 28.568501 c
43.812599 28.344299 43.688202 28.160601 43.549599 28.017401 c
43.3176 27.768299 43.030499 27.600201 42.688202 27.513 c
42.504299 27.4632 42.296398 27.4382 42.0644 27.4382 c
41.4986 27.4382 41.0191 27.664 40.6259 28.115499 c
40.2327 28.570101 40.036098 29.2052 40.036098 30.021 c
40.036098 30.824301 40.2341 31.476601 40.6301 31.9779 c
41.026199 32.479198 41.5439 32.729881 42.183201 32.729881 c
h
43.401001 30.5161 m
43.3699 30.8804 43.297798 31.171499 43.184601 31.3895 c
42.9753 31.794201 42.6259 31.996599 42.136501 31.996599 c
41.785702 31.996599 41.491501 31.856501 41.253899 31.5763 c
41.0163 31.2992 40.8904 30.945801 40.876202 30.5161 c
43.401001 30.5161 l
h
W*
0 0 132 43 rc
39.036098 33.729881 m
45.1861 33.729881 l
45.1861 26.4382 l
39.036098 26.4382 l
h
f
Q
q
37.4053 32.706532 m
37.7617 32.706532 38.072899 32.610001 38.338799 32.417 c
38.483101 32.307999 38.630199 32.1492 38.780102 31.940599 c
38.780102 32.571079 l
39.484501 32.571079 l
39.484501 28.021999 l
39.484501 27.3869 39.399601 26.885599 39.2299 26.5182 c
38.913101 25.839399 38.3148 25.5 37.435001 25.5 c
36.945599 25.5 36.534 25.621401 36.200199 25.8643 c
35.866299 26.104 35.6796 26.480801 35.639999 26.994499 c
36.416599 26.994499 l
36.4533 26.770399 36.526901 26.597601 36.637199 26.476101 c
36.809799 26.289301 37.081402 26.1959 37.4519 26.1959 c
38.037498 26.1959 38.420799 26.423201 38.601898 26.8778 c
38.7094 27.145599 38.7589 27.623501 38.750401 28.3116 c
38.597698 28.056299 38.413799 27.8664 38.198799 27.7418 c
37.983799 27.6173 37.699501 27.555 37.345901 27.555 c
36.8536 27.555 36.422199 27.7465 36.051601 28.129499 c
35.683899 28.5156 35.5 29.1523 35.5 30.0397 c
35.5 30.8773 35.685299 31.531099 36.055901 32.001301 c
36.429298 32.471401 36.879101 32.706532 37.4053 32.706532 c
h
38.780102 30.1378 m
38.780102 30.757401 38.664101 31.2166 38.432201 31.5156 c
38.200199 31.814501 37.904598 31.9639 37.5453 31.9639 c
37.007801 31.9639 36.639999 31.6868 36.442001 31.132601 c
36.337399 30.8368 36.285 30.4491 36.285 29.969601 c
36.285 29.406099 36.388302 28.9764 36.594799 28.680599 c
36.8041 28.387899 37.084202 28.2416 37.435001 28.2416 c
37.983799 28.2416 38.3699 28.514 38.593399 29.058901 c
38.717899 29.3671 38.780102 29.726801 38.780102 30.1378 c
h
W*
0 0 132 43 rc
34.5 33.706532 m
40.484501 33.706532 l
40.484501 24.5 l
34.5 24.5 l
h
f
Q
q
74.624001 12.1154 m
74.265297 11.5627 73.856796 11.161 73.398201 10.9103 c
72.939697 10.6595 72.3694 10.5342 71.6875 10.5342 c
70.564598 10.5342 69.618103 10.9729 68.848 11.8504 c
68.083702 12.7336 67.701599 13.8647 67.701599 15.2436 c
67.701599 16.8333 68.077797 18.084 68.830299 18.995701 c
69.588699 19.9074 70.599899 20.363199 71.8638 20.363199 c
72.445801 20.363199 72.963203 20.2379 73.415802 19.9872 c
73.8685 19.742201 74.235901 19.400299 74.518097 18.9615 c
74.518097 23.406 l
77.066597 23.406 l
77.066597 10.8248 l
74.624001 10.8248 l
74.624001 12.1154 l
h
70.294197 15.4231 m
70.294197 14.5627 70.470497 13.8761 70.823303 13.3632 c
71.170097 12.8447 71.699203 12.5855 72.410599 12.5855 c
73.121902 12.5855 73.662804 12.8419 74.033096 13.3547 c
74.403503 13.8675 74.588699 14.5313 74.588699 15.3462 c
74.588699 16.4858 74.291801 17.3006 73.697998 17.7906 c
73.333504 18.086901 72.910301 18.235001 72.4282 18.235001 c
71.693298 18.235001 71.152496 17.964399 70.805603 17.4231 c
70.464699 16.887501 70.294197 16.2208 70.294197 15.4231 c
h
W*
0 0 132 43 rc
66.701599 24.406 m
78.066597 24.406 l
78.066597 9.5341997 l
66.701599 9.5341997 l
h
f
Q
q
63.103001 10.6966 m
64.293503 10.7393 l
64.293503 12.5598 l
64.140198 12.5494 l
64.037804 12.5427 l
63.799702 12.5427 l
63.2882 12.5427 62.982498 12.5883 62.882599 12.6795 c
62.7826 12.7764 62.7327 13.0157 62.7327 13.3974 c
62.7327 18.320499 l
64.293503 18.320499 l
64.293503 20.055599 l
62.7327 20.055599 l
62.7327 22.653799 l
60.245899 22.653799 l
60.245899 20.055599 l
58.905499 20.055599 l
58.905499 18.320499 l
60.245899 18.320499 l
60.245899 12.5855 l
60.245899 12.0043 60.387001 11.5741 60.669201 11.2949 c
61.104198 10.8561 61.915501 10.6567 63.103001 10.6966 c
h
W
0 0 132 43 rc
57.905499 23.653799 m
65.293503 23.653799 l
65.293503 9.6567001 l
57.905499 9.6567001 l
h
f
Q
q
58.970798 13.5598 m
58.906101 13.0071 58.6092 12.4459 58.080101 11.8761 c
57.257099 10.9701 56.104801 10.5171 54.623402 10.5171 c
53.4006 10.5171 52.3218 10.8989 51.387001 11.6624 c
50.452301 12.4259 49.984901 13.6681 49.984901 15.3889 c
49.984901 17.0014 50.4053 18.2379 51.245998 19.098301 c
52.092499 19.9587 53.1889 20.388901 54.535198 20.388901 c
55.334702 20.388901 56.054901 20.243601 56.695702 19.952999 c
57.336498 19.662399 57.865501 19.203699 58.282902 18.5769 c
58.659199 18.0242 58.903198 17.3832 59.0149 16.653799 c
59.079498 16.2265 59.105999 15.6111 59.0942 14.8077 c
52.5158 14.8077 l
52.551102 13.8732 52.853802 13.2179 53.424099 12.8419 c
53.770901 12.6083 54.188301 12.4915 54.6763 12.4915 c
55.1936 12.4915 55.613899 12.6339 55.937302 12.9188 c
56.113602 13.0726 56.269402 13.2863 56.404701 13.5598 c
58.970798 13.5598 l
h
56.484001 16.414499 m
56.442902 17.058399 56.240002 17.545601 55.875599 17.876101 c
55.516899 18.212299 55.070202 18.380301 54.535198 18.380301 c
53.953201 18.380301 53.5005 18.203699 53.1772 17.850401 c
52.859699 17.4972 52.659801 17.018499 52.577499 16.414499 c
56.484001 16.414499 l
h
W*
0 0 132 43 rc
48.984901 21.388901 m
60.105999 21.388901 l
60.105999 9.5171003 l
48.984901 9.5171003 l
h
f
Q
q
41.0061 18.337601 m
40.153702 18.337601 39.568802 17.9872 39.251301 17.286301 c
39.0867 16.916 39.004398 16.443001 39.004398 15.8675 c
39.004398 10.8248 l
36.5 10.8248 l
36.5 20.123899 l
38.924999 20.123899 l
38.924999 18.764999 l
39.248402 19.243601 39.5541 19.588301 39.842098 19.799101 c
40.359501 20.1752 41.014999 20.363199 41.808601 20.363199 c
42.802101 20.363199 43.6134 20.109699 44.2425 19.6026 c
44.877399 19.101101 45.194801 18.266399 45.194801 17.098301 c
45.194801 10.8248 l
42.6199 10.8248 l
42.6199 16.491501 l
42.6199 16.981501 42.552299 17.3575 42.417099 17.619699 c
42.1702 18.098301 41.699902 18.337601 41.0061 18.337601 c
h
W
0 0 132 43 rc
35.5 21.363199 m
46.194801 21.363199 l
46.194801 9.8247995 l
35.5 9.8247995 l
h
f
Q
q
101.527 16.9359 m
101.874 17.5741 102.553 17.8932 103.564 17.8932 c
103.64 17.8932 103.74 17.890301 103.864 17.8846 c
103.987 17.878901 104.128 17.8675 104.287 17.850401 c
104.287 20.346201 l
104.175 20.3519 104.102 20.3547 104.066 20.3547 c
104.037 20.360399 103.999 20.363199 103.952 20.363199 c
103.199 20.363199 102.588 20.1724 102.118 19.7906 c
101.83 19.5627 101.492 19.138201 101.104 18.517099 c
101.104 20.141001 l
98.705002 20.141001 l
98.705002 10.8248 l
101.236 10.8248 l
101.236 15.2778 l
101.236 16.0242 101.333 16.5769 101.527 16.9359 c
h
W
0 0 132 43 rc
97.705002 21.363199 m
105.287 21.363199 l
105.287 9.8247995 l
97.705002 9.8247995 l
h
f
Q
q
96.609703 18.9615 m
97.420998 17.9758 97.826599 16.810499 97.826599 15.4658 c
97.826599 14.0983 97.420998 12.9274 96.609703 11.953 c
95.798401 10.9843 94.566803 10.5 92.914902 10.5 c
91.262901 10.5 90.031303 10.9843 89.220001 11.953 c
88.408699 12.9274 88.003098 14.0983 88.003098 15.4658 c
88.003098 16.810499 88.408699 17.9758 89.220001 18.9615 c
90.031303 19.9473 91.262901 20.440201 92.914902 20.440201 c
94.566803 20.440201 95.798401 19.9473 96.609703 18.9615 c
h
92.905998 18.380301 m
92.171204 18.380301 91.603897 18.126801 91.204102 17.619699 c
90.810204 17.1182 90.613297 16.400299 90.613297 15.4658 c
90.613297 14.5313 90.810204 13.8105 91.204102 13.3034 c
91.603897 12.7963 92.171204 12.5427 92.905998 12.5427 c
93.6409 12.5427 94.205299 12.7963 94.599098 13.3034 c
94.992996 13.8105 95.190002 14.5313 95.190002 15.4658 c
95.190002 16.400299 94.992996 17.1182 94.599098 17.619699 c
94.205299 18.126801 93.6409 18.380301 92.905998 18.380301 c
h
W*
0 0 132 43 rc
87.003098 21.440201 m
98.826599 21.440201 l
98.826599 9.5 l
87.003098 9.5 l
h
f
Q
q
87.689102 15.4658 m
87.689102 16.810499 87.283501 17.9758 86.472198 18.9615 c
85.660896 19.9473 84.429298 20.440201 82.777298 20.440201 c
81.125397 20.440201 79.893799 19.9473 79.082497 18.9615 c
78.271202 17.9758 77.865601 16.810499 77.865601 15.4658 c
77.865601 14.0983 78.271202 12.9274 79.082497 11.953 c
79.893799 10.9843 81.125397 10.5 82.777298 10.5 c
84.429298 10.5 85.660896 10.9843 86.472198 11.953 c
87.283501 12.9274 87.689102 14.0983 87.689102 15.4658 c
h
81.066597 17.619699 m
81.4664 18.126801 82.033699 18.380301 82.768501 18.380301 c
83.503403 18.380301 84.067802 18.126801 84.461601 17.619699 c
84.855499 17.1182 85.052498 16.400299 85.052498 15.4658 c
85.052498 14.5313 84.855499 13.8105 84.461601 13.3034 c
84.067802 12.7963 83.503403 12.5427 82.768501 12.5427 c
82.033699 12.5427 81.4664 12.7963 81.066597 13.3034 c
80.672699 13.8105 80.4758 14.5313 80.4758 15.4658 c
80.4758 16.400299 80.672699 17.1182 81.066597 17.619699 c
h
W*
0 0 132 43 rc
76.865601 21.440201 m
88.689102 21.440201 l
88.689102 9.5 l
76.865601 9.5 l
h
f
Q
q
114.575 23.181801 m
119.133 10.942 l
116.216 10.942 l
115.387 13.458 l
110.644 13.458 l
109.754 10.942 l
106.941 10.942 l
111.535 23.181801 l
114.575 23.181801 l
h
114.636 15.5672 m
113.029 20.3834 l
111.369 15.5672 l
114.636 15.5672 l
h
W*
0 0 132 43 rc
105.941 24.181801 m
120.133 24.181801 l
120.133 9.9420004 l
105.941 9.9420004 l
h
f
Q
q
46.655102 21.2521 2.5485001 2.2479 rc
45.655102 24.5 m
50.203602 24.5 l
50.203602 20.2521 l
45.655102 20.2521 l
h
f
Q
q
46.655102 10.8248 2.5485001 9.3162003 rc
45.655102 21.141001 m
50.203602 21.141001 l
50.203602 9.8247995 l
45.655102 9.8247995 l
h
f
Q
q
121.427 21.0998 m
121.427 13.0211 l
119.841 13.0211 l
119.841 10.9391 l
125.5 10.9391 l
125.5 13.0211 l
124.099 13.0211 l
124.099 21.0998 l
125.5 21.0998 l
125.5 23.181801 l
119.841 23.181801 l
119.841 21.0998 l
121.427 21.0998 l
h
W
0 0 132 43 rc
118.841 24.181801 m
126.5 24.181801 l
126.5 9.9391003 l
118.841 9.9391003 l
h
f
Q
q
14.4605 18.342501 m
17.9266 15.5357 22.8836 15.5357 26.349701 18.342501 c
25.009501 19.9974 l
22.3248 17.8234 18.485399 17.8234 15.8007 19.9974 c
14.4605 18.342501 l
h
W
0 0 132 43 rc
13.4605 20.9974 m
27.349701 20.9974 l
27.349701 14.5357 l
13.4605 14.5357 l
h
f
Q
q
15.904 21.986601 2.1296 2.8769 rc
14.904 25.863501 m
19.0336 25.863501 l
19.0336 20.986601 l
14.904 20.986601 l
h
f
Q
q
22.511999 21.986601 2.1294999 2.8769 rc
21.511999 25.863501 m
25.6415 25.863501 l
25.6415 20.986601 l
21.511999 20.986601 l
h
f
Q
q
31.5 21 m
31.5 14.6487 26.351299 9.5 20 9.5 c
13.6487 9.5 8.5 14.6487 8.5 21 c
8.5 27.351299 13.6487 32.5 20 32.5 c
26.351299 32.5 31.5 27.351299 31.5 21 c
h
29.370501 21 m
29.370501 15.8248 25.1752 11.6295 20 11.6295 c
14.8248 11.6295 10.6295 15.8248 10.6295 21 c
10.6295 26.1752 14.8248 30.370501 20 30.370501 c
25.1752 30.370501 29.370501 26.1752 29.370501 21 c
h
W*
0 0 132 43 rc
7.5 33.5 m
32.5 33.5 l
32.5 8.5 l
7.5 8.5 l
h
f
ep
end
%%Trailer
%%EOF
