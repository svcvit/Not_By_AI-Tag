%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 12.6 (Build 21G115) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
1 1 1 sc
q
112.472 14.0772 m
115.252 14.0772 l
113.884 18.8078 l
112.472 14.0772 l
h
112.613 21.5564 m
115.2 21.5564 l
119.081 9.5341997 l
116.598 9.5341997 l
115.891 12.0055 l
111.855 12.0055 l
111.096 9.5341997 l
108.703 9.5341997 l
112.613 21.5564 l
h
W
0 0 132 43 rc
107.703 22.5564 m
120.081 22.5564 l
120.081 8.5341997 l
107.703 8.5341997 l
h
f
Q
q
121.033 9.5341997 2.2739999 12.0222 rc
120.033 22.5564 m
124.307 22.5564 l
124.307 8.5341997 l
120.033 8.5341997 l
h
f
Q
q
119.683 19.5114 4.8169999 2.0450001 rc
118.683 22.5564 m
125.5 22.5564 l
125.5 18.5114 l
118.683 18.5114 l
h
f
Q
q
119.683 9.5313997 4.8169999 2.0450001 rc
118.683 12.5764 m
125.5 12.5764 l
125.5 8.5313997 l
118.683 8.5313997 l
h
f
Q
q
36.5 21.659401 m
38.603199 21.659401 l
38.603199 15.116 l
41.269798 18.494801 l
43.921299 18.494801 l
41.059399 15.0583 l
44.034 9.5532999 l
41.450001 9.5532999 l
39.489601 13.3936 l
38.603199 12.38 l
38.603199 9.5532999 l
36.5 9.5532999 l
36.5 21.659401 l
h
W
0 0 132 43 rc
35.5 22.659401 m
45.034 22.659401 l
45.034 8.5532999 l
35.5 8.5532999 l
h
f
Q
q
48.676998 18.7668 m
49.182701 18.7668 49.6409 18.6707 50.051601 18.478399 c
50.467201 18.2861 50.807701 17.9921 51.073101 17.5966 c
51.2985 17.2614 51.436199 16.9153 51.486198 16.558201 c
51.536301 16.2066 51.561401 15.6297 51.561401 14.8276 c
51.561401 9.5532999 l
49.3755 9.5532999 l
49.3755 15.0171 l
49.3755 15.5006 49.3004 15.8907 49.1502 16.1873 c
48.954899 16.6049 48.584301 16.8137 48.038502 16.8137 c
47.472599 16.8137 47.042 16.6049 46.746498 16.1873 c
46.4561 15.7753 46.310902 15.1847 46.310902 14.4155 c
46.310902 9.5532999 l
44.177601 9.5532999 l
44.177601 21.659401 l
46.310902 21.659401 l
46.310902 17.365801 l
46.6213 17.8878 46.979401 18.250401 47.384998 18.4536 c
47.795601 18.662399 48.226299 18.7668 48.676998 18.7668 c
h
W
0 0 132 43 rc
43.177601 22.659401 m
52.561401 22.659401 l
52.561401 8.5532999 l
43.177601 8.5532999 l
h
f
Q
q
58.729099 19.747499 m
56.986401 19.747499 l
56.009899 21.132 l
55.025902 19.747499 l
53.283298 19.747499 l
55.0485 22.211599 l
56.971401 22.211599 l
58.729099 19.747499 l
h
W
0 0 132 43 rc
52.283298 23.211599 m
59.729099 23.211599 l
59.729099 18.747499 l
52.283298 18.747499 l
h
f
Q
q
65.183098 18.750299 m
66.029404 18.750299 66.720398 18.5058 67.256203 18.016899 c
67.797096 17.5334 68.067497 16.7285 68.067497 15.6022 c
68.067497 9.5532999 l
65.8741 9.5532999 l
65.8741 15.0171 l
65.8741 15.4896 65.816498 15.8522 65.701401 16.1049 c
65.490997 16.566401 65.090401 16.797199 64.499496 16.797199 c
63.773399 16.797199 63.2752 16.459299 63.004799 15.7835 c
62.864498 15.4264 62.794399 14.9704 62.794399 14.4155 c
62.794399 9.5532999 l
60.661201 9.5532999 l
60.661201 18.5196 l
62.726799 18.5196 l
62.726799 17.2092 l
63.002201 17.6707 63.2626 18.003099 63.507999 18.2064 c
63.9487 18.569 64.507004 18.750299 65.183098 18.750299 c
h
W
0 0 132 43 rc
59.661201 19.750299 m
69.067497 19.750299 l
69.067497 8.5532999 l
59.661201 8.5532999 l
h
f
Q
q
72.642799 11.4817 m
73.1436 11.4817 73.566803 11.6877 73.9123 12.0998 c
74.257797 12.5173 74.430603 13.1794 74.430603 14.0859 c
74.430603 14.9375 74.265297 15.5857 73.934799 16.0308 c
73.609299 16.4758 73.171097 16.698299 72.6203 16.698299 c
71.869202 16.698299 71.350899 16.311001 71.065399 15.5363 c
70.915199 15.1242 70.840103 14.6161 70.840103 14.0117 c
70.840103 13.4898 70.920197 13.0255 71.080498 12.619 c
71.370903 11.8608 71.891701 11.4817 72.642799 11.4817 c
h
72.109497 18.750299 m
72.520203 18.750299 72.878197 18.681601 73.183701 18.5443 c
73.704498 18.308001 74.125099 17.874001 74.445602 17.242201 c
74.445602 18.535999 l
76.526299 18.535999 l
76.526299 10.0148 l
76.526299 8.8555002 76.348503 7.9819999 75.992996 7.3941002 c
75.382004 6.3832002 74.210197 5.8778 72.4776 5.8778 c
71.431 5.8778 70.577202 6.1030002 69.916199 6.5535002 c
69.255203 7.0040998 68.889603 7.6771002 68.819504 8.5726004 c
71.148102 8.5726004 l
71.208199 8.2979002 71.305801 8.1000996 71.441002 7.9791999 c
71.671402 7.7649999 72.059502 7.6578002 72.605301 7.6578002 c
73.376503 7.6578002 73.892197 7.9408002 74.152603 8.5066996 c
74.322899 8.8692999 74.407997 9.4791002 74.407997 10.3362 c
74.407997 10.9131 l
74.202698 10.5285 73.982399 10.24 73.747002 10.0478 c
73.321404 9.6906004 72.767998 9.5121002 72.086998 9.5121002 c
71.0354 9.5121002 70.194099 9.9159002 69.563103 10.7235 c
68.937202 11.5366 68.624199 12.6354 68.624199 14.0199 c
68.624199 15.355 68.9272 16.4758 69.533096 17.382299 c
70.139 18.2943 70.997803 18.750299 72.109497 18.750299 c
h
W
0 0 132 43 rc
67.624199 19.750299 m
77.526299 19.750299 l
77.526299 4.8778 l
67.624199 4.8778 l
h
f
Q
q
85.132301 14.0447 m
85.132301 14.7369 84.987099 15.3495 84.696602 15.8824 c
84.411201 16.4153 83.945503 16.681801 83.2995 16.681801 c
82.5233 16.681801 81.989998 16.278 81.699501 15.4704 c
81.549301 15.0418 81.474197 14.4979 81.474197 13.8386 c
81.474197 12.7948 81.727097 12.0613 82.232903 11.6383 c
82.533302 11.391 82.888901 11.2674 83.2995 11.2674 c
83.895401 11.2674 84.348602 11.5202 84.659103 12.0256 c
84.974503 12.5311 85.132301 13.2041 85.132301 14.0447 c
h
83.915398 18.733801 m
84.871902 18.733801 85.680603 18.3465 86.341599 17.5718 c
87.007599 16.797199 87.340599 15.6599 87.340599 14.16 c
87.340599 12.5778 87.015099 11.3718 86.364197 10.5422 c
85.718201 9.7125998 84.884399 9.2978001 83.862801 9.2978001 c
83.2118 9.2978001 82.670998 9.4764004 82.240402 9.8334999 c
82.004997 10.0313 81.774696 10.3197 81.549301 10.6988 c
81.549301 6.0179 l
79.431099 6.0179 l
79.431099 18.535999 l
81.481697 18.535999 l
81.481697 17.2092 l
81.712097 17.5993 81.957397 17.907 82.217796 18.1322 c
82.693604 18.5333 83.259399 18.733801 83.915398 18.733801 c
h
W
0 0 132 43 rc
78.431099 19.733801 m
88.340599 19.733801 l
88.340599 5.0179 l
78.431099 5.0179 l
h
f
Q
q
92.4869 18.7668 m
92.992699 18.7668 93.450897 18.6707 93.861504 18.478399 c
94.2771 18.2861 94.617599 17.9921 94.883003 17.5966 c
95.108398 17.2614 95.246101 16.9153 95.296204 16.558201 c
95.346199 16.2066 95.3713 15.6297 95.3713 14.8276 c
95.3713 9.5532999 l
93.185501 9.5532999 l
93.185501 15.0171 l
93.185501 15.5006 93.110298 15.8907 92.960098 16.1873 c
92.764801 16.6049 92.394203 16.8137 91.848396 16.8137 c
91.282501 16.8137 90.851898 16.6049 90.556396 16.1873 c
90.265999 15.7753 90.120796 15.1847 90.120796 14.4155 c
90.120796 9.5532999 l
87.987503 9.5532999 l
87.987503 21.659401 l
90.120796 21.659401 l
90.120796 17.365801 l
90.431297 17.8878 90.789299 18.250401 91.194901 18.4536 c
91.605499 18.662399 92.036201 18.7668 92.4869 18.7668 c
h
W
0 0 132 43 rc
86.987503 22.659401 m
96.3713 22.659401 l
96.3713 8.5532999 l
86.987503 8.5532999 l
h
f
Q
q
100.968 13.9211 m
100.833 13.8277 100.695 13.7507 100.555 13.6903 c
100.4199 13.6354 100.2321 13.5832 99.991699 13.5337 c
99.511002 13.4348 l
99.060303 13.3469 98.737297 13.2398 98.542 13.1134 c
98.211502 12.8992 98.046303 12.5668 98.046303 12.1163 c
98.046303 11.7152 98.1464 11.424 98.346703 11.2427 c
98.552002 11.0669 98.799896 10.979 99.090302 10.979 c
99.551102 10.979 99.974197 11.1273 100.3598 11.424 c
100.75 11.7207 100.953 12.2619 100.968 13.0475 c
100.968 13.9211 l
h
99.668701 15.0171 m
100.0643 15.0721 100.3473 15.1407 100.518 15.2231 c
100.823 15.366 100.976 15.5885 100.976 15.8907 c
100.976 16.258801 100.858 16.511499 100.623 16.6488 c
100.3923 16.7917 100.0518 16.8631 99.601097 16.8631 c
99.095398 16.8631 98.737297 16.7258 98.527 16.451099 c
98.376801 16.247801 98.276604 15.9731 98.226501 15.627 c
96.160896 15.627 l
96.205902 16.4126 96.406303 17.058201 96.761803 17.563601 c
97.327698 18.3547 98.299103 18.750299 99.676201 18.750299 c
100.573 18.750299 101.369 18.5553 102.065 18.165199 c
102.761 17.775101 103.109 17.0389 103.109 15.9566 c
103.109 11.8361 l
103.109 11.5504 103.114 11.2043 103.124 10.7977 c
103.139 10.49 103.182 10.2813 103.252 10.1714 c
103.322 10.0615 103.427 9.9708004 103.567 9.8993998 c
103.567 9.5532999 l
101.239 9.5532999 l
101.174 9.7346001 101.128 9.9048996 101.103 10.0642 c
101.078 10.2236 101.058 10.4049 101.043 10.6081 c
100.748 10.2565 100.4074 9.9570999 100.0218 9.7098999 c
99.561096 9.4187002 99.040298 9.2730999 98.459396 9.2730999 c
97.7183 9.2730999 97.104797 9.5038004 96.619102 9.9652996 c
96.138397 10.4323 95.898003 11.0916 95.898003 11.9432 c
95.898003 13.0475 96.286102 13.8469 97.062302 14.3413 c
97.4879 14.6106 98.113899 14.8028 98.940102 14.9182 c
99.668701 15.0171 l
h
99.916603 21.6264 m
99.861504 21.6759 99.806396 21.711599 99.751404 21.733601 c
99.696297 21.761101 99.5886 21.7775 99.428398 21.783001 c
99.030296 21.7913 l
99.000198 22.442301 l
99.110397 22.458799 99.230598 22.4725 99.360802 22.4835 c
99.496002 22.494499 99.613602 22.5 99.713799 22.5 c
99.9692 22.5 100.2171 22.4533 100.4574 22.3599 c
100.698 22.271999 100.901 22.0989 101.066 21.8407 c
101.111 21.7693 101.148 21.6759 101.179 21.560499 c
101.214 21.445101 101.231 21.321501 101.231 21.189699 c
101.231 21.0798 101.216 20.967199 101.186 20.851801 c
101.156 20.736401 101.103 20.626499 101.028 20.5221 c
100.953 20.4233 100.851 20.3353 100.72 20.2584 c
100.595 20.181499 100.4374 20.121099 100.2471 20.077101 c
100.1419 19.7145 l
99.1054 19.7145 l
99.157898 20.340799 l
99.573601 20.3738 99.838997 20.467199 99.954201 20.621 c
100.0743 20.7749 100.1344 20.9424 100.1344 21.123699 c
100.1344 21.2171 100.1169 21.305 100.0819 21.387501 c
100.0468 21.475401 99.991699 21.555 99.916603 21.6264 c
h
W
0 0 132 43 rc
94.898003 23.5 m
104.567 23.5 l
104.567 8.2730999 l
94.898003 8.2730999 l
h
f
Q
q
106.295 19.607401 m
104.124 19.607401 l
104.124 21.774799 l
106.295 21.774799 l
106.295 19.607401 l
h
104.124 18.535999 m
106.295 18.535999 l
106.295 9.5532999 l
104.124 9.5532999 l
104.124 18.535999 l
h
W
0 0 132 43 rc
103.124 22.774799 m
107.295 22.774799 l
107.295 8.5532999 l
103.124 8.5532999 l
h
f
Q
q
56.0886 18.980801 m
56.0355 18.980499 l
55.028 18.9709 54.2855 18.685301 53.640701 18.1847 c
53.236 17.8729 52.8619 17.4268 52.604801 16.8318 c
52.2607 16.0788 52.088699 15.1535 52.088699 14.056 c
52.088699 12.6774 52.4016 11.5562 53.027401 10.6925 c
53.653198 9.8288002 54.6297 9.3970003 55.957001 9.3970003 c
55.9841 9.3970003 56.011101 9.3971996 56.037998 9.3976002 c
56.0648 9.3971996 56.091801 9.3970003 56.1189 9.3970003 c
57.446201 9.3970003 58.422699 9.8288002 59.0485 10.6925 c
59.674301 11.5562 59.987202 12.6774 59.987202 14.056 c
59.987202 15.6118 59.641499 16.821501 58.9501 17.6852 c
58.258701 18.548901 57.304901 18.980801 56.0886 18.980801 c
h
54.556499 15.7917 m
54.8228 16.5798 55.316601 16.9757 56.037998 16.9793 c
56.7593 16.9757 57.253101 16.5798 57.519402 15.7917 c
57.660702 15.3709 57.7313 14.8117 57.7313 14.1141 c
57.7313 13.4497 57.660702 12.9155 57.519402 12.5113 c
57.3009 11.8723 56.918999 11.5044 56.373402 11.4077 c
56.2621 11.3916 56.147999 11.383 56.034901 11.3819 c
55.977001 11.3824 55.919899 11.3842 55.8638 11.3874 c
55.231701 11.4364 54.795898 11.811 54.556499 12.5113 c
54.415199 12.9155 54.344601 13.4497 54.344601 14.1141 c
54.344601 14.8117 54.415199 15.3709 54.556499 15.7917 c
h
W*
0 0 132 43 rc
51.088699 19.980801 m
60.987202 19.980801 l
60.987202 8.3970003 l
51.088699 8.3970003 l
h
f
Q
q
37.535099 32.070801 m
38.9515 27.738899 l
40.4324 32.070801 l
41.408001 32.070801 l
39.4072 26.750401 l
38.456299 26.750401 l
36.5 32.070801 l
37.535099 32.070801 l
h
W
0 0 132 43 rc
35.5 33.070801 m
42.408001 33.070801 l
42.408001 25.750401 l
35.5 25.750401 l
h
f
Q
q
44.1768 32.189999 m
44.5532 32.189999 44.917999 32.100601 45.271301 31.921801 c
45.624599 31.746201 45.8937 31.5177 46.078602 31.2362 c
46.256901 30.968 46.375702 30.655001 46.435101 30.2973 c
46.487999 30.0522 46.5144 29.661501 46.5144 29.124901 c
42.626598 29.124901 l
42.643101 28.5851 42.770199 28.1513 43.0079 27.8234 c
43.245701 27.4988 43.6138 27.336599 44.1124 27.336599 c
44.5779 27.336599 44.949402 27.490601 45.2267 27.798599 c
45.385201 27.9774 45.497501 28.184401 45.563499 28.4195 c
46.440102 28.4195 l
46.417 28.2241 46.339401 28.005501 46.207298 27.7638 c
46.078602 27.525299 45.9333 27.329901 45.7715 27.177601 c
45.500801 26.912701 45.1656 26.733801 44.766102 26.6411 c
44.551498 26.5881 44.3088 26.5616 44.038101 26.5616 c
43.377701 26.5616 42.8181 26.801701 42.3591 27.2819 c
41.9002 27.7654 41.6707 28.441 41.6707 29.308701 c
41.6707 30.1632 41.901901 30.857 42.364101 31.3902 c
42.826302 31.923401 43.430599 32.189999 44.1768 32.189999 c
h
45.598202 29.8353 m
45.561798 30.222799 45.4776 30.532499 45.3456 30.764299 c
45.1012 31.194799 44.693501 31.410101 44.122299 31.410101 c
43.712898 31.410101 43.369499 31.261101 43.092098 30.962999 c
42.8148 30.6682 42.6679 30.292299 42.651299 29.8353 c
45.598202 29.8353 l
h
44.469002 33.690262 m
44.561401 33.65052 44.645599 33.619061 44.7215 33.595879 c
44.797501 33.572689 44.875099 33.5611 44.9543 33.5611 c
45.139198 33.5611 45.271301 33.619061 45.350498 33.73497 c
45.393398 33.797901 45.423199 33.892281 45.439701 34.018131 c
45.959702 34.018131 l
45.8904 33.59753 45.756599 33.307751 45.558498 33.148781 c
45.363701 32.989819 45.149101 32.910332 44.9147 32.910332 c
44.842098 32.910332 44.749599 32.92358 44.637299 32.950069 c
44.525101 32.97657 44.425999 33.006378 44.340199 33.03949 c
44.077702 33.133881 l
43.922501 33.190182 43.795399 33.231579 43.696301 33.258072 c
43.600601 33.28788 43.5065 33.30278 43.414101 33.30278 c
43.2985 33.30278 43.202702 33.264702 43.126801 33.188519 c
43.054199 33.11235 43.004601 32.996441 42.978199 32.840778 c
42.492901 32.840778 l
42.535801 33.102421 42.6068 33.316029 42.705799 33.481621 c
42.894001 33.786308 43.173 33.938648 43.542801 33.938648 c
43.655102 33.938648 43.7789 33.922089 43.914299 33.888969 c
44.052898 33.85585 44.237801 33.789619 44.469002 33.690262 c
h
W
0 0 132 43 rc
40.6707 35.018131 m
47.5144 35.018131 l
47.5144 25.5616 l
40.6707 25.5616 l
h
f
Q
q
49.9618 34.072781 m
50.828499 34.072781 l
50.828499 31.424999 l
51.0233 31.68 51.2561 31.873699 51.526798 32.006199 c
51.7976 32.141998 52.0914 32.2099 52.408401 32.2099 c
53.068699 32.2099 53.6036 31.9814 54.013 31.5243 c
54.4258 31.070601 54.632099 30.4 54.632099 29.5124 c
54.632099 28.6712 54.4291 27.972401 54.0229 27.416 c
53.616798 26.859699 53.053902 26.581499 52.334099 26.581499 c
51.931301 26.581499 51.591202 26.679199 51.3139 26.874599 c
51.1488 26.990499 50.972099 27.1759 50.783901 27.430901 c
50.783901 26.750401 l
49.9618 26.750401 l
49.9618 34.072781 l
h
52.279598 27.3713 m
52.7617 27.3713 53.121601 27.5634 53.359299 27.947599 c
53.6003 28.3318 53.720798 28.838499 53.720798 29.467699 c
53.720798 30.027399 53.6003 30.4911 53.359299 30.8587 c
53.121601 31.226299 52.769901 31.410101 52.304401 31.410101 c
51.8983 31.410101 51.541698 31.259399 51.2346 30.958 c
50.930901 30.656601 50.778999 30.159901 50.778999 29.467699 c
50.778999 28.9676 50.841702 28.561899 50.967201 28.250601 c
51.201599 27.6644 51.639099 27.3713 52.279598 27.3713 c
h
W
0 0 132 43 rc
48.9618 35.072781 m
55.632099 35.072781 l
55.632099 25.581499 l
48.9618 25.581499 l
h
f
Q
q
60.055401 29.5224 m
60.055401 28.6646 59.847401 27.9559 59.4314 27.3962 c
59.0154 26.8365 58.3699 26.556601 57.4949 26.556601 c
56.765202 26.556601 56.185799 26.8034 55.756599 27.296801 c
55.327301 27.7936 55.112701 28.459299 55.112701 29.2938 c
55.112701 30.188 55.338902 30.900101 55.791199 31.43 c
56.243599 31.959801 56.851101 32.2248 57.6138 32.2248 c
58.297298 32.2248 58.875099 31.9963 59.347198 31.5392 c
59.4231 31.4664 59.4925 31.3869 59.555199 31.3008 c
59.604698 31.3008 59.659199 31.3074 59.7187 31.3207 c
59.877102 31.330601 60.020802 31.362101 60.149502 31.4151 c
60.203999 31.439899 l
60.220501 31.4498 60.237 31.4631 60.253502 31.479601 c
60.050499 31.9764 l
61.046001 32.3937 l
61.452099 31.410101 l
60.525902 31.027599 l
60.284901 30.9249 60.050499 30.8603 59.822701 30.833799 c
59.977798 30.4662 60.055401 30.0291 60.055401 29.5224 c
h
59.124298 29.497499 m
59.124298 29.994301 59.045101 30.3983 58.8866 30.7096 c
58.6357 31.1998 58.203201 31.444901 57.589001 31.444901 c
57.044201 31.444901 56.647999 31.2362 56.400398 30.818899 c
56.152802 30.4016 56.028999 29.898199 56.028999 29.308701 c
56.028999 28.742399 56.152802 28.2705 56.400398 27.8929 c
56.647999 27.5154 57.040901 27.326599 57.579102 27.326599 c
58.170101 27.326599 58.5746 27.5502 58.7925 27.997299 c
59.013699 28.447701 59.124298 28.9478 59.124298 29.497499 c
h
57.707901 34.008202 m
57.658401 34.041309 57.607201 34.064499 57.554401 34.07774 c
57.504799 34.094299 57.442101 34.102581 57.366199 34.102581 c
57.2869 34.102581 57.1796 34.092651 57.044201 34.072781 c
57.024399 34.465229 l
57.097099 34.475159 57.168098 34.48344 57.2374 34.490059 c
57.310001 34.496689 57.379398 34.5 57.4454 34.5 c
57.6138 34.5 57.769001 34.471851 57.910999 34.41555 c
58.052898 34.36256 58.178398 34.25824 58.2873 34.102581 c
58.317101 34.059528 58.341801 34.003231 58.361599 33.933681 c
58.3848 33.864128 58.396301 33.789619 58.396301 33.710129 c
58.396301 33.643902 58.386398 33.576012 58.3666 33.506458 c
58.346802 33.436909 58.312099 33.37067 58.2626 33.307751 c
58.2131 33.248138 58.145401 33.195148 58.059502 33.148781 c
57.977001 33.102421 57.873001 33.06599 57.747501 33.03949 c
57.727699 32.820911 l
57.291901 32.820911 l
57.291901 33.19846 l
57.490002 33.21833 57.641899 33.276291 57.747501 33.37233 c
57.856499 33.47168 57.910999 33.57766 57.910999 33.690262 c
57.910999 33.749882 57.894402 33.806179 57.861401 33.859169 c
57.8284 33.91547 57.777199 33.965141 57.707901 34.008202 c
h
W
0 0 132 43 rc
54.112701 35.5 m
62.452099 35.5 l
62.452099 25.556601 l
54.112701 25.556601 l
h
f
Q
q
62.125801 32.046001 m
63.0322 32.046001 l
63.0322 26.750401 l
62.125801 26.750401 l
62.125801 32.046001 l
h
62.125801 34.047939 m
63.0322 34.047939 l
63.0322 33.034531 l
62.125801 33.034531 l
62.125801 34.047939 l
h
W
0 0 132 43 rc
61.125801 35.047939 m
64.032204 35.047939 l
64.032204 25.750401 l
61.125801 25.750401 l
h
f
Q
q
68.846901 32.2248 m
69.444504 32.2248 69.929901 32.079102 70.303001 31.7876 c
70.679398 31.496201 70.905602 30.994499 70.981499 30.2824 c
70.114799 30.2824 l
70.061996 30.6103 69.941399 30.881901 69.753304 31.097099 c
69.565102 31.315701 69.262901 31.424999 68.846901 31.424999 c
68.278999 31.424999 67.872902 31.146799 67.628601 30.590401 c
67.4701 30.229401 67.3909 29.784 67.3909 29.254101 c
67.3909 28.7209 67.503098 28.2721 67.7276 27.907801 c
67.952103 27.5436 68.305397 27.361401 68.787498 27.361401 c
69.157303 27.361401 69.449501 27.474001 69.664101 27.6992 c
69.882004 27.9277 70.032204 28.239 70.114799 28.633101 c
70.981499 28.633101 l
70.882401 27.9277 70.634804 27.4111 70.238602 27.0832 c
69.8424 26.758699 69.335602 26.596399 68.718201 26.596399 c
68.024803 26.596399 67.471703 26.849701 67.058998 27.3564 c
66.646301 27.866501 66.439903 28.5023 66.439903 29.264 c
66.439903 30.198 66.6661 30.9249 67.1185 31.444901 c
67.570801 31.9648 68.146896 32.2248 68.846901 32.2248 c
h
W
0 0 132 43 rc
65.439903 33.2248 m
71.981499 33.2248 l
71.981499 25.596399 l
65.439903 25.596399 l
h
f
Q
q
73.775002 27.326599 m
74.365997 27.326599 74.770401 27.5502 74.988403 27.997299 c
75.209602 28.447701 75.320198 28.9478 75.320198 29.497499 c
75.320198 29.994301 75.240898 30.3983 75.082497 30.7096 c
74.831497 31.1998 74.399002 31.444901 73.784897 31.444901 c
73.240097 31.444901 72.843903 31.2362 72.596199 30.818899 c
72.348602 30.4016 72.2248 29.898199 72.2248 29.308701 c
72.2248 28.742399 72.348602 28.2705 72.596199 27.8929 c
72.843903 27.5154 73.236801 27.326599 73.775002 27.326599 c
h
73.809601 32.2248 m
74.493103 32.2248 75.0709 31.9963 75.543098 31.5392 c
76.015198 31.082199 76.251297 30.409901 76.251297 29.5224 c
76.251297 28.6646 76.043297 27.9559 75.627296 27.3962 c
75.211197 26.8365 74.565697 26.556601 73.690804 26.556601 c
72.961098 26.556601 72.381599 26.8034 71.9524 27.296801 c
71.523201 27.7936 71.308601 28.459299 71.308601 29.2938 c
71.308601 30.188 71.534698 30.900101 71.987099 31.43 c
72.4394 31.959801 73.046898 32.2248 73.809601 32.2248 c
h
W
0 0 132 43 rc
70.308601 33.2248 m
77.251297 33.2248 l
77.251297 25.556601 l
70.308601 25.556601 l
h
f
Q
q
77.113197 32.070801 m
77.960098 32.070801 l
77.960098 31.315701 l
78.211098 31.627001 78.476898 31.850599 78.7575 31.9863 c
79.0382 32.122101 79.350197 32.189999 79.693497 32.189999 c
80.446297 32.189999 80.954803 31.926701 81.219002 31.400101 c
81.364197 31.112 81.436897 30.699699 81.436897 30.1632 c
81.436897 26.750401 l
80.530502 26.750401 l
80.530502 30.1036 l
80.530502 30.428101 80.482697 30.6898 80.386902 30.8885 c
80.228401 31.2197 79.9412 31.385201 79.5252 31.385201 c
79.313797 31.385201 79.140503 31.363701 79.005096 31.3207 c
78.760803 31.247801 78.546204 31.1021 78.361298 30.883499 c
78.2127 30.708 78.115303 30.525801 78.069099 30.337099 c
78.026199 30.1516 78.0047 29.885 78.0047 29.5373 c
78.0047 26.750401 l
77.113197 26.750401 l
77.113197 32.070801 l
h
W
0 0 132 43 rc
76.113197 33.189999 m
82.436897 33.189999 l
82.436897 25.750401 l
76.113197 25.750401 l
h
f
Q
q
85.176498 32.070801 m
86.023399 32.070801 l
86.023399 31.315701 l
86.2743 31.627001 86.5401 31.850599 86.820801 31.9863 c
87.101402 32.122101 87.413399 32.189999 87.756798 32.189999 c
88.509598 32.189999 89.018097 31.926701 89.282204 31.400101 c
89.427498 31.112 89.500099 30.699699 89.500099 30.1632 c
89.500099 26.750401 l
88.593803 26.750401 l
88.593803 30.1036 l
88.593803 30.428101 88.545898 30.6898 88.450203 30.8885 c
88.291702 31.2197 88.004402 31.385201 87.588402 31.385201 c
87.377098 31.385201 87.203796 31.363701 87.068398 31.3207 c
86.824097 31.247801 86.609398 31.1021 86.4245 30.883499 c
86.276001 30.708 86.178596 30.525801 86.132301 30.337099 c
86.089401 30.1516 86.068001 29.885 86.068001 29.5373 c
86.068001 26.750401 l
85.176498 26.750401 l
85.176498 32.070801 l
h
W
0 0 132 43 rc
84.176498 33.189999 m
90.500099 33.189999 l
90.500099 25.750401 l
84.176498 25.750401 l
h
f
Q
q
92.491699 32.165199 m
92.9077 32.165199 93.270897 32.0625 93.581299 31.857201 c
93.749702 31.741301 93.921402 31.572399 94.096298 31.3505 c
94.096298 32.021099 l
94.918503 32.021099 l
94.918503 27.1826 l
94.918503 26.507 94.819397 25.973801 94.6213 25.583 c
94.251503 24.861 93.5532 24.5 92.526398 24.5 c
91.9552 24.5 91.4748 24.6292 91.085197 24.887501 c
90.695602 25.1425 90.4776 25.5432 90.431396 26.089701 c
91.3377 26.089701 l
91.380699 25.8512 91.466499 25.6674 91.595299 25.5383 c
91.7967 25.3395 92.113602 25.2402 92.546204 25.2402 c
93.229599 25.2402 93.677002 25.482 93.888298 25.9655 c
94.013802 26.250299 94.071602 26.758699 94.061699 27.490601 c
93.8834 27.219 93.6688 27.017 93.417801 26.884501 c
93.166901 26.752001 92.835098 26.685801 92.422401 26.685801 c
91.8479 26.685801 91.344299 26.8895 90.911797 27.296801 c
90.482597 27.7075 90.267998 28.384701 90.267998 29.3286 c
90.267998 30.2195 90.4842 30.915001 90.916801 31.4151 c
91.3526 31.9151 91.877602 32.165199 92.491699 32.165199 c
h
94.096298 29.432899 m
94.096298 30.091999 93.960999 30.5805 93.690201 30.898399 c
93.419502 31.216299 93.074501 31.375299 92.655098 31.375299 c
92.027802 31.375299 91.598602 31.080601 91.3675 30.4911 c
91.2453 30.176399 91.184196 29.764099 91.184196 29.254101 c
91.184196 28.654699 91.304703 28.197599 91.545799 27.882999 c
91.7901 27.571699 92.116997 27.416 92.526398 27.416 c
93.166901 27.416 93.617599 27.705799 93.878403 28.2854 c
94.023697 28.6133 94.096298 28.9958 94.096298 29.432899 c
h
W
0 0 132 43 rc
89.267998 33.165199 m
95.918503 33.165199 l
95.918503 23.5 l
89.267998 23.5 l
h
f
Q
q
96.954201 32.070801 m
96.954201 28.5387 l
96.954201 28.2672 96.997101 28.0453 97.083 27.8731 c
97.241501 27.555099 97.537003 27.3962 97.969498 27.3962 c
98.590202 27.3962 99.012802 27.6744 99.237396 28.230801 c
99.359497 28.528799 99.420601 28.937799 99.420601 29.4578 c
99.420601 32.070801 l
100.3121 32.070801 l
100.3121 31.3008 l
100.3781 31.297501 100.4507 31.3041 100.53 31.3207 c
100.688 31.330601 100.832 31.362101 100.961 31.4151 c
101.015 31.439899 l
101.032 31.4498 101.048 31.4631 101.065 31.479601 c
100.862 31.9764 l
101.857 32.3937 l
102.263 31.410101 l
101.337 31.027599 l
100.984 30.8785 100.642 30.8106 100.3121 30.8239 c
100.3121 26.750401 l
99.4701 26.750401 l
99.480003 27.535299 l
99.364502 27.3333 99.220802 27.162701 99.049202 27.0236 c
98.709099 26.745399 98.296402 26.6063 97.810997 26.6063 c
97.054901 26.6063 96.539803 26.859699 96.2658 27.3664 c
96.117203 27.637899 96.0429 28.000601 96.0429 28.4543 c
96.0429 32.070801 l
96.954201 32.070801 l
h
W
0 0 132 43 rc
95.0429 33.3937 m
103.263 33.3937 l
103.263 25.6063 l
95.0429 25.6063 l
h
f
Q
q
107.523 29.5224 m
107.523 28.6646 107.315 27.9559 106.899 27.3962 c
106.483 26.8365 105.838 26.556601 104.963 26.556601 c
104.233 26.556601 103.654 26.8034 103.224 27.296801 c
102.795 27.7936 102.581 28.459299 102.581 29.2938 c
102.581 30.188 102.807 30.900101 103.259 31.43 c
103.711 31.959801 104.319 32.2248 105.082 32.2248 c
105.765 32.2248 106.343 31.9963 106.815 31.5392 c
106.891 31.4664 106.96 31.3869 107.023 31.3008 c
107.073 31.3008 107.127 31.3074 107.187 31.3207 c
107.345 31.330601 107.489 31.362101 107.617 31.4151 c
107.672 31.439899 l
107.688 31.4498 107.705 31.4631 107.721 31.479601 c
107.518 31.9764 l
108.514 32.3937 l
108.92 31.410101 l
107.994 31.027599 l
107.753 30.9249 107.518 30.8603 107.291 30.833799 c
107.446 30.4662 107.523 30.0291 107.523 29.5224 c
h
106.592 29.497499 m
106.592 29.994301 106.513 30.3983 106.354 30.7096 c
106.104 31.1998 105.671 31.444901 105.057 31.444901 c
104.512 31.444901 104.116 31.2362 103.868 30.818899 c
103.621 30.4016 103.497 29.898199 103.497 29.308701 c
103.497 28.742399 103.621 28.2705 103.868 27.8929 c
104.116 27.5154 104.509 27.326599 105.047 27.326599 c
105.638 27.326599 106.042 27.5502 106.26 27.997299 c
106.482 28.447701 106.592 28.9478 106.592 29.497499 c
h
105.889 32.706661 m
105.21 32.706661 l
103.883 34.142319 l
104.988 34.142319 l
105.889 32.706661 l
h
W
0 0 132 43 rc
101.581 35.142319 m
109.92 35.142319 l
109.92 25.556601 l
101.581 25.556601 l
h
f
Q
q
109.594 32.046001 m
110.5 32.046001 l
110.5 26.750401 l
109.594 26.750401 l
109.594 32.046001 l
h
109.594 34.047939 m
110.5 34.047939 l
110.5 33.034531 l
109.594 33.034531 l
109.594 34.047939 l
h
W
0 0 132 43 rc
108.594 35.047939 m
111.5 35.047939 l
111.5 25.750401 l
108.594 25.750401 l
h
f
Q
q
14.4605 18.342501 m
17.9266 15.5357 22.8836 15.5357 26.349701 18.342501 c
25.009501 19.9974 l
22.3248 17.8234 18.485399 17.8234 15.8007 19.9974 c
14.4605 18.342501 l
h
W
0 0 132 43 rc
13.4605 20.9974 m
27.349701 20.9974 l
27.349701 14.5357 l
13.4605 14.5357 l
h
f
Q
q
15.904 21.986601 2.1296 2.8769 rc
14.904 25.863501 m
19.0336 25.863501 l
19.0336 20.986601 l
14.904 20.986601 l
h
f
Q
q
22.511999 21.986601 2.1294999 2.8769 rc
21.511999 25.863501 m
25.6415 25.863501 l
25.6415 20.986601 l
21.511999 20.986601 l
h
f
Q
q
31.5 21 m
31.5 14.6487 26.351299 9.5 20 9.5 c
13.6487 9.5 8.5 14.6487 8.5 21 c
8.5 27.351299 13.6487 32.5 20 32.5 c
26.351299 32.5 31.5 27.351299 31.5 21 c
h
29.370501 21 m
29.370501 15.8248 25.1752 11.6295 20 11.6295 c
14.8248 11.6295 10.6295 15.8248 10.6295 21 c
10.6295 26.1752 14.8248 30.370501 20 30.370501 c
25.1752 30.370501 29.370501 26.1752 29.370501 21 c
h
W*
0 0 132 43 rc
7.5 33.5 m
32.5 33.5 l
32.5 8.5 l
7.5 8.5 l
h
f
ep
end
%%Trailer
%%EOF
