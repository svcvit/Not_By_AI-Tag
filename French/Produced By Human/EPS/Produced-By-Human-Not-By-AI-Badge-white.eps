%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.5 (Build 23F79) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
q
101.09 18.059601 m
101.528 23.5 l
99.136497 23.5 l
99.574501 18.059601 l
101.09 18.059601 l
h
W
0 0 132 43 rc
98.136497 24.5 m
102.528 24.5 l
102.528 17.059601 l
98.136497 17.059601 l
h
f
Q
q
95.947998 10.3323 2.4967999 13.1676 rc
94.947998 24.499901 m
99.444801 24.499901 l
99.444801 9.3323002 l
94.947998 9.3323002 l
h
f
Q
q
102.231 23.340599 m
107.849 23.340599 l
107.849 21.1238 l
106.458 21.1238 l
106.458 12.5223 l
107.849 12.5223 l
107.849 10.3056 l
102.231 10.3056 l
102.231 12.5223 l
103.805 12.5223 l
103.805 21.1238 l
102.231 21.1238 l
102.231 23.340599 l
h
W
0 0 132 43 rc
101.231 24.340599 m
108.849 24.340599 l
108.849 9.3056002 l
101.231 9.3056002 l
h
f
Q
q
115.974 23.340599 m
112.957 23.340599 l
108.396 10.3086 l
111.188 10.3086 l
112.072 12.9875 l
116.78 12.9875 l
117.604 10.3086 l
120.5 10.3086 l
115.974 23.340599 l
h
116.035 15.2331 m
112.792 15.2331 l
114.439 20.361099 l
116.035 15.2331 l
h
W*
0 0 132 43 rc
107.396 24.340599 m
121.5 24.340599 l
121.5 9.3086004 l
107.396 9.3086004 l
h
f
Q
q
60.018101 12.4764 m
59.842899 12.6669 59.729 12.9885 59.676399 13.4411 c
57.1446 13.4411 l
57.1446 12.4406 57.500801 11.6158 58.213402 10.9666 c
58.931801 10.3234 60.041401 10.0018 61.5425 10.0018 c
63.014301 10.0018 64.100601 10.3056 64.801399 10.913 c
65.508102 11.5264 65.861504 12.3156 65.861504 13.2803 c
65.861504 14.0129 65.616203 14.6233 65.125603 15.1117 c
64.629097 15.5941 63.884499 15.9544 62.891602 16.1926 c
61.402302 16.5261 60.535 16.761299 60.2897 16.8983 c
60.044399 17.029301 59.9217 17.240801 59.9217 17.5326 c
59.9217 17.764799 60.035599 17.9673 60.263401 18.139999 c
60.497002 18.312799 60.885399 18.399099 61.4286 18.399099 c
62.088501 18.399099 62.555801 18.2264 62.830299 17.881001 c
62.976299 17.690399 63.066799 17.431299 63.101898 17.1038 c
65.598701 17.1038 l
65.487701 18.294901 65.055496 19.131599 64.302101 19.614 c
63.554501 20.1024 62.584999 20.3466 61.393501 20.3466 c
60.137798 20.3466 59.162498 20.021999 58.4674 19.372801 c
57.778301 18.729601 57.433701 17.958401 57.433701 17.059099 c
57.433701 16.296801 57.655602 15.7132 58.099499 15.3082 c
58.5434 14.8973 59.305599 14.5548 60.386002 14.2809 c
61.887001 13.9176 62.754398 13.6615 62.987999 13.5126 c
63.2216 13.3637 63.338402 13.1463 63.338402 12.8605 c
63.338402 12.5627 63.192402 12.3394 62.900398 12.1905 c
62.614201 12.0416 62.2258 11.9672 61.735199 11.9672 c
60.900002 11.9672 60.327599 12.1369 60.018101 12.4764 c
h
W
0 0 132 43 rc
56.1446 21.3466 m
66.861504 21.3466 l
66.861504 9.0017996 l
56.1446 9.0017996 l
h
f
Q
q
52.390999 16.2551 m
52.852402 16.314699 53.1824 16.389099 53.381001 16.4785 c
53.737202 16.633301 53.915401 16.8745 53.915401 17.202 c
53.915401 17.601101 53.778099 17.875 53.503601 18.023899 c
53.235001 18.178801 52.837799 18.256201 52.312199 18.256201 c
51.722301 18.256201 51.304699 18.1073 51.059399 17.8095 c
50.884201 17.589199 50.7673 17.291401 50.7089 16.916201 c
48.299702 16.916201 l
48.352299 17.767799 48.585899 18.4676 49.000599 19.015499 c
49.660599 19.8731 50.793598 20.301901 52.399799 20.301901 c
53.445202 20.301901 54.373798 20.0905 55.185699 19.667601 c
55.997501 19.244801 56.4034 18.446699 56.4034 17.2735 c
56.4034 12.8069 l
56.4034 12.4972 56.409302 12.122 56.420898 11.6813 c
56.438499 11.3478 56.488098 11.1215 56.569901 11.0024 c
56.6516 10.8833 56.7743 10.785 56.937801 10.7076 c
56.937801 10.3324 l
54.222 10.3324 l
54.146099 10.5289 54.093498 10.7135 54.064301 10.8862 c
54.035099 11.0589 54.0117 11.2555 53.994202 11.4758 c
53.649601 11.0947 53.252499 10.7701 52.802799 10.5021 c
52.2654 10.1865 51.658001 10.0286 50.980499 10.0286 c
50.1161 10.0286 49.4007 10.2788 48.834099 10.779 c
48.273499 11.2852 47.993099 11.9999 47.993099 12.923 c
47.993099 14.1201 48.445801 14.9866 49.351002 15.5226 c
49.8475 15.8144 50.577499 16.0229 51.541199 16.1479 c
52.390999 16.2551 l
h
53.906601 15.067 m
53.748901 14.9658 53.588299 14.8824 53.424801 14.8169 c
53.267101 14.7573 53.0481 14.7007 52.7677 14.6471 c
52.207001 14.5399 l
51.6814 14.4446 51.304699 14.3285 51.0769 14.1915 c
50.691399 13.9593 50.498699 13.599 50.498699 13.1106 c
50.498699 12.6759 50.615501 12.3602 50.849098 12.1637 c
51.0886 11.9731 51.377701 11.8778 51.7164 11.8778 c
52.253799 11.8778 52.747299 12.0386 53.196999 12.3602 c
53.6525 12.6818 53.889099 13.2684 53.906601 14.1201 c
53.906601 15.067 l
h
W*
0 0 132 43 rc
46.993099 21.301901 m
57.937801 21.301901 l
57.937801 9.0285997 l
46.993099 9.0285997 l
h
f
Q
q
43.730202 20.284 m
44.845699 20.284 45.788898 19.864201 46.559898 19.024401 c
47.336601 18.1847 47.724998 16.9519 47.724998 15.3261 c
47.724998 13.6109 47.345402 12.3036 46.586102 11.4044 c
45.832699 10.5051 44.860298 10.0554 43.6688 10.0554 c
42.909599 10.0554 42.278801 10.249 41.776501 10.6361 c
41.501999 10.8505 41.233299 11.1632 40.970501 11.5741 c
40.970501 6.5 l
38.5 6.5 l
38.5 20.069599 l
40.891701 20.069599 l
40.891701 18.631399 l
41.160301 19.054199 41.446499 19.387699 41.750198 19.631901 c
42.305099 20.066601 42.965 20.284 43.730202 20.284 c
h
45.149399 15.201 m
45.149399 15.9514 44.98 16.6154 44.6413 17.1931 c
44.308399 17.7708 43.765202 18.059601 43.011799 18.059601 c
42.106499 18.059601 41.484501 17.621901 41.145699 16.7465 c
40.970501 16.2819 40.8829 15.6923 40.8829 14.9777 c
40.8829 13.8461 41.177898 13.0511 41.7677 12.5925 c
42.118198 12.3245 42.532902 12.1905 43.011799 12.1905 c
43.706799 12.1905 44.235401 12.4644 44.5975 13.0123 c
44.965401 13.5603 45.149399 14.2898 45.149399 15.201 c
h
W*
0 0 132 43 rc
37.5 21.284 m
48.724998 21.284 l
48.724998 5.5 l
37.5 5.5 l
h
f
Q
q
83.253304 16.4785 m
83.054703 16.3892 82.724701 16.314699 82.263298 16.255199 c
81.413498 16.148001 l
80.449799 16.0229 79.719803 15.8145 79.223297 15.5227 c
78.3181 14.9867 77.865402 14.1201 77.865402 12.9231 c
77.865402 12 78.145798 11.2853 78.706497 10.7791 c
79.273003 10.2788 79.988403 10.0287 80.852798 10.0287 c
81.530296 10.0287 82.137703 10.1865 82.675102 10.5022 c
83.124802 10.7702 83.521896 11.0947 83.866501 11.4759 c
83.884003 11.2555 83.907402 11.059 83.9366 10.8863 c
83.965797 10.7136 84.018402 10.529 84.094299 10.3324 c
86.810097 10.3324 l
86.810097 10.7076 l
86.646599 10.7851 86.523903 10.8833 86.4422 11.0024 c
86.360397 11.1215 86.310799 11.3478 86.293198 11.6814 c
86.281601 12.1221 86.275703 12.4973 86.275703 12.807 c
86.275703 17.2736 l
86.275703 18.4468 85.869797 19.2449 85.057999 19.6677 c
84.246201 20.0905 83.317497 20.302 82.272102 20.302 c
80.665901 20.302 79.532898 19.873199 78.872902 19.0156 c
78.458199 18.467699 78.224602 17.7679 78.172096 16.9163 c
80.5812 16.9163 l
80.639702 17.291401 80.7565 17.589199 80.931702 17.809601 c
81.177002 18.107401 81.594597 18.256201 82.184502 18.256201 c
82.710098 18.256201 83.1073 18.178801 83.3759 18.024 c
83.650398 17.875099 83.787697 17.601101 83.787697 17.202101 c
83.787697 16.874599 83.609497 16.6334 83.253304 16.4785 c
h
83.297096 14.8169 m
83.460602 14.8824 83.621201 14.9658 83.7789 15.0671 c
83.7789 14.1201 l
83.761398 13.2685 83.524902 12.6819 83.069298 12.3603 c
82.619598 12.0387 82.126099 11.8779 81.588699 11.8779 c
81.25 11.8779 80.960899 11.9732 80.721397 12.1638 c
80.487801 12.3603 80.371002 12.6759 80.371002 13.1107 c
80.371002 13.599 80.563698 13.9593 80.949203 14.1916 c
81.177002 14.3286 81.553703 14.4447 82.0793 14.54 c
82.639999 14.6472 l
82.920403 14.7008 83.139397 14.7574 83.297096 14.8169 c
h
W*
0 0 132 43 rc
76.865402 21.302 m
87.810097 21.302 l
87.810097 9.0286999 l
76.865402 9.0286999 l
h
f
Q
q
76.432198 19.0245 m
75.661201 19.864201 74.718002 20.2841 73.602501 20.2841 c
72.837402 20.2841 72.177399 20.0667 71.622498 19.632 c
71.318802 19.3878 71.0326 19.0543 70.764 18.631399 c
70.764 20.0697 l
68.372299 20.0697 l
68.372299 6.5001001 l
70.842796 6.5001001 l
70.842796 11.5742 l
71.105698 11.1632 71.374298 10.8506 71.648804 10.6362 c
72.1511 10.2491 72.781898 10.0555 73.5411 10.0555 c
74.732597 10.0555 75.705002 10.5051 76.458504 11.4044 c
77.217697 12.3037 77.597298 13.6109 77.597298 15.3261 c
77.597298 16.952 77.209 18.184799 76.432198 19.0245 c
h
74.513603 17.193199 m
74.852303 16.615499 75.021698 15.9515 75.021698 15.2011 c
75.021698 14.2899 74.8377 13.5603 74.469803 13.0124 c
74.107697 12.4645 73.579102 12.1906 72.884102 12.1906 c
72.405197 12.1906 71.990501 12.3246 71.640099 12.5926 c
71.050201 13.0511 70.755203 13.8462 70.755203 14.9777 c
70.755203 15.6924 70.842796 16.282 71.017998 16.7465 c
71.356796 17.622 71.978798 18.0597 72.884102 18.0597 c
73.637497 18.0597 74.180702 17.770901 74.513603 17.193199 c
h
W*
0 0 132 43 rc
67.372299 21.2841 m
78.597298 21.2841 l
78.597298 5.5001001 l
67.372299 5.5001001 l
h
f
Q
q
92.790199 20.302 m
92.836899 20.302 92.874901 20.299 92.904099 20.292999 c
92.939102 20.292999 93.0121 20.290001 93.1231 20.2841 c
93.1231 17.6756 l
92.965401 17.693399 92.825203 17.7054 92.702599 17.7113 c
92.579903 17.7173 92.480598 17.7202 92.404701 17.7202 c
91.4002 17.7202 90.725601 17.3867 90.380997 16.7197 c
90.188301 16.3445 90.091904 15.7668 90.091904 14.9867 c
90.091904 10.3324 l
87.577599 10.3324 l
87.577599 20.0697 l
89.960503 20.0697 l
89.960503 18.3724 l
90.345901 19.0215 90.681801 19.4652 90.968002 19.7034 c
91.435204 20.1024 92.042603 20.302 92.790199 20.302 c
h
W
0 0 132 43 rc
86.577599 21.302 m
94.1231 21.302 l
94.1231 9.3324003 l
86.577599 9.3324003 l
h
f
Q
q
16.460501 18.342501 m
19.9266 15.5357 24.8836 15.5357 28.349701 18.342501 c
27.009501 19.9974 l
24.3248 17.8234 20.485399 17.8234 17.800699 19.9974 c
16.460501 18.342501 l
h
W
0 0 132 43 rc
15.4605 20.9974 m
29.349701 20.9974 l
29.349701 14.5357 l
15.4605 14.5357 l
h
f
Q
q
17.903999 21.986601 2.1296 2.8769 rc
16.903999 25.863501 m
21.0336 25.863501 l
21.0336 20.986601 l
16.903999 20.986601 l
h
f
Q
q
24.511999 21.986601 2.1294999 2.8769 rc
23.511999 25.863501 m
27.6415 25.863501 l
27.6415 20.986601 l
23.511999 20.986601 l
h
f
Q
q
33.5 21 m
33.5 14.6487 28.351299 9.5 22 9.5 c
15.6487 9.5 10.5 14.6487 10.5 21 c
10.5 27.351299 15.6487 32.5 22 32.5 c
28.351299 32.5 33.5 27.351299 33.5 21 c
h
31.370501 21 m
31.370501 15.8248 27.1752 11.6295 22 11.6295 c
16.8248 11.6295 12.6295 15.8248 12.6295 21 c
12.6295 26.1752 16.8248 30.370501 22 30.370501 c
27.1752 30.370501 31.370501 26.1752 31.370501 21 c
h
W*
0 0 132 43 rc
9.5 33.5 m
34.5 33.5 l
34.5 8.5 l
9.5 8.5 l
h
f
Q
q
54.5429 31.435801 m
54.273102 31.6 53.938301 31.681999 53.538502 31.681999 c
52.817001 31.681999 52.2612 31.410601 51.871101 30.867701 c
51.484299 30.327999 51.290901 29.6889 51.290901 28.9503 c
51.290901 28.1612 51.503799 27.5284 51.9296 27.0518 c
52.3554 26.5784 52.8592 26.3417 53.441002 26.3417 c
53.8018 26.3417 54.122002 26.4111 54.401501 26.549999 c
54.681 26.6889 54.923199 26.914499 55.127899 27.226999 c
55.127899 26.521601 l
55.917801 26.521601 l
55.917801 33.5 l
55.074299 33.5 l
55.074299 30.9387 l
54.875999 31.1754 54.698898 31.341101 54.5429 31.435801 c
h
52.5732 27.634199 m
52.335899 28.000299 52.2173 28.4548 52.2173 28.997601 c
52.2173 29.635201 52.353802 30.118099 52.626801 30.4464 c
52.903099 30.774599 53.262299 30.9387 53.7043 30.9387 c
54.1008 30.9387 54.433998 30.7841 54.7038 30.4748 c
54.973598 30.1686 55.108398 29.6952 55.108398 29.054501 c
55.108398 28.420099 54.976799 27.9324 54.713501 27.5916 c
54.453499 27.253799 54.1203 27.084999 53.7141 27.084999 c
53.190701 27.084999 52.810501 27.268 52.5732 27.634199 c
h
W*
0 0 132 43 rc
50.290901 34.5 m
56.917801 34.5 l
56.917801 25.3417 l
50.290901 25.3417 l
h
f
Q
q
95.596703 30.5884 m
95.300903 30.3454 95.153 29.886101 95.153 29.210699 c
95.153 26.521601 l
94.275398 26.521601 l
94.275398 33.5 l
95.153 33.5 l
95.153 30.9056 l
95.361 31.1612 95.547897 31.341101 95.713699 31.445299 c
95.996498 31.6252 96.349098 31.7152 96.771698 31.7152 c
97.528999 31.7152 98.042603 31.457899 98.312302 30.943501 c
98.458603 30.6626 98.5317 30.2728 98.5317 29.774099 c
98.5317 26.521601 l
97.629799 26.521601 l
97.629799 29.7173 l
97.629799 30.089701 97.581001 30.3627 97.483498 30.536301 c
97.324203 30.8141 97.0252 30.9529 96.586403 30.9529 c
96.222397 30.9529 95.892502 30.8314 95.596703 30.5884 c
h
W
0 0 132 43 rc
93.275398 34.5 m
99.5317 34.5 l
99.5317 25.521601 l
93.275398 25.521601 l
h
f
Q
q
120.862 31.5116 m
120.586 31.3822 120.324 31.1691 120.077 30.8724 c
120.077 31.591999 l
119.244 31.591999 l
119.244 26.521601 l
120.121 26.521601 l
120.121 29.1775 l
120.121 29.5089 120.142 29.763 120.185 29.9398 c
120.23 30.119699 120.326 30.293301 120.472 30.460501 c
120.654 30.6689 120.866 30.807699 121.106 30.877199 c
121.239 30.9182 121.41 30.9387 121.618 30.9387 c
122.028 30.9387 122.31 30.780899 122.466 30.4653 c
122.561 30.2759 122.608 30.0266 122.608 29.717199 c
122.608 26.521601 l
123.5 26.521601 l
123.5 29.774099 l
123.5 30.2854 123.428 30.678301 123.285 30.9529 c
123.025 31.4548 122.525 31.7057 121.784 31.7057 c
121.446 31.7057 121.139 31.641001 120.862 31.5116 c
h
W
0 0 132 43 rc
118.244 32.7057 m
124.5 32.7057 l
124.5 25.521601 l
118.244 25.521601 l
h
f
Q
q
115.564 29.8403 m
115.496 29.7015 115.361 29.6194 115.16 29.594101 c
113.76 29.4237 l
113.27 29.363701 112.873 29.204399 112.571 28.945499 c
112.268 28.686701 112.117 28.322201 112.117 27.8519 c
112.117 27.422701 112.27 27.0644 112.576 26.777201 c
112.884 26.4932 113.281 26.351101 113.765 26.351101 c
114.168 26.351101 114.537 26.434799 114.872 26.601999 c
115.207 26.7693 115.464 26.9666 115.642 27.1938 c
115.672 26.9918 115.722 26.8356 115.793 26.7251 c
115.93 26.5168 116.149 26.412701 116.452 26.412701 c
116.575 26.412701 116.673 26.4174 116.744 26.426901 c
116.816 26.4363 116.92 26.459999 117.056 26.4979 c
117.056 27.1276 l
117.001 27.118099 116.949 27.110201 116.9 27.103901 c
116.851 27.1007 116.808 27.099199 116.769 27.099199 c
116.648 27.099199 116.569 27.125999 116.53 27.1796 c
116.494 27.233299 116.476 27.3043 116.476 27.3927 c
116.476 30.313801 l
116.476 30.793501 116.286 31.146999 115.906 31.3743 c
115.522 31.6015 115.023 31.715099 114.409 31.715099 c
113.879 31.715099 113.413 31.591999 113.01 31.3458 c
112.61 31.1028 112.402 30.6688 112.385 30.0439 c
113.205 30.0439 l
113.237 30.305901 113.307 30.503099 113.414 30.6357 c
113.606 30.875601 113.931 30.995501 114.389 30.995501 c
114.786 30.995501 115.09 30.929199 115.301 30.7967 c
115.516 30.667299 115.623 30.457399 115.623 30.167 c
115.623 30.025 115.603 29.9161 115.564 29.8403 c
h
113.312 27.2885 m
113.127 27.430599 113.034 27.624701 113.034 27.8708 c
113.034 28.1959 113.169 28.432699 113.439 28.580999 c
113.598 28.669399 113.837 28.7341 114.155 28.775101 c
114.687 28.8414 l
114.849 28.8603 115.015 28.891899 115.184 28.9361 c
115.353 28.980301 115.491 29.0355 115.598 29.101801 c
115.598 28.4153 l
115.598 27.891399 115.355 27.5142 114.867 27.2838 c
114.578 27.144899 114.279 27.0755 113.97 27.0755 c
113.717 27.0755 113.497 27.1465 113.312 27.2885 c
h
W*
0 0 132 43 rc
111.117 32.715099 m
118.056 32.715099 l
118.056 25.351101 l
111.117 25.351101 l
h
f
Q
q
105.926 31.416901 m
105.757 31.303301 105.569 31.121799 105.361 30.8724 c
105.361 31.591999 l
104.493 31.591999 l
104.493 26.521601 l
105.371 26.521601 l
105.371 29.210699 l
105.371 29.864 105.505 30.315399 105.775 30.564699 c
106.048 30.813999 106.35 30.9387 106.682 30.9387 c
107.046 30.9387 107.295 30.820299 107.428 30.583599 c
107.512 30.4258 107.555 30.1749 107.555 29.8309 c
107.555 26.521601 l
108.447 26.521601 l
108.447 29.4711 l
108.447 29.995001 108.57 30.368999 108.817 30.5931 c
109.068 30.8172 109.365 30.929199 109.71 30.929199 c
109.96 30.929199 110.171 30.8661 110.344 30.739901 c
110.519 30.6136 110.607 30.381599 110.607 30.0439 c
110.607 26.521601 l
111.518 26.521601 l
111.518 29.8972 l
111.518 30.345301 111.45 30.702 111.314 30.9671 c
111.06 31.459499 110.582 31.7057 109.88 31.7057 c
109.552 31.7057 109.256 31.6394 108.993 31.5068 c
108.73 31.377399 108.501 31.177 108.306 30.9056 c
108.189 31.126499 108.059 31.2938 107.916 31.4074 c
107.662 31.606199 107.327 31.7057 106.911 31.7057 c
106.544 31.7057 106.216 31.6094 105.926 31.416901 c
h
W
0 0 132 43 rc
103.493 32.7057 m
112.518 32.7057 l
112.518 25.521601 l
103.493 25.521601 l
h
f
Q
q
100.3885 27.5916 m
100.304 27.755699 100.2617 27.9671 100.2617 28.226 c
100.2617 31.5921 l
99.364601 31.5921 l
99.364601 28.1455 l
99.364601 27.7131 99.437798 27.3675 99.584 27.1087 c
99.853798 26.625799 100.3609 26.3843 101.105 26.3843 c
101.583 26.3843 101.989 26.516899 102.324 26.782 c
102.493 26.914499 102.634 27.077101 102.748 27.2696 c
102.738 26.521601 l
103.567 26.521601 l
103.567 31.5921 l
102.69 31.5921 l
102.69 29.101801 l
102.69 28.6063 102.63 28.216499 102.509 27.9324 c
102.288 27.402201 101.872 27.1371 101.261 27.1371 c
100.835 27.1371 100.544 27.288601 100.3885 27.5916 c
h
W
0 0 132 43 rc
98.364601 32.592098 m
104.567 32.592098 l
104.567 25.3843 l
98.364601 25.3843 l
h
f
Q
q
88.781403 29.9398 m
88.739197 29.763 88.718002 29.5089 88.718002 29.1775 c
88.718002 26.521601 l
87.8405 26.521601 l
87.8405 31.591999 l
88.674202 31.591999 l
88.674202 30.8724 l
88.921204 31.1691 89.1828 31.3822 89.459099 31.5116 c
89.735397 31.641001 90.042603 31.7057 90.3806 31.7057 c
91.121696 31.7057 91.6222 31.4548 91.882202 30.9529 c
92.0252 30.678301 92.096802 30.2854 92.096802 29.774099 c
92.096802 26.521601 l
91.204498 26.521601 l
91.204498 29.717199 l
91.204498 30.0266 91.157402 30.2759 91.063202 30.4653 c
90.907097 30.780899 90.624397 30.9387 90.214798 30.9387 c
90.006798 30.9387 89.836197 30.9182 89.702904 30.877199 c
89.462402 30.807699 89.251099 30.6689 89.069099 30.460501 c
88.922798 30.293301 88.826897 30.119699 88.781403 29.9398 c
h
W
0 0 132 43 rc
86.8405 32.7057 m
93.096802 32.7057 l
93.096802 25.521601 l
86.8405 25.521601 l
h
f
Q
q
82.931602 27.1087 m
82.785301 27.3675 82.712196 27.7131 82.712196 28.1455 c
82.712196 31.5921 l
83.609299 31.5921 l
83.609299 28.226 l
83.609299 27.9671 83.651497 27.755699 83.736 27.5916 c
83.891998 27.288601 84.182899 27.1371 84.608704 27.1371 c
85.219803 27.1371 85.635803 27.402201 85.856903 27.9324 c
85.977097 28.216499 86.0373 28.6063 86.0373 29.101801 c
86.0373 31.5921 l
86.914803 31.5921 l
86.914803 26.521601 l
86.085999 26.521601 l
86.095802 27.2696 l
85.982002 27.077101 85.840599 26.914499 85.6716 26.782 c
85.3368 26.516899 84.930496 26.3843 84.452698 26.3843 c
83.708397 26.3843 83.201302 26.625799 82.931602 27.1087 c
h
W
0 0 132 43 rc
81.712196 32.592098 m
87.914803 32.592098 l
87.914803 25.3843 l
81.712196 25.3843 l
h
f
Q
q
79.787598 30.3895 m
79.550301 30.114901 79.431702 29.797701 79.431702 29.437901 c
79.431702 26.521601 l
78.5541 26.521601 l
78.5541 31.591999 l
79.387802 31.591999 l
79.387802 30.7162 l
79.4561 30.8866 79.623398 31.093399 79.889999 31.336399 c
80.156502 31.5826 80.463699 31.7057 80.811401 31.7057 c
80.827698 31.7057 80.855301 31.7041 80.894302 31.700899 c
80.933296 31.6978 81 31.6915 81.0942 31.681999 c
81.0942 30.782499 l
81.042198 30.791901 80.9935 30.7983 80.947998 30.801399 c
80.905701 30.8046 80.858597 30.806101 80.806602 30.806101 c
80.364502 30.806101 80.024902 30.667299 79.787598 30.3895 c
h
W
0 0 132 43 rc
77.5541 32.7057 m
82.0942 32.7057 l
82.0942 25.521601 l
77.5541 25.521601 l
h
f
Q
q
76.219597 29.594101 m
76.421097 29.6194 76.556 29.7015 76.624199 29.8403 c
76.6632 29.9161 76.682701 30.025 76.682701 30.167 c
76.682701 30.457399 76.5755 30.667299 76.361 30.7967 c
76.149696 30.929199 75.845802 30.995501 75.449203 30.995501 c
74.990898 30.995501 74.665901 30.875601 74.474098 30.6357 c
74.366898 30.503099 74.296997 30.305901 74.264503 30.0439 c
73.445396 30.0439 l
73.4617 30.6688 73.669701 31.1028 74.069504 31.3458 c
74.472504 31.591999 74.938904 31.715099 75.468697 31.715099 c
76.083099 31.715099 76.582001 31.6015 76.9655 31.3743 c
77.345802 31.146999 77.535896 30.793501 77.535896 30.313801 c
77.535896 27.3927 l
77.535896 27.3043 77.553802 27.233299 77.5896 27.1796 c
77.628601 27.125999 77.708199 27.099199 77.828499 27.099199 c
77.8675 27.099199 77.9114 27.1007 77.960098 27.103901 c
78.008904 27.110201 78.060898 27.118099 78.116096 27.1276 c
78.116096 26.4979 l
77.979599 26.459999 77.875603 26.4363 77.8041 26.426901 c
77.732597 26.4174 77.635101 26.412701 77.511597 26.412701 c
77.209297 26.412701 76.989899 26.5168 76.853401 26.7251 c
76.781898 26.8356 76.731499 26.9918 76.702202 27.1938 c
76.523499 26.9666 76.266701 26.7693 75.9319 26.601999 c
75.597099 26.434799 75.228203 26.351101 74.825203 26.351101 c
74.340897 26.351101 73.944298 26.4932 73.635597 26.777201 c
73.330002 27.0644 73.177299 27.422701 73.177299 27.8519 c
73.177299 28.322201 73.3284 28.686701 73.630699 28.945499 c
73.932999 29.204399 74.329498 29.363701 74.820297 29.4237 c
76.219597 29.594101 l
h
74.093903 27.8708 m
74.093903 27.624701 74.186501 27.430599 74.371803 27.2885 c
74.556999 27.1465 74.776398 27.0755 75.0299 27.0755 c
75.338699 27.0755 75.637802 27.144899 75.927002 27.2838 c
76.414597 27.5142 76.658401 27.891399 76.658401 28.4153 c
76.658401 29.101801 l
76.551102 29.0355 76.413002 28.980301 76.243896 28.9361 c
76.074898 28.891899 75.909203 28.8603 75.746597 28.8414 c
75.215202 28.775101 l
74.896698 28.7341 74.657799 28.669399 74.498497 28.580999 c
74.228699 28.432699 74.093903 28.1959 74.093903 27.8708 c
h
W*
0 0 132 43 rc
72.177299 32.715099 m
79.116096 32.715099 l
79.116096 25.351101 l
72.177299 25.351101 l
h
f
Q
q
69.643303 26.601999 m
69.487198 26.696699 69.3134 26.859301 69.121597 27.089701 c
69.121597 24.5 l
68.244003 24.5 l
68.244003 31.568399 l
69.097198 31.568399 l
69.097198 30.896099 l
69.272697 31.126499 69.4645 31.3048 69.672501 31.431101 c
69.9683 31.620399 70.316101 31.715099 70.715897 31.715099 c
71.307404 31.715099 71.809601 31.4942 72.222397 31.052299 c
72.635201 30.6136 72.841599 29.9855 72.841599 29.1681 c
72.841599 28.0634 72.544197 27.2743 71.949402 26.8009 c
71.572304 26.500999 71.133499 26.351101 70.633003 26.351101 c
70.2397 26.351101 69.909798 26.434799 69.643303 26.601999 c
h
70.515999 27.0944 m
70.925499 27.0944 71.265198 27.260099 71.535004 27.591499 c
71.807999 27.9261 71.944504 28.424801 71.944504 29.087601 c
71.944504 29.4916 71.884399 29.8388 71.764099 30.129101 c
71.536598 30.687799 71.120499 30.9671 70.515999 30.9671 c
69.908203 30.9671 69.492104 30.672001 69.267799 30.0818 c
69.147598 29.766199 69.087502 29.365299 69.087502 28.879299 c
69.087502 28.4879 69.147598 28.1549 69.267799 27.880301 c
69.495399 27.3564 69.9114 27.0944 70.515999 27.0944 c
h
W*
0 0 132 43 rc
67.244003 32.715099 m
73.841599 32.715099 l
73.841599 23.5 l
67.244003 23.5 l
h
f
Q
q
64.047798 26.744101 m
63.9016 26.949301 63.8284 27.214399 63.8284 27.539499 c
63.8284 30.896099 l
63.121498 30.896099 l
63.121498 31.5921 l
63.8284 31.5921 l
63.8284 33.00766 l
64.715797 33.00766 l
64.715797 31.5921 l
65.5495 31.5921 l
65.5495 30.896099 l
64.715797 30.896099 l
64.715797 27.5868 l
64.715797 27.410101 64.777496 27.2917 64.901001 27.2318 c
64.969299 27.1971 65.083 27.179701 65.242302 27.179701 c
65.378799 27.179701 l
65.427597 27.1828 65.484497 27.187599 65.5495 27.193899 c
65.5495 26.521601 l
65.4487 26.4932 65.343102 26.4727 65.232597 26.4601 c
65.125298 26.447399 65.008301 26.441099 64.8815 26.441099 c
64.472 26.441099 64.194099 26.542101 64.047798 26.744101 c
h
W
0 0 132 43 rc
62.121498 34.00766 m
66.5495 34.00766 l
66.5495 25.441099 l
62.121498 25.441099 l
h
f
Q
q
57.774502 27.5916 m
57.689999 27.755699 57.6478 27.9671 57.6478 28.226 c
57.6478 31.5921 l
56.750702 31.5921 l
56.750702 28.1455 l
56.750702 27.7131 56.823799 27.3675 56.9701 27.1087 c
57.239899 26.625799 57.746899 26.3843 58.491199 26.3843 c
58.969002 26.3843 59.375301 26.516899 59.710098 26.782 c
59.879101 26.914499 60.0205 27.077101 60.1343 27.2696 c
60.1245 26.521601 l
60.9534 26.521601 l
60.9534 31.5921 l
60.075802 31.5921 l
60.075802 29.101801 l
60.075802 28.6063 60.015598 28.216499 59.895401 27.9324 c
59.6744 27.402201 59.258301 27.1371 58.647301 27.1371 c
58.2215 27.1371 57.930599 27.288601 57.774502 27.5916 c
h
W
0 0 132 43 rc
55.750702 32.592098 m
61.9534 32.592098 l
61.9534 25.3843 l
55.750702 25.3843 l
h
f
Q
q
48.659 31.7388 m
49.331799 31.7388 49.9006 31.521 50.365398 31.085501 c
50.8302 30.6499 51.062599 30.009199 51.062599 29.1633 c
51.062599 28.3459 50.8578 27.670401 50.448299 27.136999 c
50.0387 26.6036 49.403301 26.336901 48.541901 26.336901 c
47.823601 26.336901 47.253201 26.5721 46.830601 27.042299 c
46.4081 27.5158 46.1968 28.1502 46.1968 28.945499 c
46.1968 29.797701 46.419498 30.476299 46.864799 30.9813 c
47.310101 31.4863 47.9081 31.7388 48.659 31.7388 c
h
48.624802 27.0707 m
49.2066 27.0707 49.604801 27.2838 49.819302 27.7099 c
50.037102 28.139099 50.146 28.6157 50.146 29.139601 c
50.146 29.6131 50.068001 29.9981 49.911999 30.2948 c
49.664902 30.7619 49.239101 30.995501 48.634602 30.995501 c
48.098301 30.995501 47.708199 30.7967 47.4645 30.399 c
47.220699 30.001301 47.098801 29.521601 47.098801 28.9597 c
47.098801 28.42 47.220699 27.970301 47.4645 27.6105 c
47.708199 27.250601 48.095001 27.0707 48.624802 27.0707 c
h
W*
0 0 132 43 rc
45.1968 32.7388 m
52.062599 32.7388 l
52.062599 25.336901 l
45.1968 25.336901 l
h
f
Q
q
44.934898 30.3895 m
44.697601 30.114901 44.578999 29.797701 44.578999 29.437901 c
44.578999 26.521601 l
43.701401 26.521601 l
43.701401 31.591999 l
44.535099 31.591999 l
44.535099 30.7162 l
44.603401 30.8866 44.770802 31.093399 45.0373 31.336399 c
45.303799 31.5826 45.611 31.7057 45.958801 31.7057 c
45.974998 31.7057 46.002602 31.7041 46.041599 31.700899 c
46.0807 31.6978 46.147301 31.6915 46.241501 31.681999 c
46.241501 30.782499 l
46.189499 30.791901 46.1408 30.7983 46.095299 30.801399 c
46.053001 30.8046 46.005901 30.806101 45.953899 30.806101 c
45.511799 30.806101 45.172199 30.667299 44.934898 30.3895 c
h
W
0 0 132 43 rc
42.701401 32.7057 m
47.241501 32.7057 l
47.241501 25.521601 l
42.701401 25.521601 l
h
f
Q
q
39.8993 26.601999 m
39.743301 26.696699 39.569401 26.859301 39.377602 27.089701 c
39.377602 24.5 l
38.5 24.5 l
38.5 31.568399 l
39.353199 31.568399 l
39.353199 30.896099 l
39.528702 31.126499 39.720501 31.3048 39.928501 31.431101 c
40.2243 31.620399 40.572102 31.715099 40.971901 31.715099 c
41.5634 31.715099 42.065601 31.4942 42.478401 31.052299 c
42.891201 30.6136 43.097599 29.9855 43.097599 29.1681 c
43.097599 28.0634 42.800201 27.2743 42.205399 26.8009 c
41.8283 26.500999 41.3895 26.351101 40.889 26.351101 c
40.495701 26.351101 40.165798 26.434799 39.8993 26.601999 c
h
40.771999 27.0944 m
41.181499 27.0944 41.521198 27.260099 41.791 27.591499 c
42.063999 27.9261 42.2005 28.424801 42.2005 29.087601 c
42.2005 29.4916 42.1404 29.8388 42.0201 30.129101 c
41.792599 30.687799 41.376499 30.9671 40.771999 30.9671 c
40.1642 30.9671 39.7481 30.672001 39.523899 30.0818 c
39.403599 29.766199 39.343498 29.365299 39.343498 28.879299 c
39.343498 28.4879 39.403599 28.1549 39.523899 27.880301 c
39.7514 27.3564 40.1674 27.0944 40.771999 27.0944 c
h
W*
0 0 132 43 rc
37.5 32.715099 m
44.097599 32.715099 l
44.097599 23.5 l
37.5 23.5 l
h
f
Q
q
117.47 26.521601 0.89200002 5.0468001 rc
116.47 32.568401 m
119.362 32.568401 l
119.362 25.521601 l
116.47 25.521601 l
h
f
Q
q
117.47 32.510521 0.89200002 0.96581 rc
116.47 34.47633 m
119.362 34.47633 l
119.362 31.510521 l
116.47 31.510521 l
h
f
Q
q
61.879002 26.521601 0.89219999 5.0468001 rc
60.879002 32.568401 m
63.771198 32.568401 l
63.771198 25.521601 l
60.879002 25.521601 l
h
f
Q
q
61.879002 32.510521 0.89219999 0.96581 rc
60.879002 34.47633 m
63.771198 34.47633 l
63.771198 31.510521 l
60.879002 31.510521 l
h
f
ep
end
%%Trailer
%%EOF
