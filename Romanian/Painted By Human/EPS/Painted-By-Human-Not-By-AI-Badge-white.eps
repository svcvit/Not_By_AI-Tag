%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.0 (Build 23A344) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
q
14.4605 18.342501 m
17.9266 15.5357 22.8836 15.5357 26.349701 18.342501 c
25.009501 19.9974 l
22.3248 17.8234 18.485399 17.8234 15.8007 19.9974 c
14.4605 18.342501 l
h
W
0 0 132 43 rc
13.4605 20.9974 m
27.349701 20.9974 l
27.349701 14.5357 l
13.4605 14.5357 l
h
f
Q
q
15.904 21.986601 2.1296 2.8769 rc
14.904 25.863501 m
19.0336 25.863501 l
19.0336 20.986601 l
14.904 20.986601 l
h
f
Q
q
22.511999 21.986601 2.1294999 2.8769 rc
21.511999 25.863501 m
25.6415 25.863501 l
25.6415 20.986601 l
21.511999 20.986601 l
h
f
Q
q
31.5 21 m
31.5 14.6487 26.351299 9.5 20 9.5 c
13.6487 9.5 8.5 14.6487 8.5 21 c
8.5 27.351299 13.6487 32.5 20 32.5 c
26.351299 32.5 31.5 27.351299 31.5 21 c
h
29.370501 21 m
29.370501 15.8248 25.1752 11.6295 20 11.6295 c
14.8248 11.6295 10.6295 15.8248 10.6295 21 c
10.6295 26.1752 14.8248 30.370501 20 30.370501 c
25.1752 30.370501 29.370501 26.1752 29.370501 21 c
h
W*
0 0 132 43 rc
7.5 33.5 m
32.5 33.5 l
32.5 8.5 l
7.5 8.5 l
h
f
Q
q
87.647301 33.5 m
87.699402 33.293159 87.775902 33.137241 87.876801 33.03223 c
88.059097 32.84449 88.3424 32.750622 88.726601 32.750622 c
89.081497 32.750622 89.346802 32.84449 89.522598 33.03223 c
89.623596 33.14043 89.700104 33.296349 89.752197 33.5 c
90.235703 33.5 l
90.170502 33.03223 90.001198 32.694931 89.727699 32.488098 c
89.457497 32.2813 89.091202 32.177799 88.628899 32.177799 c
88.052597 32.177799 87.639099 32.367199 87.388397 32.74585 c
87.258202 32.943138 87.178398 33.194519 87.149101 33.5 c
87.647301 33.5 l
h
W
0 0 132 43 rc
86.149101 34.5 m
91.235703 34.5 l
91.235703 31.177799 l
86.149101 31.177799 l
h
f
Q
q
79.2556 9.9180002 m
79.719002 10.1734 80.131798 10.5827 80.494102 11.1458 c
80.494102 9.8309002 l
82.962097 9.8309002 l
82.962097 22.648899 l
80.387199 22.648899 l
80.387199 18.1208 l
80.102097 18.567801 79.730797 18.916201 79.273499 19.1658 c
78.816101 19.4212 78.293404 19.548901 77.705399 19.548901 c
76.428299 19.548901 75.4067 19.084499 74.640404 18.155701 c
73.880096 17.226801 73.5 15.9526 73.5 14.3329 c
73.5 12.928 73.886101 11.7757 74.658302 10.8759 c
75.436401 9.9819002 76.3927 9.5348997 77.527199 9.5348997 c
78.216202 9.5348997 78.792297 9.6625996 79.2556 9.9180002 c
h
76.653999 12.4172 m
76.2976 12.9396 76.1194 13.6392 76.1194 14.5158 c
76.1194 15.3285 76.291702 16.0077 76.6362 16.5534 c
76.986702 17.1049 77.533096 17.380699 78.275597 17.380699 c
78.762604 17.380699 79.1903 17.2297 79.558601 16.9279 c
80.158501 16.4286 80.458504 15.5985 80.458504 14.4374 c
80.458504 13.6072 80.271301 12.9309 79.897102 12.4085 c
79.522903 11.886 78.976501 11.6247 78.257797 11.6247 c
77.539001 11.6247 77.004501 11.8889 76.653999 12.4172 c
h
W*
0 0 132 43 rc
72.5 23.648899 m
83.962097 23.648899 l
83.962097 8.5348997 l
72.5 8.5348997 l
h
f
Q
q
88.553299 19.549 m
86.919899 19.549 85.767601 19.131001 85.096397 18.295 c
84.674698 17.761 84.437103 17.0788 84.383598 16.248699 c
86.833801 16.248699 l
86.893204 16.614401 87.012001 16.904699 87.190201 17.119499 c
87.439598 17.4097 87.864304 17.554899 88.464203 17.554899 c
88.998802 17.554899 89.402702 17.479401 89.676003 17.328501 c
89.955101 17.1833 90.094704 16.9163 90.094704 16.5273 c
90.094704 16.208 89.913597 15.9729 89.551201 15.822 c
89.349297 15.7349 89.013702 15.6623 88.544403 15.6043 c
87.680199 15.4998 l
86.700104 15.3779 85.957703 15.1747 85.452797 14.8902 c
84.532097 14.3678 84.0718 13.5231 84.0718 12.3563 c
84.0718 11.4564 84.356903 10.7598 84.927101 10.2664 c
85.503304 9.7786999 86.230904 9.5348997 87.110001 9.5348997 c
87.799004 9.5348997 88.416702 9.6886997 88.963203 9.9963999 c
89.420601 10.2576 89.824501 10.574 90.174896 10.9456 c
90.192703 10.7308 90.216499 10.5392 90.246201 10.3708 c
90.275902 10.2025 90.3293 10.0225 90.406601 9.8310003 c
93.168602 9.8310003 l
93.168602 10.1967 l
93.002197 10.2722 92.877502 10.3679 92.794296 10.4841 c
92.711197 10.6002 92.660698 10.8208 92.642899 11.1459 c
92.630997 11.5754 92.625099 11.9412 92.625099 12.243 c
92.625099 16.597 l
92.625099 17.740601 92.212196 18.518499 91.386597 18.9307 c
90.560997 19.342899 89.6166 19.549 88.553299 19.549 c
h
87.858398 11.3374 m
87.513901 11.3374 87.222801 11.4332 86.985199 11.6248 c
86.741699 11.8106 86.619904 12.1153 86.619904 12.5391 c
86.619904 13.0151 86.816002 13.3664 87.208 13.5928 c
87.439598 13.7263 87.822701 13.8395 88.3573 13.9324 c
88.927498 14.0369 l
89.2127 14.0891 89.435402 14.1443 89.595802 14.2023 c
89.7621 14.2662 89.9254 14.3475 90.0858 14.4461 c
90.0858 13.5231 l
90.068001 12.693 89.8274 12.1211 89.364098 11.8077 c
88.906799 11.4942 88.4048 11.3374 87.858398 11.3374 c
h
W*
0 0 132 43 rc
83.0718 20.549 m
94.168602 20.549 l
94.168602 8.5348997 l
83.0718 8.5348997 l
h
f
Q
q
62.815102 16.414101 m
63.135799 17.128201 63.726799 17.485201 64.588097 17.485201 c
65.289001 17.485201 65.764198 17.2414 66.013603 16.7537 c
66.1502 16.4867 66.218498 16.1035 66.218498 15.6043 c
66.218498 9.8310003 l
68.820198 9.8310003 l
68.820198 16.222601 l
68.820198 17.4126 68.499397 18.2631 67.857903 18.774 c
67.222397 19.2906 66.402702 19.549 65.398903 19.549 c
64.597 19.549 63.9347 19.357401 63.411999 18.9743 c
63.120998 18.759501 62.812099 18.408199 62.485401 17.920601 c
62.485401 19.305201 l
60.035198 19.305201 l
60.035198 9.8310003 l
62.565601 9.8310003 l
62.565601 14.9686 l
62.565601 15.555 62.648701 16.0368 62.815102 16.414101 c
h
W
0 0 132 43 rc
59.035198 20.549 m
69.820198 20.549 l
69.820198 8.8310003 l
59.035198 8.8310003 l
h
f
Q
q
58.738201 14.5593 m
58.738201 15.9293 58.3284 17.116501 57.508701 18.1208 c
56.688999 19.125099 55.444599 19.6273 53.7756 19.6273 c
52.106499 19.6273 50.862099 19.125099 50.0424 18.1208 c
49.222698 17.116501 48.812901 15.9293 48.812901 14.5593 c
48.812901 13.166 49.222698 11.973 50.0424 10.9803 c
50.862099 9.9933996 52.106499 9.5 53.7756 9.5 c
55.444599 9.5 56.688999 9.9933996 57.508701 10.9803 c
58.3284 11.973 58.738201 13.166 58.738201 14.5593 c
h
52.0471 16.7537 m
52.451 17.2703 53.0242 17.5287 53.766602 17.5287 c
54.509102 17.5287 55.0793 17.2703 55.477299 16.7537 c
55.875301 16.2428 56.074299 15.5114 56.074299 14.5593 c
56.074299 13.6072 55.875301 12.8729 55.477299 12.3562 c
55.0793 11.8395 54.509102 11.5812 53.766602 11.5812 c
53.0242 11.5812 52.451 11.8395 52.0471 12.3562 c
51.649101 12.8729 51.4501 13.6072 51.4501 14.5593 c
51.4501 15.5114 51.649101 16.2428 52.0471 16.7537 c
h
W*
0 0 132 43 rc
47.812901 20.6273 m
59.738201 20.6273 l
59.738201 8.5 l
47.812901 8.5 l
h
f
Q
q
41.600101 16.414101 m
41.920799 17.128201 42.511799 17.485201 43.3731 17.485201 c
44.074001 17.485201 44.549198 17.2414 44.798599 16.7537 c
44.935299 16.4867 45.003601 16.1035 45.003601 15.6043 c
45.003601 9.8310003 l
47.605202 9.8310003 l
47.605202 16.222601 l
47.605202 17.4126 47.284401 18.2631 46.643002 18.774 c
46.007401 19.2906 45.187698 19.549 44.183899 19.549 c
43.382 19.549 42.7197 19.357401 42.196999 18.9743 c
41.905998 18.759501 41.597099 18.408199 41.270401 17.920601 c
41.270401 19.305201 l
38.820301 19.305201 l
38.820301 9.8310003 l
41.350601 9.8310003 l
41.350601 14.9686 l
41.350601 15.555 41.4338 16.0368 41.600101 16.414101 c
h
W
0 0 132 43 rc
37.820301 20.549 m
48.605202 20.549 l
48.605202 8.8310003 l
37.820301 8.8310003 l
h
f
Q
q
110.258 9.8338003 m
106.024 22.602501 l
103.201 22.602501 l
98.9347 9.8338003 l
101.546 9.8338003 l
102.374 12.4586 l
106.778 12.4586 l
107.549 9.8338003 l
110.258 9.8338003 l
h
104.588 19.683201 m
106.081 14.6589 l
103.047 14.6589 l
104.588 19.683201 l
h
W*
0 0 132 43 rc
97.9347 23.602501 m
111.258 23.602501 l
111.258 8.8338003 l
97.9347 8.8338003 l
h
f
Q
q
89.820503 29.6672 m
89.752197 29.527201 89.616997 29.444401 89.415199 29.419001 c
88.013603 29.2472 l
87.521896 29.186701 87.124702 29.025999 86.821899 28.7651 c
86.519096 28.504101 86.367798 28.1366 86.367798 27.6625 c
86.367798 27.2297 86.520798 26.8685 86.826797 26.579 c
87.136101 26.292601 87.533302 26.149401 88.018402 26.149401 c
88.422203 26.149401 88.791702 26.2337 89.127098 26.402399 c
89.462402 26.570999 89.719597 26.769899 89.898697 26.999001 c
89.928001 26.795401 89.978401 26.637899 90.050102 26.526501 c
90.186798 26.3165 90.406601 26.2115 90.709396 26.2115 c
90.833099 26.2115 90.930801 26.2162 91.002403 26.2258 c
91.073997 26.2353 91.1782 26.259199 91.315002 26.2974 c
91.315002 26.932199 l
91.259598 26.9226 91.207497 26.9147 91.158699 26.9083 c
91.109802 26.9051 91.065903 26.903601 91.026802 26.903601 c
90.906303 26.903601 90.826599 26.930599 90.787498 26.984699 c
90.751701 27.038799 90.733803 27.110399 90.733803 27.199499 c
90.733803 30.144501 l
90.733803 30.628201 90.543297 30.9846 90.162399 31.213699 c
89.778198 31.442801 89.278397 31.557301 88.663101 31.557301 c
88.132401 31.557301 87.665199 31.433201 87.261497 31.184999 c
86.861 30.940001 86.652603 30.502501 86.636398 29.8724 c
87.456802 29.8724 l
87.489403 30.136499 87.559402 30.3354 87.666801 30.469101 c
87.858902 30.710899 88.184502 30.8318 88.6436 30.8318 c
89.040802 30.8318 89.3452 30.764999 89.556801 30.631399 c
89.771698 30.5009 89.879097 30.289301 89.879097 29.9965 c
89.879097 29.8533 89.859596 29.743601 89.820503 29.6672 c
h
89.1222 27.089701 m
88.832397 26.949699 88.532898 26.8797 88.223602 26.8797 c
87.969597 26.8797 87.749802 26.9513 87.564301 27.0945 c
87.3787 27.2377 87.285896 27.433399 87.285896 27.681601 c
87.285896 28.0093 87.420998 28.247999 87.6912 28.397499 c
87.8508 28.486601 88.090103 28.551901 88.409103 28.593201 c
88.941498 28.660101 l
89.104301 28.679199 89.270302 28.711 89.439598 28.755501 c
89.608902 28.8001 89.747299 28.855801 89.854698 28.9226 c
89.854698 28.230499 l
89.854698 27.702299 89.610497 27.322001 89.1222 27.089701 c
h
W*
0 0 132 43 rc
85.367798 32.557301 m
92.315002 32.557301 l
92.315002 25.149401 l
85.367798 25.149401 l
h
f
Q
q
119.832 33.5 m
119.884 33.293159 119.961 33.137241 120.062 33.03223 c
120.244 32.84449 120.527 32.750622 120.912 32.750622 c
121.267 32.750622 121.532 32.84449 121.708 33.03223 c
121.809 33.14043 121.885 33.296349 121.937 33.5 c
122.421 33.5 l
122.356 33.03223 122.186 32.694931 121.913 32.488098 c
121.643 32.2813 121.276 32.177799 120.814 32.177799 c
120.238 32.177799 119.824 32.367199 119.574 32.74585 c
119.443 32.943138 119.364 33.194519 119.334 33.5 c
119.832 33.5 l
h
W
0 0 132 43 rc
118.334 34.5 m
123.421 34.5 l
123.421 31.177799 l
118.334 31.177799 l
h
f
Q
q
122.006 29.6672 m
121.937 29.527201 121.802 29.444401 121.6 29.419001 c
120.199 29.2472 l
119.707 29.186701 119.31 29.025999 119.007 28.7651 c
118.704 28.504101 118.553 28.1366 118.553 27.6625 c
118.553 27.2297 118.706 26.8685 119.012 26.579 c
119.321 26.292601 119.718 26.149401 120.204 26.149401 c
120.607 26.149401 120.977 26.2337 121.312 26.402399 c
121.647 26.570999 121.905 26.769899 122.084 26.999001 c
122.113 26.795401 122.163 26.637899 122.235 26.526501 c
122.372 26.3165 122.592 26.2115 122.894 26.2115 c
123.018 26.2115 123.116 26.2162 123.187 26.2258 c
123.259 26.2353 123.363 26.259199 123.5 26.2974 c
123.5 26.932199 l
123.445 26.9226 123.393 26.9147 123.344 26.9083 c
123.295 26.9051 123.251 26.903601 123.212 26.903601 c
123.091 26.903601 123.012 26.930599 122.973 26.984699 c
122.937 27.038799 122.919 27.110399 122.919 27.199499 c
122.919 30.144501 l
122.919 30.628201 122.728 30.9846 122.347 31.213699 c
121.963 31.442801 121.463 31.557301 120.848 31.557301 c
120.317 31.557301 119.85 31.433201 119.447 31.184999 c
119.046 30.940001 118.838 30.502501 118.821 29.8724 c
119.642 29.8724 l
119.674 30.136499 119.744 30.3354 119.852 30.469101 c
120.044 30.710899 120.37 30.8318 120.829 30.8318 c
121.226 30.8318 121.53 30.764999 121.742 30.631399 c
121.957 30.5009 122.064 30.289301 122.064 29.9965 c
122.064 29.8533 122.045 29.743601 122.006 29.6672 c
h
121.307 27.089701 m
121.017 26.949699 120.718 26.8797 120.409 26.8797 c
120.155 26.8797 119.935 26.9513 119.749 27.0945 c
119.564 27.2377 119.471 27.433399 119.471 27.681601 c
119.471 28.0093 119.606 28.247999 119.876 28.397499 c
120.036 28.486601 120.275 28.551901 120.594 28.593201 c
121.127 28.660101 l
121.289 28.679199 121.455 28.711 121.625 28.755501 c
121.794 28.8001 121.932 28.855801 122.04 28.9226 c
122.04 28.230499 l
122.04 27.702299 121.796 27.322001 121.307 27.089701 c
h
W*
0 0 132 43 rc
117.553 32.557301 m
124.5 32.557301 l
124.5 25.149401 l
117.553 25.149401 l
h
f
Q
q
114.372 29.7673 m
114.33 29.589199 114.309 29.333 114.309 28.998899 c
114.309 26.321199 l
113.43 26.321199 l
113.43 31.433201 l
114.265 31.433201 l
114.265 30.707701 l
114.512 31.0068 114.774 31.2216 115.051 31.351999 c
115.328 31.4825 115.635 31.547701 115.974 31.547701 c
116.716 31.547701 117.218 31.294701 117.478 30.788799 c
117.621 30.511999 117.693 30.115801 117.693 29.6003 c
117.693 26.321199 l
116.799 26.321199 l
116.799 29.542999 l
116.799 29.8549 116.752 30.106199 116.658 30.297199 c
116.501 30.6154 116.218 30.7745 115.808 30.7745 c
115.6 30.7745 115.429 30.753799 115.295 30.7124 c
115.054 30.642401 114.843 30.502399 114.66 30.2924 c
114.514 30.123699 114.418 29.9487 114.372 29.7673 c
h
W
0 0 132 43 rc
112.43 32.547699 m
118.693 32.547699 l
118.693 25.321199 l
112.43 25.321199 l
h
f
Q
q
110.865 29.419001 m
111.067 29.444401 111.202 29.5271 111.271 29.6672 c
111.31 29.7435 111.329 29.8533 111.329 29.9965 c
111.329 30.289301 111.222 30.5009 111.007 30.6313 c
110.795 30.764999 110.491 30.8318 110.094 30.8318 c
109.635 30.8318 109.309 30.710899 109.117 30.469 c
109.009 30.3354 108.939 30.136499 108.907 29.8724 c
108.086 29.8724 l
108.103 30.502501 108.311 30.940001 108.712 31.184999 c
109.115 31.433201 109.582 31.557301 110.113 31.557301 c
110.729 31.557301 111.228 31.442801 111.612 31.2136 c
111.993 30.984501 112.184 30.628099 112.184 30.144501 c
112.184 27.199499 l
112.184 27.110399 112.202 27.038799 112.238 26.984699 c
112.277 26.930599 112.356 26.9035 112.477 26.9035 c
112.516 26.9035 112.56 26.9051 112.609 26.9083 c
112.658 26.9147 112.71 26.9226 112.765 26.932199 c
112.765 26.2973 l
112.628 26.259199 112.524 26.2353 112.452 26.2257 c
112.381 26.2162 112.283 26.211399 112.159 26.211399 c
111.857 26.211399 111.637 26.316401 111.5 26.526501 c
111.429 26.6378 111.378 26.7953 111.349 26.999001 c
111.17 26.769899 110.912 26.570999 110.577 26.4023 c
110.242 26.2337 109.872 26.149401 109.469 26.149401 c
108.983 26.149401 108.586 26.292601 108.277 26.579 c
107.971 26.8685 107.818 27.2297 107.818 27.6625 c
107.818 28.1366 107.969 28.504101 108.272 28.764999 c
108.575 29.025999 108.972 29.186701 109.464 29.247101 c
110.865 29.419001 l
h
108.736 27.681499 m
108.736 27.4333 108.829 27.2376 109.014 27.0944 c
109.2 26.9513 109.42 26.8797 109.674 26.8797 c
109.983 26.8797 110.282 26.949699 110.572 27.089701 c
111.061 27.322001 111.305 27.7022 111.305 28.230499 c
111.305 28.9226 l
111.197 28.8557 111.059 28.799999 110.89 28.755501 c
110.72 28.710899 110.554 28.6791 110.392 28.66 c
109.859 28.593201 l
109.54 28.5518 109.301 28.486601 109.141 28.397499 c
108.871 28.247999 108.736 28.0093 108.736 27.681499 c
h
W*
0 0 132 43 rc
106.818 32.557301 m
113.765 32.557301 l
113.765 25.149401 l
106.818 25.149401 l
h
f
Q
q
101.215 30.3974 m
100.945 30.146 100.81 29.691 100.81 29.032301 c
100.81 26.321199 l
99.930603 26.321199 l
99.930603 31.433201 l
100.8 31.433201 l
100.8 30.707701 l
101.008 30.959 101.197 31.142 101.366 31.256599 c
101.656 31.450701 101.985 31.547701 102.353 31.547701 c
102.77 31.547701 103.105 31.4475 103.359 31.247 c
103.502 31.1325 103.632 30.9638 103.75 30.7411 c
103.945 31.0147 104.175 31.216801 104.438 31.3472 c
104.702 31.4809 104.998 31.547701 105.327 31.547701 c
106.03 31.547701 106.509 31.2995 106.763 30.803101 c
106.9 30.535801 106.968 30.176201 106.968 29.7244 c
106.968 26.321199 l
106.055 26.321199 l
106.055 29.8724 l
106.055 30.212799 105.967 30.446699 105.791 30.573999 c
105.618 30.7013 105.407 30.7649 105.156 30.7649 c
104.811 30.7649 104.513 30.652 104.262 30.426001 c
104.015 30.2001 103.891 29.823 103.891 29.2948 c
103.891 26.321199 l
102.998 26.321199 l
102.998 29.6576 l
102.998 30.0044 102.955 30.257401 102.871 30.4165 c
102.737 30.6551 102.488 30.7745 102.123 30.7745 c
101.791 30.7745 101.488 30.6488 101.215 30.3974 c
h
W
0 0 132 43 rc
98.930603 32.547699 m
107.968 32.547699 l
107.968 25.321199 l
98.930603 25.321199 l
h
f
Q
q
94.763397 26.913 m
94.616798 27.174 94.543602 27.5224 94.543602 27.958401 c
94.543602 31.433201 l
95.4422 31.433201 l
95.4422 28.039499 l
95.4422 27.778601 95.484497 27.565399 95.569199 27.3999 c
95.725403 27.0944 96.0168 26.9417 96.443398 26.9417 c
97.055397 26.9417 97.472198 27.209 97.693604 27.743601 c
97.814003 28.030001 97.874298 28.422899 97.874298 28.922501 c
97.874298 31.433201 l
98.753304 31.433201 l
98.753304 26.321199 l
97.923103 26.321199 l
97.932899 27.0753 l
97.818901 26.881201 97.677299 26.7174 97.508003 26.5837 c
97.172699 26.316401 96.765701 26.1828 96.287102 26.1828 c
95.541496 26.1828 95.0336 26.426201 94.763397 26.913 c
h
W
0 0 132 43 rc
93.543602 32.433201 m
99.753304 32.433201 l
99.753304 25.1828 l
93.543602 25.1828 l
h
f
Q
q
85.278503 27.037201 m
85.1548 27.0977 85.092903 27.216999 85.092903 27.395201 c
85.092903 30.7316 l
85.928001 30.7316 l
85.928001 31.4333 l
85.092903 31.4333 l
85.092903 32.860432 l
84.204102 32.860432 l
84.204102 31.4333 l
83.496002 31.4333 l
83.496002 30.7316 l
84.204102 30.7316 l
84.204102 27.3475 l
84.204102 27.019699 84.277397 26.752399 84.423897 26.545601 c
84.570396 26.3419 84.848701 26.240101 85.259003 26.240101 c
85.386002 26.240101 85.503197 26.2465 85.610603 26.259199 c
85.721298 26.2719 85.827103 26.292601 85.928001 26.321301 c
85.928001 26.999001 l
85.8629 26.992701 85.806 26.9879 85.757103 26.984699 c
85.620399 26.984699 l
85.4608 26.984699 85.346901 27.002199 85.278503 27.037201 c
h
W
0 0 132 43 rc
82.496002 33.860432 m
86.928001 33.860432 l
86.928001 25.240101 l
82.496002 25.240101 l
h
f
Q
q
84.292 23.9681 m
84.4711 23.999901 84.596397 24.124001 84.668098 24.340401 c
84.7071 24.451799 84.7267 24.5616 84.7267 24.6698 c
84.7267 24.717501 l
84.7267 24.7302 84.723396 24.746099 84.716904 24.7652 c
84.292 24.7652 l
84.292 25.5958 l
85.127098 25.5958 l
85.127098 24.827299 l
85.127098 24.525 85.063599 24.2593 84.936699 24.030199 c
84.812897 23.8011 84.598099 23.6595 84.292 23.6054 c
84.292 23.9681 l
h
W
0 0 132 43 rc
83.292 26.5958 m
86.127098 26.5958 l
86.127098 22.6054 l
83.292 22.6054 l
h
f
Q
q
79.603401 29.7673 m
79.561096 29.589199 79.540001 29.333 79.540001 28.998899 c
79.540001 26.321199 l
78.660896 26.321199 l
78.660896 31.433201 l
79.496002 31.433201 l
79.496002 30.707701 l
79.743401 31.0068 80.005501 31.2216 80.282303 31.351999 c
80.558998 31.4825 80.866699 31.547701 81.205299 31.547701 c
81.947601 31.547701 82.448997 31.294701 82.709503 30.788799 c
82.852699 30.511999 82.9244 30.115801 82.9244 29.6003 c
82.9244 26.321199 l
82.030602 26.321199 l
82.030602 29.542999 l
82.030602 29.8549 81.983398 30.106199 81.889 30.297199 c
81.732697 30.6154 81.449501 30.7745 81.039299 30.7745 c
80.830902 30.7745 80.660004 30.753799 80.526497 30.7124 c
80.2855 30.642401 80.073898 30.502399 79.891602 30.2924 c
79.745102 30.123699 79.649002 29.9487 79.603401 29.7673 c
h
W
0 0 132 43 rc
77.660896 32.547699 m
83.9244 32.547699 l
83.9244 25.321199 l
77.660896 25.321199 l
h
f
Q
q
72.2435 32.994068 m
72.129501 32.828609 72.066002 32.56768 72.053001 32.2113 c
72.053001 31.409401 l
71.325302 31.409401 l
71.325302 30.7316 l
72.053001 30.7316 l
72.053001 26.321301 l
72.922302 26.321301 l
72.922302 30.7316 l
73.801399 30.7316 l
73.801399 31.409401 l
72.932098 31.409401 l
72.932098 31.9631 72.958099 32.306702 73.010201 32.440399 c
73.062302 32.577221 73.221802 32.645641 73.4888 32.645641 c
73.524597 32.645641 73.562103 32.644051 73.601097 32.640862 c
73.643501 32.640862 73.710197 32.63768 73.801399 32.631321 c
73.801399 33.414108 l
73.726501 33.420471 73.659698 33.425251 73.601097 33.428429 c
73.542503 33.43161 73.485603 33.433201 73.430199 33.433201 c
72.8442 33.433201 72.448601 33.286831 72.2435 32.994068 c
h
W
0 0 132 43 rc
70.325302 34.433201 m
74.801399 34.433201 l
74.801399 25.321301 l
70.325302 25.321301 l
h
f
Q
q
67.700996 30.922501 m
67.235497 31.361601 66.665703 31.5812 65.991699 31.5812 c
65.239601 31.5812 64.640602 31.326599 64.194504 30.817499 c
63.748501 30.3083 63.525501 29.624201 63.525501 28.764999 c
63.525501 27.9632 63.737099 27.323601 64.160301 26.846201 c
64.583603 26.372101 65.154999 26.135099 65.874496 26.135099 c
66.737297 26.135099 67.373802 26.4039 67.784103 26.9417 c
68.194298 27.4795 68.399399 28.1604 68.399399 28.9846 c
68.399399 29.8374 68.166603 30.4834 67.700996 30.922501 c
h
67.154099 27.5193 m
66.939201 27.089701 66.540298 26.874901 65.957497 26.874901 c
65.426903 26.874901 65.039398 27.056299 64.795197 27.419001 c
64.551003 27.781799 64.428902 28.235201 64.428902 28.7794 c
64.428902 29.3458 64.551003 29.829399 64.795197 30.2304 c
65.039398 30.6313 65.430099 30.8318 65.9673 30.8318 c
66.572899 30.8318 66.999397 30.5963 67.246803 30.125401 c
67.403099 29.8263 67.4813 29.438101 67.4813 28.960699 c
67.4813 28.432501 67.3722 27.952 67.154099 27.5193 c
h
W*
0 0 132 43 rc
62.525501 32.5812 m
69.399399 32.5812 l
69.399399 25.135099 l
62.525501 25.135099 l
h
f
Q
q
59.964901 27.037201 m
59.841202 27.0977 59.7794 27.216999 59.7794 27.395201 c
59.7794 30.7316 l
60.614498 30.7316 l
60.614498 31.4333 l
59.7794 31.4333 l
59.7794 32.860432 l
58.890499 32.860432 l
58.890499 31.4333 l
58.1824 31.4333 l
58.1824 30.7316 l
58.890499 30.7316 l
58.890499 27.3475 l
58.890499 27.019699 58.963799 26.752399 59.110298 26.545601 c
59.256802 26.3419 59.535198 26.240101 59.9454 26.240101 c
60.072399 26.240101 60.189602 26.2465 60.297001 26.259199 c
60.4077 26.2719 60.5135 26.292601 60.614498 26.321301 c
60.614498 26.999001 l
60.5494 26.992701 60.492401 26.9879 60.443501 26.984699 c
60.306801 26.984699 l
60.147301 26.984699 60.033298 27.002199 59.964901 27.037201 c
h
W
0 0 132 43 rc
57.1824 33.860432 m
61.614498 33.860432 l
61.614498 25.240101 l
57.1824 25.240101 l
h
f
Q
q
56.555901 29.6672 m
56.487499 29.5271 56.352402 29.444401 56.1506 29.419001 c
54.748901 29.247101 l
54.257301 29.186701 53.8601 29.025999 53.557301 28.764999 c
53.254501 28.504101 53.1031 28.1366 53.1031 27.6625 c
53.1031 27.2297 53.256199 26.8685 53.562199 26.579 c
53.871498 26.292601 54.2687 26.149401 54.753799 26.149401 c
55.157501 26.149401 55.5271 26.2337 55.8624 26.4023 c
56.1978 26.570999 56.455002 26.769899 56.634102 26.999001 c
56.663399 26.7953 56.713799 26.6378 56.7855 26.526501 c
56.922199 26.316401 57.141998 26.211399 57.444801 26.211399 c
57.568501 26.211399 57.666199 26.2162 57.737801 26.2257 c
57.809399 26.2353 57.913601 26.259199 58.050301 26.2973 c
58.050301 26.932199 l
57.994999 26.9226 57.942902 26.9147 57.8941 26.9083 c
57.8452 26.9051 57.8013 26.9035 57.762199 26.9035 c
57.641701 26.9035 57.562 26.930599 57.5229 26.984699 c
57.487099 27.038799 57.4692 27.110399 57.4692 27.199499 c
57.4692 30.144501 l
57.4692 30.628099 57.278702 30.984501 56.8978 31.2136 c
56.513599 31.442801 56.013802 31.557301 55.398499 31.557301 c
54.867802 31.557301 54.4006 31.433201 53.996899 31.184999 c
53.596401 30.940001 53.388 30.502501 53.3717 29.8724 c
54.1922 29.8724 l
54.2248 30.136499 54.2948 30.3354 54.402199 30.469 c
54.594299 30.710899 54.919899 30.8318 55.378899 30.8318 c
55.776199 30.8318 56.080601 30.764999 56.292198 30.6313 c
56.507099 30.5009 56.614498 30.289301 56.614498 29.9965 c
56.614498 29.8533 56.595001 29.7435 56.555901 29.6672 c
h
54.299599 27.0944 m
54.114101 27.2376 54.021301 27.4333 54.021301 27.681499 c
54.021301 28.0093 54.156399 28.247999 54.426601 28.397499 c
54.586201 28.486601 54.8255 28.5518 55.144501 28.593201 c
55.6768 28.66 l
55.8396 28.6791 56.005699 28.710899 56.174999 28.755501 c
56.344299 28.799999 56.4827 28.8557 56.590099 28.9226 c
56.590099 28.230499 l
56.590099 27.7022 56.345901 27.322001 55.857498 27.089701 c
55.567799 26.949699 55.2682 26.8797 54.9589 26.8797 c
54.705002 26.8797 54.485199 26.9513 54.299599 27.0944 c
h
W*
0 0 132 43 rc
52.1031 32.557301 m
59.050301 32.557301 l
59.050301 25.149401 l
52.1031 25.149401 l
h
f
Q
q
52.013901 27.037201 m
51.890202 27.0977 51.8283 27.216999 51.8283 27.395201 c
51.8283 30.7316 l
52.663399 30.7316 l
52.663399 31.4333 l
51.8283 31.4333 l
51.8283 32.860432 l
50.939499 32.860432 l
50.939499 31.4333 l
50.2313 31.4333 l
50.2313 30.7316 l
50.939499 30.7316 l
50.939499 27.3475 l
50.939499 27.019699 51.012699 26.752399 51.159199 26.545601 c
51.305801 26.3419 51.584099 26.240101 51.9944 26.240101 c
52.1213 26.240101 52.238602 26.2465 52.346001 26.259199 c
52.456699 26.2719 52.5625 26.292601 52.663399 26.321301 c
52.663399 26.999001 l
52.598301 26.992701 52.541302 26.9879 52.4925 26.984699 c
52.355801 26.984699 l
52.196201 26.984699 52.082298 27.002199 52.013901 27.037201 c
h
W
0 0 132 43 rc
49.2313 33.860432 m
53.663399 33.860432 l
53.663399 25.240101 l
49.2313 25.240101 l
h
f
Q
q
49.4156 31.1611 m
49.047699 31.4412 48.569099 31.5812 47.979801 31.5812 c
47.2896 31.5812 46.7215 31.3314 46.275398 30.8318 c
45.829399 30.332199 45.6063 29.633699 45.6063 28.736401 c
45.6063 28.004499 45.809799 27.3936 46.216801 26.9035 c
46.623798 26.4167 47.169102 26.173201 47.852901 26.173201 c
48.4617 26.173201 48.961498 26.329201 49.3522 26.641001 c
49.742802 26.955999 49.987 27.4524 50.084702 28.130199 c
49.230099 28.130199 l
49.148701 27.751499 49.0005 27.4524 48.785599 27.232901 c
48.574001 27.0165 48.2859 26.9083 47.9212 26.9083 c
47.4459 26.9083 47.0975 27.0833 46.876099 27.4333 c
46.654701 27.7834 46.543999 28.2145 46.543999 28.7269 c
46.543999 29.236 46.6222 29.664 46.7784 30.010799 c
47.019402 30.545401 47.4198 30.8127 47.979801 30.8127 c
48.390099 30.8127 48.688 30.707701 48.873501 30.4977 c
49.059101 30.2908 49.178001 30.0299 49.230099 29.714899 c
50.084702 29.714899 l
50.0098 30.399 49.7868 30.8811 49.4156 31.1611 c
h
W
0 0 132 43 rc
44.6063 32.5812 m
51.084702 32.5812 l
51.084702 25.173201 l
44.6063 25.173201 l
h
f
Q
q
39.9016 26.4023 m
39.7453 26.497801 39.571201 26.661699 39.379101 26.893999 c
39.379101 24.2831 l
38.5 24.2831 l
38.5 31.4093 l
39.354698 31.4093 l
39.354698 30.7316 l
39.530499 30.9639 39.722599 31.1436 39.930901 31.270901 c
40.2272 31.461901 40.5756 31.557301 40.976002 31.557301 c
41.5686 31.557301 42.071602 31.3346 42.4851 30.889099 c
42.898602 30.4468 43.105301 29.813499 43.105301 28.989401 c
43.105301 27.8757 42.8074 27.080099 42.211601 26.6028 c
41.8339 26.300501 41.394402 26.149401 40.893002 26.149401 c
40.4991 26.149401 40.168598 26.2337 39.9016 26.4023 c
h
40.775799 26.8988 m
41.186001 26.8988 41.526299 27.0658 41.796501 27.3999 c
42.07 27.7372 42.206699 28.24 42.206699 28.908199 c
42.206699 29.3155 42.1465 29.6656 42.026001 29.9583 c
41.7981 30.5215 41.381401 30.8032 40.775799 30.8032 c
40.167 30.8032 39.750198 30.5056 39.5256 29.910601 c
39.405102 29.5924 39.344898 29.188299 39.344898 28.6982 c
39.344898 28.3036 39.405102 27.967899 39.5256 27.691099 c
39.753502 27.162901 40.1702 26.8988 40.775799 26.8988 c
h
W*
0 0 132 43 rc
37.5 32.557301 m
44.105301 32.557301 l
44.105301 23.2831 l
37.5 23.2831 l
h
f
Q
q
112.035 12.0028 m
112.035 20.430599 l
110.563 20.430599 l
110.563 22.602501 l
115.818 22.602501 l
115.818 20.430599 l
114.517 20.430599 l
114.517 12.0028 l
115.818 12.0028 l
115.818 9.8309002 l
110.563 9.8309002 l
110.563 12.0028 l
112.035 12.0028 l
h
W
0 0 132 43 rc
109.563 23.602501 m
116.818 23.602501 l
116.818 8.8309002 l
109.563 8.8309002 l
h
f
Q
q
76.634003 26.321199 0.89380002 5.0882001 rc
75.634003 32.409401 m
78.527802 32.409401 l
78.527802 25.321199 l
75.634003 25.321199 l
h
f
Q
q
76.634003 32.3592 0.89380002 0.97373998 rc
75.634003 34.332939 m
78.527802 34.332939 l
78.527802 31.3592 l
75.634003 31.3592 l
h
f
Q
q
74.646301 32.3592 0.87900001 0.97377002 rc
73.646301 34.33297 m
76.525299 34.33297 l
76.525299 31.3592 l
73.646301 31.3592 l
h
f
Q
q
74.646301 26.321301 0.87900001 5.0881 rc
73.646301 32.409401 m
76.525299 32.409401 l
76.525299 25.321301 l
73.646301 25.321301 l
h
f
Q
q
43.935799 26.321199 0.89380002 5.0882001 rc
42.935799 32.409401 m
45.829601 32.409401 l
45.829601 25.321199 l
42.935799 25.321199 l
h
f
Q
q
43.935799 32.3592 0.89380002 0.97373998 rc
42.935799 34.332939 m
45.829601 34.332939 l
45.829601 31.3592 l
42.935799 31.3592 l
h
f
ep
end
%%Trailer
%%EOF
