%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 13.4.1 (Build 22F82) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
1 1 1 sc
q
91.211403 19.458599 m
90.8489 19.610001 90.424103 19.685699 89.936897 19.685699 c
88.617897 19.685699 87.598999 19.1831 86.880096 18.178101 c
86.161201 17.1791 85.801697 15.944 85.801697 14.4728 c
85.801697 12.947 86.172997 11.7361 86.915703 10.8401 c
87.664299 9.9499998 88.662498 9.5050001 89.910202 9.5050001 c
90.718201 9.5050001 91.374702 9.7018003 91.879799 10.0954 c
92.158997 10.3073 92.420403 10.6251 92.664001 11.0489 c
92.664001 10.4132 l
92.664001 9.4687004 92.563004 8.7966995 92.361 8.3971004 c
92.052101 7.7735 91.440102 7.4617 90.525101 7.4617 c
89.877502 7.4617 89.417099 7.5797 89.1437 7.8158002 c
88.983299 7.9489999 88.8675 8.1669998 88.796204 8.4696999 c
86.033401 8.4696999 l
86.1166 7.4828 86.550301 6.7412 87.334602 6.2447 c
88.118896 5.7481999 89.131897 5.5 90.373596 5.5 c
92.429298 5.5 93.819603 6.0570002 94.544502 7.171 c
94.966301 7.8189001 95.1772 8.7814999 95.1772 10.059 c
95.1772 19.449499 l
92.708603 19.449499 l
92.708603 18.023701 l
92.3283 18.719999 91.8293 19.198299 91.211403 19.458599 c
h
92.075798 12.3567 m
91.665901 11.9026 91.163803 11.6756 90.569702 11.6756 c
89.678497 11.6756 89.0606 12.0933 88.716003 12.9289 c
88.525803 13.3769 88.430801 13.8885 88.430801 14.4637 c
88.430801 15.1297 88.519897 15.6897 88.698097 16.143801 c
89.036797 16.997499 89.651703 17.424299 90.5429 17.424299 c
91.196503 17.424299 91.7164 17.1791 92.1026 16.6887 c
92.494698 16.198299 92.690804 15.4839 92.690804 14.5454 c
92.690804 13.5464 92.485802 12.8169 92.075798 12.3567 c
h
W*
0 0 132 43 rc
84.801697 20.685699 m
96.1772 20.685699 l
96.1772 4.5 l
84.801697 4.5 l
h
f
Q
q
92.913597 21.4475 m
93.442299 21.8895 93.745399 22.5737 93.822601 23.5 c
92.619499 23.5 l
92.536301 22.943001 92.251099 22.5646 91.763901 22.364799 c
91.490601 22.249701 91.151901 22.1922 90.747902 22.1922 c
90.343903 22.1922 90.005203 22.249701 89.731903 22.364799 c
89.244698 22.5646 88.959602 22.943001 88.876404 23.5 c
87.673203 23.5 l
87.750504 22.5737 88.053497 21.8895 88.582298 21.4475 c
89.111099 21.0116 89.833 20.7936 90.747902 20.7936 c
91.662903 20.7936 92.384804 21.0116 92.913597 21.4475 c
h
W
0 0 132 43 rc
86.673203 24.5 m
94.822601 24.5 l
94.822601 19.7936 l
86.673203 19.7936 l
h
f
Q
q
70.962402 19.2861 m
70.504898 19.5525 69.982002 19.685699 69.393799 19.685699 c
68.116402 19.685699 67.094498 19.2013 66.328102 18.232599 c
65.567596 17.263901 65.187302 15.9349 65.187302 14.2457 c
65.187302 12.7805 65.573502 11.5787 66.345901 10.6403 c
67.124199 9.7079 68.080803 9.2417002 69.215599 9.2417002 c
69.9048 9.2417002 70.481102 9.3748999 70.944504 9.6413002 c
71.407997 9.9076996 71.8209 10.3345 72.183296 10.9218 c
72.183296 9.5504999 l
74.652 9.5504999 l
74.652 22.9188 l
72.076401 22.9188 l
72.076401 18.196301 l
71.791199 18.6625 71.4198 19.0257 70.962402 19.2861 c
h
71.586197 12.2386 m
71.211899 11.6937 70.665298 11.4213 69.946404 11.4213 c
69.227501 11.4213 68.689796 11.6937 68.333298 12.2386 c
67.982697 12.7896 67.807503 13.5222 67.807503 14.4364 c
67.807503 15.2841 67.979797 15.9924 68.324402 16.5616 c
68.674896 17.1367 69.221497 17.424299 69.964203 17.424299 c
70.451401 17.424299 70.879204 17.266899 71.247498 16.952101 c
71.847603 16.4314 72.147697 15.5656 72.147697 14.3547 c
72.147697 13.4889 71.960503 12.7836 71.586197 12.2386 c
h
W*
0 0 132 43 rc
64.187302 23.9188 m
75.652 23.9188 l
75.652 8.2417002 l
64.187302 8.2417002 l
h
f
Q
q
41.5 9.5263004 m
46.1395 22.774799 l
49.2089 22.774799 l
53.813099 9.5263004 l
50.8671 9.5263004 l
50.029202 12.2497 l
45.239799 12.2497 l
44.340099 9.5263004 l
41.5 9.5263004 l
h
47.647701 19.7458 m
45.971901 14.5327 l
49.270699 14.5327 l
47.647701 19.7458 l
h
W*
0 0 132 43 rc
40.5 23.774799 m
54.813099 23.774799 l
54.813099 8.5263004 l
40.5 8.5263004 l
h
f
Q
q
80.436302 19.7129 m
81.244301 19.7129 81.972099 19.5585 82.619698 19.249701 c
83.267303 18.941 83.802101 18.4536 84.2239 17.7876 c
84.604202 17.2003 84.8507 16.519199 84.9636 15.7442 c
85.028999 15.2901 85.055702 14.6362 85.0438 13.7825 c
78.395401 13.7825 l
78.431 12.7896 78.737 12.0933 79.313301 11.6937 c
79.663902 11.4455 80.085701 11.3214 80.578903 11.3214 c
81.1017 11.3214 81.526497 11.4728 81.853302 11.7755 c
82.031502 11.9389 82.189003 12.166 82.3256 12.4566 c
84.919098 12.4566 l
84.853699 11.8693 84.553703 11.273 84.018898 10.6675 c
83.187103 9.7047997 82.022598 9.2235003 80.525398 9.2235003 c
79.289597 9.2235003 78.199303 9.6292 77.254601 10.4405 c
76.309998 11.2518 75.837601 12.5716 75.837601 14.4001 c
75.837601 16.113501 76.262398 17.427299 77.112099 18.3416 c
77.967598 19.2558 79.075699 19.7129 80.436302 19.7129 c
h
80.436302 17.578699 m
79.848099 17.578699 79.390602 17.391001 79.063797 17.0156 c
78.742996 16.640301 78.541 16.131701 78.457802 15.4899 c
82.4058 15.4899 l
82.364197 16.174101 82.159302 16.6917 81.790901 17.0429 c
81.428497 17.400101 80.976898 17.578699 80.436302 17.578699 c
h
W*
0 0 132 43 rc
74.837601 20.7129 m
86.055702 20.7129 l
86.055702 8.2235003 l
74.837601 8.2235003 l
h
f
Q
q
56.129101 20.521299 m
56.129101 11.7767 l
54.527599 11.7767 l
54.527599 9.5232 l
60.243099 9.5232 l
60.243099 11.7767 l
58.828098 11.7767 l
58.828098 20.521299 l
60.243099 20.521299 l
60.243099 22.774799 l
54.527599 22.774799 l
54.527599 20.521299 l
56.129101 20.521299 l
h
W
0 0 132 43 rc
53.527599 23.774799 m
61.243099 23.774799 l
61.243099 8.5232 l
53.527599 8.5232 l
h
f
Q
q
97.227402 20.630199 2.5755999 2.3885 rc
96.227402 24.0187 m
100.803 24.0187 l
100.803 19.630199 l
96.227402 19.630199 l
h
f
Q
q
97.227402 9.5504999 2.5755999 9.8990002 rc
96.227402 20.449499 m
100.803 20.449499 l
100.803 8.5504999 l
96.227402 8.5504999 l
h
f
Q
q
101.96 9.5504999 2.54 13.3864 rc
100.96 23.936899 m
105.5 23.936899 l
105.5 8.5504999 l
100.96 8.5504999 l
h
f
Q
q
18.460501 18.342501 m
21.9266 15.5357 26.8836 15.5357 30.349701 18.342501 c
29.009501 19.9974 l
26.3248 17.8234 22.485399 17.8234 19.800699 19.9974 c
18.460501 18.342501 l
h
W
0 0 132 43 rc
17.460501 20.9974 m
31.349701 20.9974 l
31.349701 14.5357 l
17.460501 14.5357 l
h
f
Q
q
19.903999 21.986601 2.1296 2.8769 rc
18.903999 25.863501 m
23.0336 25.863501 l
23.0336 20.986601 l
18.903999 20.986601 l
h
f
Q
q
26.511999 21.986601 2.1294999 2.8769 rc
25.511999 25.863501 m
29.6415 25.863501 l
29.6415 20.986601 l
25.511999 20.986601 l
h
f
Q
q
35.5 21 m
35.5 14.6487 30.351299 9.5 24 9.5 c
17.648701 9.5 12.5 14.6487 12.5 21 c
12.5 27.351299 17.648701 32.5 24 32.5 c
30.351299 32.5 35.5 27.351299 35.5 21 c
h
33.370499 21 m
33.370499 15.8248 29.1752 11.6295 24 11.6295 c
18.8248 11.6295 14.6295 15.8248 14.6295 21 c
14.6295 26.1752 18.8248 30.370501 24 30.370501 c
29.1752 30.370501 33.370499 26.1752 33.370499 21 c
h
W*
0 0 132 43 rc
11.5 33.5 m
36.5 33.5 l
36.5 8.5 l
11.5 8.5 l
h
f
Q
q
45.389 32.57616 m
45.109299 32.449402 44.844398 32.240799 44.594398 31.9503 c
44.594398 32.654968 l
43.7505 32.654968 l
43.7505 27.6901 l
44.638802 27.6901 l
44.638802 30.290701 l
44.638802 30.6152 44.660198 30.864 44.702999 31.0371 c
44.749001 31.2132 44.8461 31.3832 44.994099 31.547001 c
45.178398 31.750999 45.3922 31.886999 45.6357 31.955 c
45.770599 31.9951 45.943298 32.015202 46.1539 32.015202 c
46.568501 32.015202 46.854698 31.860701 47.0126 31.551701 c
47.108101 31.366199 47.1558 31.122101 47.1558 30.819201 c
47.1558 27.6901 l
48.058899 27.6901 l
48.058899 30.8748 l
48.058899 31.3755 47.9865 31.7603 47.841801 32.029099 c
47.578602 32.520531 47.071899 32.766232 46.321701 32.766232 c
45.9795 32.766232 45.668598 32.702869 45.389 32.57616 c
h
W
0 0 132 43 rc
42.7505 33.766232 m
49.058899 33.766232 l
49.058899 26.6901 l
42.7505 26.6901 l
h
f
Q
q
49.904701 29.2477 m
49.931 28.9695 50.005001 28.7563 50.126801 28.607901 c
50.350498 28.3391 50.738701 28.204599 51.2915 28.204599 c
51.620499 28.204599 51.91 28.271099 52.160099 28.403999 c
52.410099 28.540001 52.535198 28.7486 52.535198 29.0298 c
52.535198 29.243 52.434799 29.4053 52.2341 29.5166 c
52.105801 29.584499 51.852501 29.663401 51.474098 29.753 c
50.768398 29.919901 l
50.3176 30.0249 49.985298 30.142401 49.7714 30.2722 c
49.389801 30.497801 49.199001 30.8099 49.199001 31.208599 c
49.199001 31.6784 49.3783 32.058498 49.7369 32.348999 c
50.098801 32.639511 50.584099 32.784771 51.192799 32.784771 c
51.988998 32.784771 52.563099 32.565338 52.915199 32.126499 c
53.135601 31.848301 53.2425 31.548599 53.236 31.2272 c
52.396999 31.2272 l
52.380501 31.415701 52.309799 31.5872 52.184799 31.741699 c
51.980801 31.9611 51.627102 32.0709 51.123699 32.0709 c
50.788101 32.0709 50.5331 32.010601 50.3587 31.8901 c
50.187599 31.769501 50.1021 31.610399 50.1021 31.4126 c
50.1021 31.196199 50.215599 31.023199 50.4426 30.8934 c
50.5742 30.816099 50.768398 30.7481 51.025002 30.6894 c
51.612301 30.555 l
52.250599 30.4097 52.678299 30.2691 52.895401 30.133101 c
53.240898 29.919901 53.413601 29.584499 53.413601 29.127199 c
53.413601 28.6852 53.234299 28.303499 52.875702 27.9821 c
52.520401 27.6607 51.977501 27.5 51.247101 27.5 c
50.460701 27.5 49.903 27.666901 49.574001 28.0007 c
49.248299 28.3375 49.073898 28.753201 49.0509 29.2477 c
49.904701 29.2477 l
h
W
0 0 132 43 rc
48.0509 33.784771 m
54.413601 33.784771 l
54.413601 26.5 l
48.0509 26.5 l
h
f
Q
q
57.672699 30.939699 m
57.6036 30.803801 57.467098 30.7234 57.2631 30.6987 c
55.846699 30.531799 l
55.349899 30.473101 54.948502 30.316999 54.642502 30.063601 c
54.336498 29.8102 54.183498 29.453199 54.183498 28.992701 c
54.183498 28.572399 54.3382 28.2216 54.6474 27.940399 c
54.959999 27.6623 55.361401 27.523199 55.851601 27.523199 c
56.259602 27.523199 56.632999 27.605101 56.971901 27.7689 c
57.310799 27.932699 57.570702 28.125799 57.751701 28.348301 c
57.7813 28.1506 57.832298 27.997601 57.904701 27.8894 c
58.0429 27.6854 58.264999 27.583401 58.5709 27.583401 c
58.695999 27.583401 58.794701 27.5881 58.8671 27.597401 c
58.9394 27.6066 59.044701 27.629801 59.182899 27.666901 c
59.182899 28.2834 l
59.126999 28.2742 59.074299 28.266399 59.025002 28.2603 c
58.975601 28.2572 58.931198 28.2556 58.891701 28.2556 c
58.77 28.2556 58.6894 28.2819 58.649899 28.3344 c
58.613701 28.386999 58.5956 28.456499 58.5956 28.542999 c
58.5956 31.403299 l
58.5956 31.8731 58.403099 32.2192 58.0182 32.4417 c
57.630001 32.664242 57.124901 32.775501 56.503101 32.775501 c
55.966801 32.775501 55.494701 32.654968 55.0867 32.413898 c
54.681999 32.1759 54.471401 31.750999 54.455002 31.139099 c
55.2841 31.139099 l
55.317001 31.395599 55.387699 31.588699 55.4963 31.7185 c
55.690399 31.9534 56.019402 32.0709 56.483299 32.0709 c
56.884701 32.0709 57.192402 32.006001 57.4062 31.8762 c
57.623402 31.749399 57.731998 31.5439 57.731998 31.2596 c
57.731998 31.120501 57.7122 31.013901 57.672699 30.939699 c
h
55.3927 28.441099 m
55.205101 28.580099 55.111401 28.770201 55.111401 29.011299 c
55.111401 29.329599 55.247898 29.561399 55.521 29.7066 c
55.682201 29.7932 55.924 29.856501 56.246498 29.8967 c
56.784401 29.961599 l
56.948898 29.980101 57.116699 30.011 57.2878 30.0543 c
57.4589 30.097601 57.598701 30.151699 57.707298 30.2166 c
57.707298 29.544399 l
57.707298 29.0313 57.460499 28.662001 56.966999 28.436399 c
56.674198 28.3004 56.371498 28.2325 56.058899 28.2325 c
55.802299 28.2325 55.5802 28.302 55.3927 28.441099 c
h
W*
0 0 132 43 rc
53.183498 33.775501 m
60.182899 33.775501 l
60.182899 26.523199 l
53.183498 26.523199 l
h
f
Q
q
61.0089 31.0371 m
60.966202 30.864 60.944801 30.6152 60.944801 30.290701 c
60.944801 27.6901 l
60.0564 27.6901 l
60.0564 32.654968 l
60.900398 32.654968 l
60.900398 31.9503 l
61.150398 32.240799 61.415298 32.449402 61.694901 32.57616 c
61.974602 32.702869 62.2855 32.766232 62.627701 32.766232 c
63.377899 32.766232 63.884499 32.520531 64.147797 32.029099 c
64.292503 31.7603 64.364899 31.3755 64.364899 30.8748 c
64.364899 27.6901 l
63.4618 27.6901 l
63.4618 30.819201 l
63.4618 31.122101 63.414001 31.366199 63.3186 31.551701 c
63.160702 31.860701 62.8745 32.015202 62.4599 32.015202 c
62.249298 32.015202 62.076599 31.9951 61.9417 31.955 c
61.6982 31.886999 61.484402 31.750999 61.300098 31.547001 c
61.1521 31.3832 61.055 31.2132 61.0089 31.0371 c
h
W
0 0 132 43 rc
59.0564 33.766232 m
65.364899 33.766232 l
65.364899 26.6901 l
59.0564 26.6901 l
h
f
Q
q
69.512299 28.7377 m
69.426804 28.8985 69.384003 29.105499 69.384003 29.3589 c
69.384003 32.654968 l
68.475899 32.654968 l
68.475899 29.2801 l
68.475899 28.856701 68.550003 28.518299 68.697998 28.2649 c
68.9711 27.792101 69.484398 27.555599 70.237801 27.555599 c
70.721497 27.555599 71.132698 27.6854 71.471603 27.945 c
71.6427 28.0748 71.785797 28.233999 71.901001 28.422501 c
71.891098 27.6901 l
72.730103 27.6901 l
72.730103 32.654968 l
71.841797 32.654968 l
71.841797 30.2166 l
71.841797 29.7313 71.780899 29.349701 71.659203 29.071501 c
71.435402 28.552299 71.014297 28.2927 70.395699 28.2927 c
69.964699 28.2927 69.670303 28.441099 69.512299 28.7377 c
h
W
0 0 132 43 rc
67.475899 33.654968 m
73.730103 33.654968 l
73.730103 26.555599 l
67.475899 26.555599 l
h
f
Q
q
75.395103 31.477501 m
75.1549 31.208599 75.034897 30.898001 75.034897 30.5457 c
75.034897 27.6901 l
74.1465 27.6901 l
74.1465 32.654968 l
74.990402 32.654968 l
74.990402 31.7974 l
75.059502 31.964199 75.228996 32.166698 75.498802 32.404598 c
75.7686 32.645699 76.079498 32.766232 76.431503 32.766232 c
76.447998 32.766232 76.475899 32.764679 76.515404 32.761589 c
76.554901 32.758499 76.622398 32.752319 76.717796 32.74305 c
76.717796 31.862301 l
76.6651 31.8715 76.615799 31.877701 76.569702 31.8808 c
76.526901 31.8839 76.479202 31.885401 76.426598 31.885401 c
75.979103 31.885401 75.6353 31.749399 75.395103 31.477501 c
h
W
0 0 132 43 rc
73.1465 33.766232 m
77.717796 33.766232 l
77.717796 26.6901 l
73.1465 26.6901 l
h
f
Q
q
80.779503 32.515888 m
80.427399 32.682781 80.063904 32.766232 79.688797 32.766232 c
78.945198 32.766232 78.343102 32.517441 77.8825 32.019901 c
77.421898 31.522301 77.191597 30.8748 77.191597 30.077499 c
77.191597 29.267799 77.420197 28.6373 77.877502 28.1861 c
78.3349 27.738001 78.892601 27.513901 79.550598 27.513901 c
79.820396 27.513901 80.062202 27.538601 80.2761 27.5881 c
80.674202 27.674601 81.008102 27.841499 81.277901 28.088699 c
81.439102 28.2309 81.5839 28.4132 81.712196 28.635799 c
81.843803 28.861401 81.921097 29.0653 81.944199 29.2477 c
81.070602 29.2477 l
81.004799 29.028299 80.892998 28.8351 80.735001 28.6682 c
80.458702 28.3808 80.088501 28.237101 79.624603 28.237101 c
79.1278 28.237101 78.761002 28.3885 78.524101 28.691401 c
78.287201 28.9974 78.1605 29.402201 78.143997 29.906 c
82.018204 29.906 l
82.018204 30.406601 81.991898 30.771299 81.939201 31 c
81.879997 31.333799 81.761597 31.625799 81.5839 31.8762 c
81.399696 32.138901 81.1315 32.3521 80.779503 32.515888 c
h
80.8535 31.435801 m
80.9851 31.2194 81.069 30.9305 81.105202 30.568899 c
78.168701 30.568899 l
78.185204 30.995399 78.331596 31.3461 78.608002 31.621201 c
78.8843 31.8993 79.226501 32.038399 79.634499 32.038399 c
80.203697 32.038399 80.610001 31.8375 80.8535 31.435801 c
h
W*
0 0 132 43 rc
76.191597 33.766232 m
83.018204 33.766232 l
83.018204 26.513901 l
76.191597 26.513901 l
h
f
Q
q
83.513603 27.9079 m
83.365501 28.108801 83.291496 28.368401 83.291496 28.6868 c
83.291496 31.973499 l
82.575897 31.973499 l
82.575897 32.654968 l
83.291496 32.654968 l
83.291496 34.041061 l
84.189697 34.041061 l
84.189697 32.654968 l
85.0336 32.654968 l
85.0336 31.973499 l
84.189697 31.973499 l
84.189697 28.733101 l
84.189697 28.559999 84.252197 28.444201 84.377197 28.385401 c
84.446297 28.3514 84.561501 28.3344 84.722702 28.3344 c
84.860901 28.3344 l
84.910202 28.3375 84.967796 28.342199 85.0336 28.348301 c
85.0336 27.6901 l
84.931602 27.6623 84.824699 27.6422 84.712799 27.629801 c
84.604301 27.617399 84.485802 27.6113 84.357498 27.6113 c
83.942902 27.6113 83.661598 27.710199 83.513603 27.9079 c
h
W
0 0 132 43 rc
81.575897 35.041061 m
86.0336 35.041061 l
86.0336 26.6113 l
81.575897 26.6113 l
h
f
Q
q
89.475304 31.649 m
89.202202 31.4049 89.065697 30.9629 89.065697 30.3232 c
89.065697 27.6901 l
88.177399 27.6901 l
88.177399 32.654968 l
89.055801 32.654968 l
89.055801 31.9503 l
89.266403 32.1945 89.457199 32.3722 89.628304 32.483398 c
89.921097 32.671959 90.253403 32.766232 90.625198 32.766232 c
91.046402 32.766232 91.3853 32.668869 91.641899 32.474201 c
91.786697 32.3629 91.918297 32.1991 92.036697 31.9828 c
92.2341 32.2486 92.466103 32.444801 92.732597 32.571522 c
92.9991 32.701321 93.2985 32.766232 93.630798 32.766232 c
94.341499 32.766232 94.825104 32.525169 95.081703 32.042999 c
95.219902 31.7834 95.289001 31.4342 95.289001 30.995399 c
95.289001 27.6901 l
94.366096 27.6901 l
94.366096 31.139099 l
94.366096 31.469801 94.277298 31.696899 94.099602 31.820499 c
93.925301 31.944201 93.711403 32.006001 93.458099 32.006001 c
93.109299 32.006001 92.808197 31.8962 92.554901 31.6768 c
92.304901 31.457399 92.179802 31.0912 92.179802 30.5781 c
92.179802 27.6901 l
91.276703 27.6901 l
91.276703 30.9305 l
91.276703 31.2673 91.233902 31.513 91.148399 31.6675 c
91.013496 31.8993 90.761803 32.015202 90.393303 32.015202 c
90.057701 32.015202 89.751701 31.8932 89.475304 31.649 c
h
W
0 0 132 43 rc
87.177399 33.766232 m
96.289001 33.766232 l
96.289001 26.6901 l
87.177399 26.6901 l
h
f
Q
q
41.5 27.6901 0.90310001 4.94169 rc
40.5 33.63179 m
43.403099 33.63179 l
43.403099 26.6901 l
40.5 26.6901 l
h
f
Q
q
41.5 33.554298 0.90310001 0.94569999 rc
40.5 35.5 m
43.403099 35.5 l
43.403099 32.554298 l
40.5 32.554298 l
h
f
Q
q
71.017601 33.4245 0.92290002 0.96424001 rc
70.017601 35.388741 m
72.940498 35.388741 l
72.940498 32.4245 l
70.017601 32.4245 l
h
f
Q
q
69.389 33.4245 0.9228 0.96424001 rc
68.389 35.388741 m
71.311798 35.388741 l
71.311798 32.4245 l
68.389 32.4245 l
h
f
Q
q
85.926903 27.6901 0.90310001 4.94169 rc
84.926903 33.63179 m
87.830002 33.63179 l
87.830002 26.6901 l
84.926903 26.6901 l
h
f
Q
q
85.926903 33.554298 0.90310001 0.94569999 rc
84.926903 35.5 m
87.830002 35.5 l
87.830002 32.554298 l
84.926903 32.554298 l
h
f
Q
q
96.596901 27.6901 0.90310001 4.94169 rc
95.596901 33.63179 m
98.5 33.63179 l
98.5 26.6901 l
95.596901 26.6901 l
h
f
Q
q
96.596901 33.554298 0.90310001 0.94569999 rc
95.596901 35.5 m
98.5 35.5 l
98.5 32.554298 l
95.596901 32.554298 l
h
f
ep
end
%%Trailer
%%EOF
