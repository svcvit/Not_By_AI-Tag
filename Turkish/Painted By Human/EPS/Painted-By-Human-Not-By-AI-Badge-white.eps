%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 13.4.1 (Build 22F82) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
q
91.211403 19.458599 m
90.8489 19.610001 90.424103 19.685699 89.936897 19.685699 c
88.617897 19.685699 87.598999 19.1831 86.880096 18.178101 c
86.161201 17.1791 85.801697 15.944 85.801697 14.4728 c
85.801697 12.947 86.172997 11.7361 86.915703 10.8401 c
87.664299 9.9499998 88.662498 9.5050001 89.910202 9.5050001 c
90.718201 9.5050001 91.374702 9.7018003 91.879799 10.0954 c
92.158997 10.3073 92.420403 10.6251 92.664001 11.0489 c
92.664001 10.4132 l
92.664001 9.4687004 92.563004 8.7966995 92.361 8.3971004 c
92.052101 7.7735 91.440102 7.4617 90.525101 7.4617 c
89.877502 7.4617 89.417099 7.5797 89.1437 7.8158002 c
88.983299 7.9489999 88.8675 8.1669998 88.796204 8.4696999 c
86.033401 8.4696999 l
86.1166 7.4828 86.550301 6.7412 87.334602 6.2447 c
88.118896 5.7481999 89.131897 5.5 90.373596 5.5 c
92.429298 5.5 93.819603 6.0570002 94.544502 7.171 c
94.966301 7.8189001 95.1772 8.7814999 95.1772 10.059 c
95.1772 19.449499 l
92.708603 19.449499 l
92.708603 18.023701 l
92.3283 18.719999 91.8293 19.198299 91.211403 19.458599 c
h
92.075798 12.3567 m
91.665901 11.9026 91.163803 11.6756 90.569702 11.6756 c
89.678497 11.6756 89.0606 12.0933 88.716003 12.9289 c
88.525803 13.3769 88.430801 13.8885 88.430801 14.4637 c
88.430801 15.1297 88.519897 15.6897 88.698097 16.143801 c
89.036797 16.997499 89.651703 17.424299 90.5429 17.424299 c
91.196503 17.424299 91.7164 17.1791 92.1026 16.6887 c
92.494698 16.198299 92.690804 15.4839 92.690804 14.5454 c
92.690804 13.5464 92.485802 12.8169 92.075798 12.3567 c
h
W*
0 0 132 43 rc
84.801697 20.685699 m
96.1772 20.685699 l
96.1772 4.5 l
84.801697 4.5 l
h
f
Q
q
92.913597 21.4475 m
93.442299 21.8895 93.745399 22.5737 93.822601 23.5 c
92.619499 23.5 l
92.536301 22.943001 92.251099 22.5646 91.763901 22.364799 c
91.490601 22.249701 91.151901 22.1922 90.747902 22.1922 c
90.343903 22.1922 90.005203 22.249701 89.731903 22.364799 c
89.244698 22.5646 88.959602 22.943001 88.876404 23.5 c
87.673203 23.5 l
87.750504 22.5737 88.053497 21.8895 88.582298 21.4475 c
89.111099 21.0116 89.833 20.7936 90.747902 20.7936 c
91.662903 20.7936 92.384804 21.0116 92.913597 21.4475 c
h
W
0 0 132 43 rc
86.673203 24.5 m
94.822601 24.5 l
94.822601 19.7936 l
86.673203 19.7936 l
h
f
Q
q
70.962402 19.2861 m
70.504898 19.5525 69.982002 19.685699 69.393799 19.685699 c
68.116402 19.685699 67.094498 19.2013 66.328102 18.232599 c
65.567596 17.263901 65.187302 15.9349 65.187302 14.2457 c
65.187302 12.7805 65.573502 11.5787 66.345901 10.6403 c
67.124199 9.7079 68.080803 9.2417002 69.215599 9.2417002 c
69.9048 9.2417002 70.481102 9.3748999 70.944504 9.6413002 c
71.407997 9.9076996 71.8209 10.3345 72.183296 10.9218 c
72.183296 9.5504999 l
74.652 9.5504999 l
74.652 22.9188 l
72.076401 22.9188 l
72.076401 18.196301 l
71.791199 18.6625 71.4198 19.0257 70.962402 19.2861 c
h
71.586197 12.2386 m
71.211899 11.6937 70.665298 11.4213 69.946404 11.4213 c
69.227501 11.4213 68.689796 11.6937 68.333298 12.2386 c
67.982697 12.7896 67.807503 13.5222 67.807503 14.4364 c
67.807503 15.2841 67.979797 15.9924 68.324402 16.5616 c
68.674896 17.1367 69.221497 17.424299 69.964203 17.424299 c
70.451401 17.424299 70.879204 17.266899 71.247498 16.952101 c
71.847603 16.4314 72.147697 15.5656 72.147697 14.3547 c
72.147697 13.4889 71.960503 12.7836 71.586197 12.2386 c
h
W*
0 0 132 43 rc
64.187302 23.9188 m
75.652 23.9188 l
75.652 8.2417002 l
64.187302 8.2417002 l
h
f
Q
q
41.5 9.5263004 m
46.1395 22.774799 l
49.2089 22.774799 l
53.813099 9.5263004 l
50.8671 9.5263004 l
50.029202 12.2497 l
45.239799 12.2497 l
44.340099 9.5263004 l
41.5 9.5263004 l
h
47.647701 19.7458 m
45.971901 14.5327 l
49.270699 14.5327 l
47.647701 19.7458 l
h
W*
0 0 132 43 rc
40.5 23.774799 m
54.813099 23.774799 l
54.813099 8.5263004 l
40.5 8.5263004 l
h
f
Q
q
80.436302 19.7129 m
81.244301 19.7129 81.972099 19.5585 82.619698 19.249701 c
83.267303 18.941 83.802101 18.4536 84.2239 17.7876 c
84.604202 17.2003 84.8507 16.519199 84.9636 15.7442 c
85.028999 15.2901 85.055702 14.6362 85.0438 13.7825 c
78.395401 13.7825 l
78.431 12.7896 78.737 12.0933 79.313301 11.6937 c
79.663902 11.4455 80.085701 11.3214 80.578903 11.3214 c
81.1017 11.3214 81.526497 11.4728 81.853302 11.7755 c
82.031502 11.9389 82.189003 12.166 82.3256 12.4566 c
84.919098 12.4566 l
84.853699 11.8693 84.553703 11.273 84.018898 10.6675 c
83.187103 9.7047997 82.022598 9.2235003 80.525398 9.2235003 c
79.289597 9.2235003 78.199303 9.6292 77.254601 10.4405 c
76.309998 11.2518 75.837601 12.5716 75.837601 14.4001 c
75.837601 16.113501 76.262398 17.427299 77.112099 18.3416 c
77.967598 19.2558 79.075699 19.7129 80.436302 19.7129 c
h
80.436302 17.578699 m
79.848099 17.578699 79.390602 17.391001 79.063797 17.0156 c
78.742996 16.640301 78.541 16.131701 78.457802 15.4899 c
82.4058 15.4899 l
82.364197 16.174101 82.159302 16.6917 81.790901 17.0429 c
81.428497 17.400101 80.976898 17.578699 80.436302 17.578699 c
h
W*
0 0 132 43 rc
74.837601 20.7129 m
86.055702 20.7129 l
86.055702 8.2235003 l
74.837601 8.2235003 l
h
f
Q
q
56.129101 20.521299 m
56.129101 11.7767 l
54.527599 11.7767 l
54.527599 9.5232 l
60.243099 9.5232 l
60.243099 11.7767 l
58.828098 11.7767 l
58.828098 20.521299 l
60.243099 20.521299 l
60.243099 22.774799 l
54.527599 22.774799 l
54.527599 20.521299 l
56.129101 20.521299 l
h
W
0 0 132 43 rc
53.527599 23.774799 m
61.243099 23.774799 l
61.243099 8.5232 l
53.527599 8.5232 l
h
f
Q
q
97.227402 20.630199 2.5755999 2.3885 rc
96.227402 24.0187 m
100.803 24.0187 l
100.803 19.630199 l
96.227402 19.630199 l
h
f
Q
q
97.227402 9.5504999 2.5755999 9.8990002 rc
96.227402 20.449499 m
100.803 20.449499 l
100.803 8.5504999 l
96.227402 8.5504999 l
h
f
Q
q
101.96 9.5504999 2.54 13.3864 rc
100.96 23.936899 m
105.5 23.936899 l
105.5 8.5504999 l
100.96 8.5504999 l
h
f
Q
q
18.460501 18.342501 m
21.9266 15.5357 26.8836 15.5357 30.349701 18.342501 c
29.009501 19.9974 l
26.3248 17.8234 22.485399 17.8234 19.800699 19.9974 c
18.460501 18.342501 l
h
W
0 0 132 43 rc
17.460501 20.9974 m
31.349701 20.9974 l
31.349701 14.5357 l
17.460501 14.5357 l
h
f
Q
q
19.903999 21.986601 2.1296 2.8769 rc
18.903999 25.863501 m
23.0336 25.863501 l
23.0336 20.986601 l
18.903999 20.986601 l
h
f
Q
q
26.511999 21.986601 2.1294999 2.8769 rc
25.511999 25.863501 m
29.6415 25.863501 l
29.6415 20.986601 l
25.511999 20.986601 l
h
f
Q
q
35.5 21 m
35.5 14.6487 30.351299 9.5 24 9.5 c
17.648701 9.5 12.5 14.6487 12.5 21 c
12.5 27.351299 17.648701 32.5 24 32.5 c
30.351299 32.5 35.5 27.351299 35.5 21 c
h
33.370499 21 m
33.370499 15.8248 29.1752 11.6295 24 11.6295 c
18.8248 11.6295 14.6295 15.8248 14.6295 21 c
14.6295 26.1752 18.8248 30.370501 24 30.370501 c
29.1752 30.370501 33.370499 26.1752 33.370499 21 c
h
W*
0 0 132 43 rc
11.5 33.5 m
36.5 33.5 l
36.5 8.5 l
11.5 8.5 l
h
f
Q
q
45.7076 31.0166 m
45.6647 30.842501 45.643299 30.592199 45.643299 30.2658 c
45.643299 27.6497 l
44.7537 27.6497 l
44.7537 32.644039 l
45.598801 32.644039 l
45.598801 31.9352 l
45.8493 32.227501 46.114498 32.437302 46.3946 32.56477 c
46.674599 32.69223 46.986 32.755959 47.328701 32.755959 c
48.079899 32.755959 48.587299 32.508808 48.850899 32.0145 c
48.995899 31.743999 49.068401 31.357 49.068401 30.853399 c
49.068401 27.6497 l
48.163898 27.6497 l
48.163898 30.7974 l
48.163898 31.1021 48.1161 31.3477 48.020599 31.534201 c
47.8624 31.8451 47.575802 32.0005 47.160599 32.0005 c
46.949799 32.0005 46.776798 31.980301 46.641701 31.939899 c
46.3979 31.8715 46.183701 31.734699 45.999199 31.529499 c
45.850899 31.364799 45.7537 31.1938 45.7076 31.0166 c
h
W
0 0 132 43 rc
43.7537 33.755959 m
50.068401 33.755959 l
50.068401 26.6497 l
43.7537 26.6497 l
h
f
Q
q
51.139198 28.573099 m
51.0173 28.7223 50.943199 28.9368 50.916801 29.2166 c
50.061798 29.2166 l
50.084801 28.7192 50.259499 28.301001 50.585701 27.9622 c
50.915199 27.6264 51.473598 27.4585 52.261101 27.4585 c
52.992599 27.4585 53.536201 27.620199 53.892101 27.943501 c
54.251202 28.2668 54.430801 28.650801 54.430801 29.095301 c
54.430801 29.555401 54.257801 29.8927 53.9119 30.1073 c
53.694401 30.243999 53.266102 30.3855 52.6269 30.531601 c
52.0387 30.6668 l
51.7817 30.725901 51.587299 30.7943 51.455502 30.872 c
51.228199 31.0026 51.114498 31.176701 51.114498 31.3943 c
51.114498 31.5933 51.200199 31.753401 51.371498 31.874599 c
51.546101 31.995899 51.801498 32.056499 52.1376 32.056499 c
52.641701 32.056499 52.995899 31.9461 53.200199 31.725401 c
53.325401 31.569901 53.396198 31.3974 53.412701 31.2078 c
54.252899 31.2078 l
54.259499 31.531099 54.152401 31.8326 53.931599 32.1124 c
53.579102 32.55389 53.004101 32.774609 52.206799 32.774609 c
51.597198 32.774609 51.111198 32.628502 50.748798 32.3363 c
50.389599 32.043999 50.209999 31.661699 50.209999 31.1891 c
50.209999 30.788099 50.401199 30.4741 50.783401 30.2472 c
50.997501 30.1166 51.330299 29.9984 51.7817 29.8927 c
52.488499 29.724899 l
52.867401 29.634701 53.121101 29.555401 53.249599 29.487 c
53.4506 29.375099 53.551102 29.211901 53.551102 28.9974 c
53.551102 28.7145 53.4259 28.5047 53.175499 28.367901 c
52.924999 28.2342 52.635101 28.1674 52.305599 28.1674 c
51.752102 28.1674 51.3633 28.302601 51.139198 28.573099 c
h
W
0 0 132 43 rc
49.061798 33.774609 m
55.430801 33.774609 l
55.430801 26.4585 l
49.061798 26.4585 l
h
f
Q
q
58.285801 30.676201 m
58.490101 30.701 58.6269 30.7819 58.695999 30.918699 c
58.7356 30.993299 58.755402 31.1005 58.755402 31.2404 c
58.755402 31.5264 58.646599 31.7332 58.429199 31.8606 c
58.215 31.991199 57.906898 32.056499 57.504902 32.056499 c
57.040401 32.056499 56.710899 31.938299 56.516499 31.702101 c
56.4077 31.571501 56.336899 31.377199 56.304001 31.1192 c
55.473598 31.1192 l
55.490101 31.734699 55.701 32.162201 56.1063 32.4016 c
56.514801 32.644039 56.987598 32.765282 57.5247 32.765282 c
58.1474 32.765282 58.653198 32.65337 59.042 32.429501 c
59.427502 32.2057 59.6203 31.8575 59.6203 31.385 c
59.6203 28.507799 l
59.6203 28.4207 59.638401 28.3508 59.674599 28.297899 c
59.714199 28.2451 59.794899 28.2187 59.916801 28.2187 c
59.956299 28.2187 60.000801 28.2202 60.050201 28.223301 c
60.099701 28.2295 60.152401 28.237301 60.208401 28.246599 c
60.208401 27.6264 l
60.07 27.5891 59.9646 27.5658 59.892101 27.556499 c
59.819599 27.547199 59.720798 27.5425 59.5956 27.5425 c
59.289101 27.5425 59.0667 27.6451 58.928299 27.8503 c
58.855801 27.959101 58.804798 28.113001 58.775101 28.311899 c
58.593899 28.0881 58.333599 27.893801 57.994202 27.729 c
57.6549 27.564199 57.280899 27.481899 56.872299 27.481899 c
56.381401 27.481899 55.979401 27.621799 55.666401 27.9016 c
55.356701 28.1845 55.201801 28.5373 55.201801 28.9601 c
55.201801 29.4233 55.355 29.7824 55.6614 30.0373 c
55.967899 30.2922 56.3699 30.4492 56.867401 30.508301 c
58.285801 30.676201 l
h
56.131001 28.9788 m
56.131001 28.7363 56.224899 28.545099 56.412701 28.405199 c
56.600498 28.265301 56.822899 28.195299 57.079899 28.195299 c
57.392899 28.195299 57.695999 28.2637 57.9893 28.400499 c
58.483501 28.627501 58.730598 28.999001 58.730598 29.514999 c
58.730598 30.1912 l
58.621899 30.1259 58.481899 30.071501 58.310501 30.028 c
58.139198 29.984501 57.971199 29.9534 57.8064 29.9347 c
57.2677 29.8694 l
56.944801 29.829 56.702599 29.765301 56.541199 29.6782 c
56.2677 29.532101 56.131001 29.299 56.131001 28.9788 c
h
W*
0 0 132 43 rc
54.201801 33.765282 m
61.208401 33.765282 l
61.208401 26.481899 l
54.201801 26.481899 l
h
f
Q
q
62.724098 32.56477 m
62.444 32.437302 62.178699 32.227501 61.928299 31.9352 c
61.928299 32.644039 l
61.083199 32.644039 l
61.083199 27.6497 l
61.972801 27.6497 l
61.972801 30.2658 l
61.972801 30.592199 61.994202 30.842501 62.037102 31.0166 c
62.083199 31.1938 62.180401 31.364799 62.328701 31.529499 c
62.513199 31.734699 62.727299 31.8715 62.971199 31.939899 c
63.1063 31.980301 63.279202 32.0005 63.490101 32.0005 c
63.9053 32.0005 64.191902 31.8451 64.350098 31.534201 c
64.445602 31.3477 64.493401 31.1021 64.493401 30.7974 c
64.493401 27.6497 l
65.397903 27.6497 l
65.397903 30.853399 l
65.397903 31.357 65.325401 31.743999 65.180397 32.0145 c
64.916801 32.508808 64.409401 32.755959 63.658199 32.755959 c
63.315498 32.755959 63.004101 32.69223 62.724098 32.56477 c
h
W
0 0 132 43 rc
60.083199 33.755959 m
66.397903 33.755959 l
66.397903 26.6497 l
60.083199 26.6497 l
h
f
Q
q
71.575798 32.788601 m
72.172203 32.788601 72.656502 32.65181 73.028801 32.378201 c
73.404404 32.104698 73.630096 31.633699 73.705902 30.9653 c
72.841003 30.9653 l
72.7883 31.2731 72.667999 31.528 72.480202 31.730101 c
72.292397 31.9352 71.990898 32.0378 71.575798 32.0378 c
71.009102 32.0378 70.603798 31.776699 70.360001 31.2544 c
70.201797 30.915501 70.122704 30.4974 70.122704 30 c
70.122704 29.4995 70.234802 29.078199 70.458801 28.7363 c
70.682899 28.3943 71.0354 28.223301 71.516502 28.223301 c
71.885498 28.223301 72.177101 28.329 72.391296 28.5404 c
72.608704 28.7549 72.758598 29.0471 72.841003 29.417101 c
73.705902 29.417101 l
73.607101 28.7549 73.360001 28.269899 72.9646 27.9622 c
72.569199 27.657499 72.109596 27.505199 71.585701 27.505199 c
71.234802 27.052799 l
71.330299 27.080799 71.453903 27.094801 71.6054 27.094801 c
71.836098 27.094801 72.025497 27.0326 72.173798 26.9083 c
72.325401 26.7808 72.401199 26.6005 72.401199 26.367399 c
72.401199 26.1311 72.302299 25.9275 72.104599 25.7565 c
71.906898 25.585501 71.603798 25.5 71.195198 25.5 c
71.020599 25.5 70.839401 25.5233 70.651604 25.569901 c
70.546097 25.594801 70.404404 25.6383 70.226501 25.7005 c
70.399498 26.078199 l
70.524696 26.0347 70.621902 26.003599 70.691101 25.985001 c
70.826202 25.9508 70.948097 25.933701 71.056801 25.933701 c
71.178703 25.933701 71.284203 25.9508 71.3731 25.985001 c
71.544502 26.050301 71.630096 26.1684 71.630096 26.339399 c
71.630096 26.4389 71.585701 26.5259 71.496696 26.6005 c
71.411003 26.672001 71.2957 26.7078 71.150703 26.7078 c
71.0783 26.7078 71.012398 26.701599 70.953003 26.6891 c
70.897003 26.676701 70.829498 26.6565 70.750397 26.6285 c
70.5774 26.8197 l
71.111198 27.505199 l
70.643303 27.505199 70.234802 27.6824 69.885498 28.0368 c
69.411003 28.543501 69.173798 29.201 69.173798 30.0093 c
69.173798 30.886 69.399498 31.568399 69.850899 32.056499 c
70.302299 32.544559 70.877296 32.788601 71.575798 32.788601 c
h
W
0 0 132 43 rc
68.173798 33.788601 m
74.705902 33.788601 l
74.705902 24.5 l
68.173798 24.5 l
h
f
Q
q
76.453903 28.311899 m
79.5923 31.893299 l
76.686203 31.893299 l
76.686203 32.644039 l
80.7883 32.644039 l
80.7883 31.9585 l
77.669701 28.400499 l
80.882202 28.400499 l
80.882202 27.6497 l
76.453903 27.6497 l
76.453903 28.311899 l
h
W
0 0 132 43 rc
75.453903 33.644039 m
81.882202 33.644039 l
81.882202 26.6497 l
75.453903 26.6497 l
h
f
Q
q
85.463799 31.632099 m
85.1903 31.386499 85.053497 30.941999 85.053497 30.298401 c
85.053497 27.6497 l
84.163902 27.6497 l
84.163902 32.644039 l
85.043701 32.644039 l
85.043701 31.9352 l
85.254501 32.180801 85.445602 32.3596 85.616997 32.4715 c
85.910202 32.66114 86.242996 32.755959 86.615303 32.755959 c
87.037102 32.755959 87.376404 32.658031 87.6334 32.4622 c
87.778397 32.3503 87.910202 32.185501 88.028801 31.967899 c
88.226501 32.235199 88.458801 32.432598 88.7257 32.560101 c
88.992599 32.69067 89.292397 32.755959 89.625198 32.755959 c
90.336899 32.755959 90.821198 32.51347 91.0783 32.0285 c
91.216599 31.767401 91.285797 31.4161 91.285797 30.9746 c
91.285797 27.6497 l
90.361603 27.6497 l
90.361603 31.1192 l
90.361603 31.451799 90.272697 31.6803 90.094704 31.804701 c
89.920097 31.929001 89.705902 31.991199 89.452202 31.991199 c
89.102997 31.991199 88.801498 31.8808 88.547798 31.660101 c
88.297401 31.4394 88.172203 31.070999 88.172203 30.554899 c
88.172203 27.6497 l
87.2677 27.6497 l
87.2677 30.9093 l
87.2677 31.248199 87.224899 31.4953 87.139198 31.650801 c
87.004097 31.8839 86.752098 32.0005 86.383003 32.0005 c
86.046997 32.0005 85.740501 31.877701 85.463799 31.632099 c
h
W
0 0 132 43 rc
83.163902 33.755959 m
92.285797 33.755959 l
92.285797 26.6497 l
83.163902 26.6497 l
h
f
Q
q
42.5 27.6497 0.90439999 4.9710302 rc
41.5 33.620731 m
44.4044 33.620731 l
44.4044 26.6497 l
41.5 26.6497 l
h
f
Q
q
42.5 33.548698 0.90439999 0.95130002 rc
41.5 35.5 m
44.4044 35.5 l
44.4044 32.548698 l
41.5 32.548698 l
h
f
Q
q
74.595497 27.6497 0.90450001 4.9710302 rc
73.595497 33.620731 m
76.5 33.620731 l
76.5 26.6497 l
73.595497 26.6497 l
h
f
Q
q
74.595497 33.548698 0.90450001 0.95130002 rc
73.595497 35.5 m
76.5 35.5 l
76.5 32.548698 l
73.595497 32.548698 l
h
f
Q
q
81.910202 27.6497 0.90450001 4.9710302 rc
80.910202 33.620731 m
83.814697 33.620731 l
83.814697 26.6497 l
80.910202 26.6497 l
h
f
Q
q
81.910202 33.548698 0.90450001 0.95130002 rc
80.910202 35.5 m
83.814697 35.5 l
83.814697 32.548698 l
80.910202 32.548698 l
h
f
Q
q
92.595596 27.6497 0.90439999 4.9710302 rc
91.595596 33.620731 m
94.5 33.620731 l
94.5 26.6497 l
91.595596 26.6497 l
h
f
Q
q
92.595596 33.548698 0.90439999 0.95130002 rc
91.595596 35.5 m
94.5 35.5 l
94.5 32.548698 l
91.595596 32.548698 l
h
f
ep
end
%%Trailer
%%EOF
