%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 12.6 (Build 21G115) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
1 1 1 sc
q
16.460501 19.342501 m
19.9266 16.5357 24.8836 16.5357 28.349701 19.342501 c
27.009501 20.9974 l
24.3248 18.8234 20.485399 18.8234 17.800699 20.9974 c
16.460501 19.342501 l
h
W
0 0 132 43 rc
15.4605 21.9974 m
29.349701 21.9974 l
29.349701 15.5357 l
15.4605 15.5357 l
h
f
Q
q
17.903999 22.986601 2.1296 2.8769 rc
16.903999 26.863501 m
21.0336 26.863501 l
21.0336 21.986601 l
16.903999 21.986601 l
h
f
Q
q
24.511999 22.986601 2.1294999 2.8769 rc
23.511999 26.863501 m
27.6415 26.863501 l
27.6415 21.986601 l
23.511999 21.986601 l
h
f
Q
q
33.5 22 m
33.5 15.6487 28.351299 10.5 22 10.5 c
15.6487 10.5 10.5 15.6487 10.5 22 c
10.5 28.351299 15.6487 33.5 22 33.5 c
28.351299 33.5 33.5 28.351299 33.5 22 c
h
31.370501 22 m
31.370501 16.8248 27.1752 12.6295 22 12.6295 c
16.8248 12.6295 12.6295 16.8248 12.6295 22 c
12.6295 27.1752 16.8248 31.370501 22 31.370501 c
27.1752 31.370501 31.370501 27.1752 31.370501 22 c
h
W*
0 0 132 43 rc
9.5 34.5 m
34.5 34.5 l
34.5 9.5 l
9.5 9.5 l
h
f
Q
q
61.712799 32.776009 m
61.712799 31.691099 61.712799 30.472401 61.377701 29.0308 c
59.315601 29.2686 l
59.562901 30.3634 59.620399 31.2132 59.633801 32.032902 c
53.258202 32.032902 l
53.258202 33.905521 l
61.712799 33.905521 l
61.712799 32.776009 l
h
W
0 0 132 43 rc
52.258202 34.905521 m
62.712799 34.905521 l
62.712799 28.0308 l
52.258202 28.0308 l
h
f
Q
q
40.5 30.041401 m
40.5 32.136902 41.982101 33.638 43.8638 33.638 c
45.745499 33.638 47.2276 32.136902 47.2276 30.041401 c
47.2276 27.975599 45.745499 26.444799 43.8638 26.444799 c
41.982101 26.444799 40.5 27.975599 40.5 30.041401 c
h
45.191299 30.041401 m
45.191299 31.0669 44.611301 31.572201 43.8638 31.572201 c
43.116299 31.572201 42.536301 31.0669 42.536301 30.041401 c
42.536301 29.045601 43.116299 28.525499 43.8638 28.525499 c
44.611301 28.525499 45.191299 29.045601 45.191299 30.041401 c
h
W*
0 0 132 43 rc
39.5 34.638 m
48.2276 34.638 l
48.2276 25.444799 l
39.5 25.444799 l
h
f
Q
q
90.553398 33.57856 m
88.697502 33.57856 87.318497 31.631599 87.318497 28.5403 c
87.318497 25.4193 88.697502 23.472401 90.553398 23.472401 c
92.409302 23.472401 93.7883 25.4193 93.7883 28.5403 c
93.7883 31.631599 92.409302 33.57856 90.553398 33.57856 c
h
90.553398 31.393801 m
91.300903 31.393801 91.790604 30.487301 91.790604 28.5403 c
91.790604 26.5637 91.300903 25.657101 90.553398 25.657101 c
89.805901 25.657101 89.316101 26.5637 89.316101 28.5403 c
89.316101 30.487301 89.805901 31.393801 90.553398 31.393801 c
h
W*
0 0 132 43 rc
86.318497 34.57856 m
94.7883 34.57856 l
94.7883 22.472401 l
86.318497 22.472401 l
h
f
Q
q
57.433998 25.8652 m
54.804798 25.8652 53.1036 24.854601 53.1036 23.190001 c
53.1036 21.525499 54.804798 20.5149 57.433998 20.5149 c
60.063099 20.5149 61.7644 21.525499 61.7644 23.190001 c
61.7644 24.854601 60.063099 25.8652 57.433998 25.8652 c
h
57.433998 24.081699 m
58.929001 24.081699 59.702301 23.814199 59.702301 23.190001 c
59.702301 22.5658 58.929001 22.2983 57.433998 22.2983 c
55.9389 22.2983 55.178501 22.5658 55.178501 23.190001 c
55.178501 23.814199 55.9389 24.081699 57.433998 24.081699 c
h
W*
0 0 132 43 rc
52.1036 26.8652 m
62.7644 26.8652 l
62.7644 19.5149 l
52.1036 19.5149 l
h
f
Q
q
63.554798 25.003201 m
65.732903 26.103001 66.454597 28.6444 66.454597 30.977699 c
66.454597 31.2304 l
64.083199 31.2304 l
64.083199 33.192139 l
70.8881 33.192139 l
70.8881 31.2304 l
68.568298 31.2304 l
68.568298 30.977699 l
68.568298 28.778099 69.2771 26.370501 71.429398 25.3599 c
70.308197 23.472401 l
68.952499 24.1238 68.068802 25.350599 67.546799 26.854601 c
67.0317 25.1912 66.130997 23.8274 64.7276 23.1157 c
63.554798 25.003201 l
h
W
0 0 132 43 rc
62.554798 34.192139 m
72.429398 34.192139 l
72.429398 22.1157 l
62.554798 22.1157 l
h
f
Q
q
76.570801 23.1752 m
76.570801 24.839701 78.1689 25.790899 80.798103 25.790899 c
83.427299 25.790899 85.025398 24.839701 85.025398 23.1752 c
85.025398 21.510599 83.427299 20.5446 80.798103 20.5446 c
78.1689 20.5446 76.570801 21.510599 76.570801 23.1752 c
h
82.924599 23.1752 m
82.924599 23.7696 82.267303 23.977699 80.798103 23.977699 c
79.328796 23.977699 78.671501 23.7696 78.671501 23.1752 c
78.671501 22.595501 79.328796 22.372601 80.798103 22.372601 c
82.267303 22.372601 82.924599 22.595501 82.924599 23.1752 c
h
W*
0 0 132 43 rc
75.570801 26.790899 m
86.025398 26.790899 l
86.025398 19.5446 l
75.570801 19.5446 l
h
f
Q
q
104.697 33.57856 m
102.816 33.57856 101.437 31.631599 101.437 28.5403 c
101.437 25.4193 102.816 23.472401 104.697 23.472401 c
106.566 23.472401 107.945 25.4193 107.945 28.5403 c
107.945 31.631599 106.566 33.57856 104.697 33.57856 c
h
104.697 31.393801 m
105.445 31.393801 105.947 30.487301 105.947 28.5403 c
105.947 26.5637 105.445 25.657101 104.697 25.657101 c
103.937 25.657101 103.447 26.5637 103.447 28.5403 c
103.447 30.487301 103.937 31.393801 104.697 31.393801 c
h
W*
0 0 132 43 rc
100.437 34.57856 m
108.945 34.57856 l
108.945 22.472401 l
100.437 22.472401 l
h
f
Q
q
114.839 26.6231 m
116.592 26.6231 118.577 26.756901 120.574 27.2325 c
120.355 29.164499 l
118.793 28.792101 117.255 28.6334 115.832 28.586201 c
115.832 33.45966 l
113.757 33.45966 l
113.757 26.6231 l
114.839 26.6231 l
h
W
0 0 132 43 rc
112.757 34.45966 m
121.574 34.45966 l
121.574 25.6231 l
112.757 25.6231 l
h
f
Q
q
95.0513 20.5 2.0878999 14 rc
94.0513 35.5 m
98.139198 35.5 l
98.139198 19.5 l
94.0513 19.5 l
h
f
Q
q
48.4133 24.5425 2.0878999 9.9277802 rc
47.4133 35.47028 m
51.501202 35.47028 l
51.501202 23.5425 l
47.4133 23.5425 l
h
f
Q
q
42.291401 20.737801 m
50.771801 20.737801 l
50.771801 22.6401 l
44.366402 22.6401 l
44.366402 25.523399 l
42.291401 25.523399 l
42.291401 20.737801 l
h
W
0 0 132 43 rc
41.291401 26.523399 m
51.771801 26.523399 l
51.771801 19.737801 l
41.291401 19.737801 l
h
f
Q
q
52.072498 26.5191 m
52.072498 28.406601 l
55.861599 28.406601 l
55.861599 30.695299 l
57.9366 30.695299 l
57.9366 28.406601 l
62.9501 28.406601 l
62.9501 26.5191 l
52.072498 26.5191 l
h
W
0 0 132 43 rc
51.072498 31.695299 m
63.9501 31.695299 l
63.9501 25.5191 l
51.072498 25.5191 l
h
f
Q
q
71.725899 20.529699 2.0878 13.94058 rc
70.725899 35.47028 m
74.813698 35.47028 l
74.813698 19.529699 l
70.725899 19.529699 l
h
f
Q
q
85.115601 29.342899 m
76.686798 29.342899 l
76.686798 34.277069 l
78.761803 34.277069 l
78.761803 31.2304 l
85.115601 31.2304 l
85.115601 29.342899 l
h
W
0 0 132 43 rc
75.686798 35.277069 m
86.115601 35.277069 l
86.115601 28.342899 l
75.686798 28.342899 l
h
f
Q
q
75.385101 26.489401 10.942 1.9023 rc
74.385101 29.391701 m
87.327103 29.391701 l
87.327103 25.489401 l
74.385101 25.489401 l
h
f
Q
q
108.925 20.529699 m
108.925 34.47028 l
111.012 34.47028 l
111.012 29.387501 l
112.636 29.387501 l
112.636 27.425699 l
111.012 27.425699 l
111.012 20.529699 l
108.925 20.529699 l
h
W
0 0 132 43 rc
107.925 35.47028 m
113.636 35.47028 l
113.636 19.529699 l
107.925 19.529699 l
h
f
Q
q
121.141 24.3493 2.0880001 10.13584 rc
120.141 35.485142 m
124.229 35.485142 l
124.229 23.3493 l
120.141 23.3493 l
h
f
Q
q
115.02 25.5977 m
115.02 20.737801 l
123.5 20.737801 l
123.5 22.6401 l
117.095 22.6401 l
117.095 25.5977 l
115.02 25.5977 l
h
W
0 0 132 43 rc
114.02 26.5977 m
124.5 26.5977 l
124.5 19.737801 l
114.02 19.737801 l
h
f
Q
q
61.8382 12.6755 m
61.8382 14.5828 62.8022 15.8046 64.137703 15.8046 c
65.483299 15.8046 66.447304 14.5828 66.447304 12.6755 c
66.447304 10.7583 65.483299 9.5363998 64.137703 9.5363998 c
62.8022 9.5363998 61.8382 10.7583 61.8382 12.6755 c
h
65.643898 12.6755 m
65.643898 14.1258 65.031403 15.0596 64.137703 15.0596 c
63.254101 15.0596 62.6315 14.1258 62.6315 12.6755 c
62.6315 11.2152 63.254101 10.2616 64.137703 10.2616 c
65.031403 10.2616 65.643898 11.2152 65.643898 12.6755 c
h
W*
0 0 132 43 rc
60.8382 16.8046 m
67.447304 16.8046 l
67.447304 8.5363998 l
60.8382 8.5363998 l
h
f
Q
q
47.972599 10.2517 m
46.687302 10.8874 45.6731 12.5265 45.6731 14.106 c
45.6731 15.7152 l
44.849701 15.7152 l
44.849701 14.106 l
44.849701 12.4669 43.815399 10.7384 42.5 10.0828 c
43.0121 9.4272003 l
44.027901 9.9611998 44.867802 11.0868 45.272301 12.4031 c
45.6731 11.1634 46.481602 10.1148 47.460499 9.5959997 c
47.972599 10.2517 l
h
W
0 0 132 43 rc
41.5 16.7152 m
48.972599 16.7152 l
48.972599 8.4272003 l
41.5 8.4272003 l
h
f
Q
q
57.410801 12.5662 m
56.023899 12.323 54.868198 12.2799 53.273701 12.2782 c
53.273701 13.5397 l
56.5271 13.5397 l
56.5271 16.0033 l
52.440201 16.0033 l
52.440201 15.3278 l
55.703701 15.3278 l
55.703701 14.1755 l
52.4603 14.1755 l
52.4603 11.5927 l
53.173302 11.5927 l
54.850201 11.5927 56.045101 11.6523 57.480999 11.8907 c
57.410801 12.5662 l
h
W
0 0 132 43 rc
51.440201 17.0033 m
58.480999 17.0033 l
58.480999 10.5927 l
51.440201 10.5927 l
h
f
Q
q
77.486603 13.3146 m
76.619003 13.8218 76.152901 14.7109 76.152901 15.3775 c
76.152901 16.192101 l
75.329498 16.192101 l
75.329498 15.3775 l
75.329498 14.6225 74.737 13.6291 73.612396 13.2119 c
74.014 12.606 l
74.865501 12.9299 75.439201 13.5581 75.735298 14.2508 c
76.024101 13.525 76.595596 12.8356 77.478302 12.4967 c
78.357002 12.8275 78.931602 13.4929 79.224602 14.2164 c
79.519302 13.5109 80.097702 12.9096 80.9627 12.596 c
81.354301 13.2119 l
80.229698 13.5993 79.637199 14.5331 79.637199 15.3775 c
79.637199 16.192101 l
78.813797 16.192101 l
78.813797 15.3775 l
78.813797 14.6784 78.359596 13.8058 77.486603 13.3146 c
h
W
0 0 132 43 rc
72.612396 17.192101 m
82.354301 17.192101 l
82.354301 11.4967 l
72.612396 11.4967 l
h
f
Q
q
91.406898 13.1523 m
91.6119 14.133 91.621803 14.8519 91.6222 15.447 c
86.320396 15.447 l
86.320396 16.1126 l
92.4356 16.1126 l
92.4356 15.5364 l
92.4356 14.9317 92.4356 14.1615 92.237701 13.1523 c
93.5 13.1523 l
93.5 12.4768 l
85.2761 12.4768 l
85.2761 13.1523 l
91.406898 13.1523 l
h
W
0 0 132 43 rc
84.2761 17.1126 m
94.5 17.1126 l
94.5 11.4768 l
84.2761 11.4768 l
h
f
Q
q
68.094101 7.5 0.83340001 9 rc
67.094101 17.5 m
69.927498 17.5 l
69.927498 6.5 l
67.094101 6.5 l
h
f
Q
q
48.7659 16.490101 m
48.7659 7.5099001 l
49.609299 7.5099001 l
49.609299 12.1589 l
51.095501 12.1589 l
51.095501 12.8543 l
49.609299 12.8543 l
49.609299 16.490101 l
48.7659 16.490101 l
h
W
0 0 132 43 rc
47.7659 17.490101 m
52.095501 17.490101 l
52.095501 6.5099001 l
47.7659 6.5099001 l
h
f
Q
q
58.2743 16.480101 m
58.2743 11.1358 l
59.1078 11.1358 l
59.1078 13.5 l
60.4533 13.5 l
60.4533 14.1954 l
59.1078 14.1954 l
59.1078 16.480101 l
58.2743 16.480101 l
h
W
0 0 132 43 rc
57.2743 17.480101 m
61.4533 17.480101 l
61.4533 10.1358 l
57.2743 10.1358 l
h
f
Q
q
53.384102 10.6887 m
53.384102 7.6290998 l
59.1078 7.6290998 l
59.1078 10.6887 l
53.384102 10.6887 l
h
58.294399 10.0331 m
58.294399 8.2946997 l
54.2075 8.2946997 l
54.2075 10.0331 l
58.294399 10.0331 l
h
W*
0 0 132 43 rc
52.384102 11.6887 m
60.1078 11.6887 l
60.1078 6.6290998 l
52.384102 6.6290998 l
h
f
Q
q
73.381401 11.1755 8.2340002 0.67549998 rc
72.381401 12.851 m
82.615402 12.851 l
82.615402 10.1755 l
72.381401 10.1755 l
h
f
Q
q
74.425697 7.7086 m
80.7117 7.7086 l
80.7117 8.3841 l
75.259201 8.3841 l
75.259201 10.3609 l
74.425697 10.3609 l
74.425697 7.7086 l
h
W
0 0 132 43 rc
73.425697 11.3609 m
81.7117 11.3609 l
81.7117 6.7086 l
73.425697 6.7086 l
h
f
Q
q
86.239998 10.9272 m
86.239998 11.5927 l
92.465698 11.5927 l
92.465698 9.3079004 l
87.093597 9.3079004 l
87.093597 8.2748003 l
92.696701 8.2748003 l
92.696701 7.6093001 l
86.260101 7.6093001 l
86.260101 9.9436998 l
91.642303 9.9436998 l
91.642303 10.9272 l
86.239998 10.9272 l
h
W
0 0 132 43 rc
85.239998 12.5927 m
93.696701 12.5927 l
93.696701 6.6093001 l
85.239998 6.6093001 l
h
f
ep
end
%%Trailer
%%EOF
