%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 12.6 (Build 21G115) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
q
15.4605 19.342501 m
18.9266 16.5357 23.8836 16.5357 27.349701 19.342501 c
26.009501 20.9974 l
23.3248 18.8234 19.485399 18.8234 16.800699 20.9974 c
15.4605 19.342501 l
h
W
0 0 132 43 rc
14.4605 21.9974 m
28.349701 21.9974 l
28.349701 15.5357 l
14.4605 15.5357 l
h
f
Q
q
16.903999 22.986601 2.1296 2.8769 rc
15.904 26.863501 m
20.0336 26.863501 l
20.0336 21.986601 l
15.904 21.986601 l
h
f
Q
q
23.511999 22.986601 2.1294999 2.8769 rc
22.511999 26.863501 m
26.6415 26.863501 l
26.6415 21.986601 l
22.511999 21.986601 l
h
f
Q
q
32.5 22 m
32.5 15.6487 27.351299 10.5 21 10.5 c
14.6487 10.5 9.5 15.6487 9.5 22 c
9.5 28.351299 14.6487 33.5 21 33.5 c
27.351299 33.5 32.5 28.351299 32.5 22 c
h
30.370501 22 m
30.370501 16.8248 26.1752 12.6295 21 12.6295 c
15.8248 12.6295 11.6295 16.8248 11.6295 22 c
11.6295 27.1752 15.8248 31.370501 21 31.370501 c
26.1752 31.370501 30.370501 27.1752 30.370501 22 c
h
W*
0 0 132 43 rc
8.5 34.5 m
33.5 34.5 l
33.5 9.5 l
8.5 9.5 l
h
f
Q
q
86.318497 28.5403 m
86.318497 31.631599 87.697502 33.57856 89.553398 33.57856 c
91.409302 33.57856 92.7883 31.631599 92.7883 28.5403 c
92.7883 25.4193 91.409302 23.472401 89.553398 23.472401 c
87.697502 23.472401 86.318497 25.4193 86.318497 28.5403 c
h
90.790604 28.5403 m
90.790604 30.487301 90.300903 31.393801 89.553398 31.393801 c
88.805901 31.393801 88.316101 30.487301 88.316101 28.5403 c
88.316101 26.5637 88.805901 25.657101 89.553398 25.657101 c
90.300903 25.657101 90.790604 26.5637 90.790604 28.5403 c
h
W*
0 0 132 43 rc
85.318497 34.57856 m
93.7883 34.57856 l
93.7883 22.472401 l
85.318497 22.472401 l
h
f
Q
q
42.8638 33.638 m
40.982101 33.638 39.5 32.136902 39.5 30.041401 c
39.5 27.975599 40.982101 26.444799 42.8638 26.444799 c
44.745499 26.444799 46.2276 27.975599 46.2276 30.041401 c
46.2276 32.136902 44.745499 33.638 42.8638 33.638 c
h
42.8638 31.572201 m
43.611301 31.572201 44.191299 31.0669 44.191299 30.041401 c
44.191299 29.045601 43.611301 28.525499 42.8638 28.525499 c
42.116299 28.525499 41.536301 29.045601 41.536301 30.041401 c
41.536301 31.0669 42.116299 31.572201 42.8638 31.572201 c
h
W*
0 0 132 43 rc
38.5 34.638 m
47.2276 34.638 l
47.2276 25.444799 l
38.5 25.444799 l
h
f
Q
q
56.433998 25.8652 m
53.804798 25.8652 52.1036 24.854601 52.1036 23.190001 c
52.1036 21.525499 53.804798 20.5149 56.433998 20.5149 c
59.063099 20.5149 60.7644 21.525499 60.7644 23.190001 c
60.7644 24.854601 59.063099 25.8652 56.433998 25.8652 c
h
56.433998 24.081699 m
57.929001 24.081699 58.702301 23.814199 58.702301 23.190001 c
58.702301 22.5658 57.929001 22.2983 56.433998 22.2983 c
54.9389 22.2983 54.178501 22.5658 54.178501 23.190001 c
54.178501 23.814199 54.9389 24.081699 56.433998 24.081699 c
h
W*
0 0 132 43 rc
51.1036 26.8652 m
61.7644 26.8652 l
61.7644 19.5149 l
51.1036 19.5149 l
h
f
Q
q
60.377701 29.0308 m
60.712799 30.472401 60.712799 31.691099 60.712799 32.776009 c
60.712799 33.905521 l
52.258202 33.905521 l
52.258202 32.032902 l
58.633801 32.032902 l
58.620399 31.2132 58.562901 30.3634 58.315601 29.2686 c
60.377701 29.0308 l
h
W
0 0 132 43 rc
51.258202 34.905521 m
61.712799 34.905521 l
61.712799 28.0308 l
51.258202 28.0308 l
h
f
Q
q
62.554798 25.003201 m
64.732903 26.103001 65.454597 28.6444 65.454597 30.977699 c
65.454597 31.2304 l
63.083199 31.2304 l
63.083199 33.192139 l
69.8881 33.192139 l
69.8881 31.2304 l
67.568298 31.2304 l
67.568298 30.977699 l
67.568298 28.778099 68.2771 26.370501 70.429398 25.3599 c
69.308197 23.472401 l
67.952499 24.1238 67.068802 25.350599 66.546799 26.854601 c
66.0317 25.1912 65.130997 23.8274 63.7276 23.1157 c
62.554798 25.003201 l
h
W
0 0 132 43 rc
61.554798 34.192139 m
71.429398 34.192139 l
71.429398 22.1157 l
61.554798 22.1157 l
h
f
Q
q
79.798103 25.790899 m
77.1689 25.790899 75.570801 24.839701 75.570801 23.1752 c
75.570801 21.510599 77.1689 20.5446 79.798103 20.5446 c
82.427299 20.5446 84.025398 21.510599 84.025398 23.1752 c
84.025398 24.839701 82.427299 25.790899 79.798103 25.790899 c
h
79.798103 23.977699 m
81.267303 23.977699 81.924599 23.7696 81.924599 23.1752 c
81.924599 22.595501 81.267303 22.372601 79.798103 22.372601 c
78.328796 22.372601 77.671501 22.595501 77.671501 23.1752 c
77.671501 23.7696 78.328796 23.977699 79.798103 23.977699 c
h
W*
0 0 132 43 rc
74.570801 26.790899 m
85.025398 26.790899 l
85.025398 19.5446 l
74.570801 19.5446 l
h
f
Q
q
103.697 33.57856 m
101.816 33.57856 100.4366 31.631599 100.4366 28.5403 c
100.4366 25.4193 101.816 23.472401 103.697 23.472401 c
105.566 23.472401 106.945 25.4193 106.945 28.5403 c
106.945 31.631599 105.566 33.57856 103.697 33.57856 c
h
103.697 31.393801 m
104.445 31.393801 104.947 30.487301 104.947 28.5403 c
104.947 26.5637 104.445 25.657101 103.697 25.657101 c
102.937 25.657101 102.447 26.5637 102.447 28.5403 c
102.447 30.487301 102.937 31.393801 103.697 31.393801 c
h
W*
0 0 132 43 rc
99.4366 34.57856 m
107.945 34.57856 l
107.945 22.472401 l
99.4366 22.472401 l
h
f
Q
q
119.574 27.2325 m
117.577 26.756901 115.592 26.6231 113.839 26.6231 c
112.757 26.6231 l
112.757 33.45966 l
114.832 33.45966 l
114.832 28.586201 l
116.255 28.6334 117.793 28.792101 119.355 29.164499 c
119.574 27.2325 l
h
W
0 0 132 43 rc
111.757 34.45966 m
120.574 34.45966 l
120.574 25.6231 l
111.757 25.6231 l
h
f
Q
q
94.0513 20.5 2.0878999 14 rc
93.0513 35.5 m
97.139198 35.5 l
97.139198 19.5 l
93.0513 19.5 l
h
f
Q
q
47.4133 24.5425 2.0878999 9.9277802 rc
46.4133 35.47028 m
50.501202 35.47028 l
50.501202 23.5425 l
46.4133 23.5425 l
h
f
Q
q
41.291401 20.737801 m
49.771801 20.737801 l
49.771801 22.6401 l
43.366402 22.6401 l
43.366402 25.523399 l
41.291401 25.523399 l
41.291401 20.737801 l
h
W
0 0 132 43 rc
40.291401 26.523399 m
50.771801 26.523399 l
50.771801 19.737801 l
40.291401 19.737801 l
h
f
Q
q
51.072498 28.406601 m
51.072498 26.5191 l
61.9501 26.5191 l
61.9501 28.406601 l
56.9366 28.406601 l
56.9366 30.695299 l
54.861599 30.695299 l
54.861599 28.406601 l
51.072498 28.406601 l
h
W
0 0 132 43 rc
50.072498 31.695299 m
62.9501 31.695299 l
62.9501 25.5191 l
50.072498 25.5191 l
h
f
Q
q
70.725899 20.529699 2.0878 13.94058 rc
69.725899 35.47028 m
73.813698 35.47028 l
73.813698 19.529699 l
69.725899 19.529699 l
h
f
Q
q
75.686798 29.342899 m
84.115601 29.342899 l
84.115601 31.2304 l
77.761803 31.2304 l
77.761803 34.277069 l
75.686798 34.277069 l
75.686798 29.342899 l
h
W
0 0 132 43 rc
74.686798 35.277069 m
85.115601 35.277069 l
85.115601 28.342899 l
74.686798 28.342899 l
h
f
Q
q
74.385101 26.489401 10.942 1.9023 rc
73.385101 29.391701 m
86.327103 29.391701 l
86.327103 25.489401 l
73.385101 25.489401 l
h
f
Q
q
107.925 34.47028 m
107.925 20.529699 l
110.012 20.529699 l
110.012 27.425699 l
111.636 27.425699 l
111.636 29.387501 l
110.012 29.387501 l
110.012 34.47028 l
107.925 34.47028 l
h
W
0 0 132 43 rc
106.925 35.47028 m
112.636 35.47028 l
112.636 19.529699 l
106.925 19.529699 l
h
f
Q
q
120.141 24.3493 2.0880001 10.13584 rc
119.141 35.485142 m
123.229 35.485142 l
123.229 23.3493 l
119.141 23.3493 l
h
f
Q
q
114.02 20.737801 m
114.02 25.5977 l
116.095 25.5977 l
116.095 22.6401 l
122.5 22.6401 l
122.5 20.737801 l
114.02 20.737801 l
h
W
0 0 132 43 rc
113.02 26.5977 m
123.5 26.5977 l
123.5 19.737801 l
113.02 19.737801 l
h
f
Q
q
59.827702 12.6755 m
59.827702 14.5828 60.791302 15.8046 62.1264 15.8046 c
63.4715 15.8046 64.435097 14.5828 64.435097 12.6755 c
64.435097 10.7583 63.4715 9.5363998 62.1264 9.5363998 c
60.791302 9.5363998 59.827702 10.7583 59.827702 12.6755 c
h
63.632099 12.6755 m
63.632099 14.1258 63.019798 15.0596 62.1264 15.0596 c
61.243099 15.0596 60.620701 14.1258 60.620701 12.6755 c
60.620701 11.2152 61.243099 10.2616 62.1264 10.2616 c
63.019798 10.2616 63.632099 11.2152 63.632099 12.6755 c
h
W*
0 0 132 43 rc
58.827702 16.8046 m
65.435097 16.8046 l
65.435097 8.5363998 l
58.827702 8.5363998 l
h
f
Q
q
46.970699 10.2517 m
45.685799 10.8874 44.672001 12.5265 44.672001 14.106 c
44.672001 15.7152 l
43.8489 15.7152 l
43.8489 14.106 l
43.8489 12.4669 42.814999 10.7384 41.5 10.0828 c
42.011902 9.4272003 l
43.027401 9.9611998 43.867001 11.0868 44.2714 12.4031 c
44.672001 11.1634 45.480202 10.1148 46.458698 9.5959997 c
46.970699 10.2517 l
h
W
0 0 132 43 rc
40.5 16.7152 m
47.970699 16.7152 l
47.970699 8.4272003 l
40.5 8.4272003 l
h
f
Q
q
55.903702 12.5662 m
54.5172 12.323 53.362 12.2799 51.768002 12.2782 c
51.768002 13.5397 l
55.020302 13.5397 l
55.020302 16.0033 l
50.934898 16.0033 l
50.934898 15.3278 l
54.197201 15.3278 l
54.197201 14.1755 l
50.955002 14.1755 l
50.955002 11.5927 l
51.667599 11.5927 l
53.344002 11.5927 54.538502 11.6523 55.9739 11.8907 c
55.903702 12.5662 l
h
W
0 0 132 43 rc
49.934898 17.0033 m
56.9739 17.0033 l
56.9739 10.5927 l
49.934898 10.5927 l
h
f
Q
q
92.612396 8.3484001 m
91.771301 8.8409996 91.360901 9.6973 91.360901 10.5 c
91.360901 11.0166 l
90.547798 11.0166 l
90.547798 10.5 l
90.547798 9.6258001 89.875298 8.6522999 88.730904 8.2350998 c
89.152496 7.6192002 l
90.008003 7.9447999 90.621803 8.5691996 90.943298 9.2966003 c
91.214996 8.5380001 91.764503 7.8754001 92.635696 7.5397 c
93.477402 7.8948998 94.022301 8.5901003 94.300499 9.3250999 c
94.612099 8.5675001 95.233498 7.9401999 96.118896 7.6192002 c
96.550499 8.2350998 l
95.386101 8.6225004 94.723602 9.5563002 94.723602 10.5 c
94.723602 11.0166 l
93.9105 11.0166 l
93.9105 10.5 l
93.9105 9.8015003 93.473099 8.8903999 92.612396 8.3484001 c
h
W
0 0 132 43 rc
87.730904 12.0166 m
97.550499 12.0166 l
97.550499 6.5397 l
87.730904 6.5397 l
h
f
Q
q
90.708397 15.9834 m
91.907303 15.9834 92.831001 15.2865 93.006897 14.245 c
94.864098 14.245 l
94.864098 16.490101 l
95.697304 16.490101 l
95.697304 11.3742 l
94.864098 11.3742 l
94.864098 13.5596 l
93.014297 13.5596 l
92.858704 12.4996 91.9254 11.7815 90.708397 11.7815 c
89.373398 11.7815 88.389603 12.6457 88.389603 13.8775 c
88.389603 15.1192 89.373398 15.9834 90.708397 15.9834 c
h
90.708397 15.298 m
91.581703 15.298 92.2342 14.702 92.2342 13.8775 c
92.2342 13.053 91.581703 12.4669 90.708397 12.4669 c
89.825104 12.4669 89.182602 13.053 89.182602 13.8775 c
89.182602 14.702 89.825104 15.298 90.708397 15.298 c
h
W*
0 0 132 43 rc
87.389603 17.490101 m
96.697304 17.490101 l
96.697304 10.3742 l
87.389603 10.3742 l
h
f
Q
q
97.633797 13.6788 m
99.269997 13.8974 100.846 14.8609 100.846 15.9934 c
100.846 16.390699 l
101.689 16.390699 l
101.689 15.9934 l
101.689 14.8808 103.285 13.8974 104.901 13.6788 c
104.59 13.0331 l
103.196 13.243 101.848 13.9451 101.271 14.9388 c
100.698 13.9377 99.3479 13.2436 97.934898 13.0331 c
97.633797 13.6788 l
h
W
0 0 132 43 rc
96.633797 17.390699 m
105.901 17.390699 l
105.901 12.0331 l
96.633797 12.0331 l
h
f
Q
q
111.766 10.957 m
110.261 10.6453 108.851 10.5437 107.5 10.5398 c
107.5 15.6159 l
106.677 15.6159 l
106.677 9.8245001 l
107.42 9.8245001 l
108.855 9.8245001 110.291 9.9337997 111.867 10.2517 c
111.766 10.957 l
h
W
0 0 132 43 rc
105.677 16.6159 m
112.867 16.6159 l
112.867 8.8245001 l
105.677 8.8245001 l
h
f
Q
q
120.428 10.043 m
119.033 9.7847996 117.839 9.7350998 116.132 9.7350998 c
115.419 9.7350998 l
115.419 15.6258 l
119.635 15.6258 l
119.635 14.9503 l
116.243 14.9503 l
116.243 10.4306 l
117.86 10.4332 119.013 10.4956 120.338 10.7384 c
120.428 10.043 l
h
W
0 0 132 43 rc
114.419 16.625799 m
121.428 16.625799 l
121.428 8.7350998 l
114.419 8.7350998 l
h
f
Q
q
66.081299 7.5 0.83319998 9 rc
65.081299 17.5 m
67.914497 17.5 l
67.914497 6.5 l
65.081299 6.5 l
h
f
Q
q
47.763699 16.490101 m
47.763699 7.5099001 l
48.606899 7.5099001 l
48.606899 12.1589 l
50.092499 12.1589 l
50.092499 12.8543 l
48.606899 12.8543 l
48.606899 16.490101 l
47.763699 16.490101 l
h
W
0 0 132 43 rc
46.763699 17.490101 m
51.092499 17.490101 l
51.092499 6.5099001 l
46.763699 6.5099001 l
h
f
Q
q
56.766899 16.480101 m
56.766899 11.1358 l
57.600101 11.1358 l
57.600101 13.5 l
58.945202 13.5 l
58.945202 14.1954 l
57.600101 14.1954 l
57.600101 16.480101 l
56.766899 16.480101 l
h
W
0 0 132 43 rc
55.766899 17.480101 m
59.945202 17.480101 l
59.945202 10.1358 l
55.766899 10.1358 l
h
f
Q
q
51.878399 10.6887 m
51.878399 7.6290998 l
57.600101 7.6290998 l
57.600101 10.6887 l
51.878399 10.6887 l
h
56.786999 10.0331 m
56.786999 8.2946997 l
52.701599 8.2946997 l
52.701599 10.0331 l
56.786999 10.0331 l
h
W*
0 0 132 43 rc
50.878399 11.6887 m
58.600101 11.6887 l
58.600101 6.6290998 l
50.878399 6.6290998 l
h
f
Q
q
70.744499 15.6854 m
70.744499 11.5232 l
74.910301 11.5232 l
74.910301 15.6854 l
70.744499 15.6854 l
h
74.097198 15.0199 m
74.097198 12.1887 l
71.557602 12.1887 l
71.557602 15.0199 l
74.097198 15.0199 l
h
W*
0 0 132 43 rc
69.744499 16.6854 m
75.910301 16.6854 l
75.910301 10.5232 l
69.744499 10.5232 l
h
f
Q
q
76.576599 16.5 m
76.576599 9.9139004 l
77.409698 9.9139004 l
77.409698 13.0728 l
78.754799 13.0728 l
78.754799 13.7583 l
77.409698 13.7583 l
77.409698 16.5 l
76.576599 16.5 l
h
W
0 0 132 43 rc
75.576599 17.5 m
79.754799 17.5 l
79.754799 8.9139004 l
75.576599 8.9139004 l
h
f
Q
q
71.758301 7.7086 m
77.821297 7.7086 l
77.821297 8.3841 l
72.591499 8.3841 l
72.591499 10.5397 l
71.758301 10.5397 l
71.758301 7.7086 l
h
W
0 0 132 43 rc
70.758301 11.5397 m
78.821297 11.5397 l
78.821297 6.7086 l
70.758301 6.7086 l
h
f
Q
q
79.306099 12.0695 8.2010002 0.67549998 rc
78.306099 13.745 m
88.507103 13.745 l
88.507103 11.0695 l
78.306099 11.0695 l
h
f
Q
q
80.390198 13.4702 m
80.390198 16.202 l
86.432999 16.202 l
86.432999 15.5265 l
81.213303 15.5265 l
81.213303 14.1358 l
86.533401 14.1358 l
86.533401 13.4702 l
80.390198 13.4702 l
h
W
0 0 132 43 rc
79.390198 17.202 m
87.533401 17.202 l
87.533401 12.4702 l
79.390198 12.4702 l
h
f
Q
q
80.289803 10.649 m
80.289803 11.2947 l
86.453102 11.2947 l
86.453102 9.1787996 l
81.133003 9.1787996 l
81.133003 8.2649002 l
86.724098 8.2649002 l
86.724098 7.6093001 l
80.309898 7.6093001 l
80.309898 9.7946997 l
85.629997 9.7946997 l
85.629997 10.649 l
80.289803 10.649 l
h
W
0 0 132 43 rc
79.289803 12.2947 m
87.724098 12.2947 l
87.724098 6.6093001 l
79.289803 6.6093001 l
h
f
Q
q
98.206001 7.6290998 m
98.206001 11.106 l
99.029099 11.106 l
99.029099 10.0629 l
103.466 10.0629 l
103.466 11.106 l
104.299 11.106 l
104.299 7.6290998 l
98.206001 7.6290998 l
h
103.466 9.4272003 m
99.029099 9.4272003 l
99.029099 8.2946997 l
103.466 8.2946997 l
103.466 9.4272003 l
h
W*
0 0 132 43 rc
97.206001 12.106 m
105.299 12.106 l
105.299 6.6290998 l
97.206001 6.6290998 l
h
f
Q
q
97.162003 11.7318 8.2010002 0.6656 rc
96.162003 13.3974 m
106.363 13.3974 l
106.363 10.7318 l
96.162003 10.7318 l
h
f
Q
q
112.7 7.5099001 0.833 8.9801998 rc
111.7 17.490101 m
114.533 17.490101 l
114.533 6.5099001 l
111.7 6.5099001 l
h
f
Q
q
121.171 7.5 m
121.171 16.5 l
122.014 16.5 l
122.014 12.9536 l
123.5 12.9536 l
123.5 12.2583 l
122.014 12.2583 l
122.014 7.5 l
121.171 7.5 l
h
W
0 0 132 43 rc
120.171 17.5 m
124.5 17.5 l
124.5 6.5 l
120.171 6.5 l
h
f
ep
end
%%Trailer
%%EOF
