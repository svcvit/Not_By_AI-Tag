%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 14.0 (Build 23A344) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
0 0 0 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.49996 c
131 0.99996001 l
15.5 0.99996001 l
7.4918699 0.99996001 1 7.4918599 1 15.49996 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 -0.00004000 l
0 -0.00004000 l
h
f
Q
0.67450982 0.67450982 0.67450982 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.50004 c
130 41.000038 l
14.5 41.000038 l
6.4918699 41.000038 0 34.508141 0 26.50004 c
0 0 l
h
S
Q
1 1 1 sc
q
63.457199 27.943159 m
63.012501 27.581261 62.476299 27.282459 61.848499 27.046659 c
61.848499 26.01576 l
62.7248 26.33456 63.473499 26.762859 64.094704 27.300659 c
64.617897 27.748859 65.0233 28.253559 65.310997 28.814659 c
65.598801 29.375759 65.742599 29.96176 65.742599 30.57266 c
65.742599 31.757959 65.087097 32.350559 63.775902 32.350559 c
62.147701 32.350559 l
62.147701 34.53186 l
61.2453 34.53186 l
61.2453 31.50396 l
63.6828 31.50396 l
64.4478 31.50396 64.830399 31.14036 64.830399 30.41326 c
64.830399 29.97506 64.7127 29.54336 64.477303 29.11846 c
64.245102 28.69346 63.905102 28.301661 63.457199 27.943159 c
h
W
0 0 132 43 rc
60.2453 35.53186 m
66.742599 35.53186 l
66.742599 25.01576 l
60.2453 25.01576 l
h
f
Q
q
88.328102 29.17816 m
89.892601 27.02676 l
89.892601 26.23996 l
85.262802 26.23996 l
85.262802 27.086559 l
88.769501 27.086559 l
84.899902 32.350559 l
86.027901 32.350559 l
87.8965 29.770861 l
88.1483 29.88036 88.331398 30.04146 88.445801 30.25396 c
88.560204 30.469761 88.6371 30.798361 88.6763 31.23996 c
88.789101 32.350559 l
89.721001 32.350559 l
89.622902 31.259859 l
89.580399 30.80176 89.513298 30.44976 89.421799 30.20406 c
89.3302 29.96176 89.201103 29.76086 89.034302 29.601561 c
88.867599 29.44216 88.632202 29.30106 88.328102 29.17816 c
h
W
0 0 132 43 rc
83.899902 33.350559 m
90.892601 33.350559 l
90.892601 25.23996 l
83.899902 25.23996 l
h
f
Q
q
51.109901 11.97096 m
52.457199 12.41956 53.544998 12.98586 54.373299 13.66986 c
54.947601 14.13526 55.3866 14.64276 55.6903 15.19226 c
55.993999 15.74736 56.145802 16.32766 56.145802 16.93326 c
56.145802 17.931259 55.530102 18.430361 54.298698 18.430361 c
50.091099 18.430361 l
50.091099 24.03186 l
52.377102 24.03186 l
52.377102 20.465759 l
54.671501 20.465759 l
57.1563 20.465759 58.398701 19.36396 58.398701 17.16036 c
58.398701 16.106159 58.153 15.11936 57.661598 14.19976 c
57.175598 13.28586 56.4799 12.46996 55.574299 11.75226 c
54.381599 10.81026 52.893398 10.07016 51.109901 9.5318604 c
51.109901 11.97096 l
h
W
0 0 132 43 rc
49.091099 25.03186 m
59.398701 25.03186 l
59.398701 8.5318604 l
49.091099 8.5318604 l
h
f
Q
q
87.474602 13.66986 m
86.646301 12.98586 85.558502 12.41956 84.211197 11.97096 c
84.211197 9.5318604 l
85.994698 10.07016 87.482903 10.81026 88.675598 11.75226 c
89.5812 12.46996 90.276901 13.28586 90.762802 14.19976 c
91.254303 15.11936 91.5 16.106159 91.5 17.16036 c
91.5 19.36396 90.257599 20.465759 87.772697 20.465759 c
85.478401 20.465759 l
85.478401 24.03186 l
83.192398 24.03186 l
83.192398 18.430361 l
87.400002 18.430361 l
88.631401 18.430361 89.247101 17.931259 89.247101 16.93326 c
89.247101 16.32766 89.0952 15.74736 88.791496 15.19226 c
88.487801 14.64276 88.048798 14.13526 87.474602 13.66986 c
h
W
0 0 132 43 rc
82.192398 25.03186 m
92.5 25.03186 l
92.5 8.5318604 l
82.192398 8.5318604 l
h
f
Q
q
75.260803 13.07276 m
74.747299 10.02806 l
72.428101 10.02806 l
73.123802 13.51006 l
73.322601 14.47456 73.504799 15.16136 73.670502 15.57076 c
73.836197 15.98566 74.040497 16.31366 74.283401 16.55476 c
74.531898 16.80146 74.874298 17.020161 75.310501 17.21076 c
72.916801 20.465759 l
75.633499 20.465759 l
78.987999 15.74736 l
79.335899 16.066959 79.600998 16.442659 79.783203 16.874359 c
79.965401 17.30616 80.0952 17.889259 80.172501 18.62376 c
80.346397 20.465759 l
82.6325 20.465759 l
82.433701 18.472361 l
82.372902 17.906059 82.262497 17.404261 82.102402 16.96686 c
81.991898 16.669661 81.856598 16.38936 81.696503 16.12586 c
81.5364 15.86786 81.326599 15.59316 81.067001 15.30156 c
80.813004 15.01556 80.476196 14.68196 80.056503 14.30066 c
83.146004 10.02806 l
80.445801 10.02806 l
76.312698 15.84826 l
76.019997 15.67446 75.810204 15.42216 75.683197 15.09126 c
75.622498 14.92306 75.556198 14.67076 75.484398 14.33436 c
75.412697 13.99796 75.338097 13.57736 75.260803 13.07276 c
h
W
0 0 132 43 rc
71.428101 21.465759 m
84.146004 21.465759 l
84.146004 9.02806 l
71.428101 9.02806 l
h
f
Q
q
58.710201 11.87006 m
60.140301 11.89806 61.247398 12.04106 62.031502 12.29896 c
59.0994 20.465759 l
61.526299 20.465759 l
63.9697 13.31666 l
64.389397 13.65866 64.723396 14.12406 64.971901 14.71286 c
65.225899 15.30716 65.410896 16.072559 65.526901 17.008961 c
65.642799 17.95096 65.700798 19.103161 65.700798 20.465759 c
68.003403 20.465759 l
68.003403 17.779961 67.7108 15.68846 67.125504 14.19136 c
66.733398 13.18206 66.183998 12.35226 65.477203 11.70176 c
64.770401 11.05696 63.864799 10.56916 62.760399 10.23836 c
61.656101 9.9075603 60.306 9.7056599 58.710201 9.63276 c
58.710201 11.87006 l
h
W
0 0 132 43 rc
57.710201 21.465759 m
69.003403 21.465759 l
69.003403 8.63276 l
57.710201 8.63276 l
h
f
Q
q
20.285999 10.08866 m
16.2528 22.725861 l
13.5641 22.725861 l
9.5 10.08866 l
11.9879 10.08866 l
12.776 12.68646 l
16.971399 12.68646 l
17.7054 10.08866 l
20.285999 10.08866 l
h
14.8853 19.83666 m
16.3069 14.86406 l
13.4173 14.86406 l
14.8853 19.83666 l
h
W*
0 0 132 43 rc
8.5 23.725861 m
21.285999 23.725861 l
21.285999 9.0886602 l
8.5 9.0886602 l
h
f
Q
q
77.859299 31.120461 m
78.101303 30.864759 78.222198 30.43486 78.222198 29.830561 c
78.222198 26.23996 l
79.129601 26.23996 l
79.129601 29.82066 l
79.129601 30.42486 79.044502 30.911261 78.874496 31.27986 c
78.704498 31.651661 78.434799 31.92226 78.0653 32.09156 c
77.695801 32.264259 77.210297 32.350559 76.608704 32.350559 c
74.759697 32.350559 l
74.759697 31.50396 l
76.5989 31.50396 l
77.2005 31.50396 77.620598 31.37606 77.859299 31.120461 c
h
W
0 0 132 43 rc
73.759697 33.350559 m
80.129601 33.350559 l
80.129601 25.23996 l
73.759697 25.23996 l
h
f
Q
q
68.457298 27.300659 m
67.944 27.131359 67.234497 27.046659 66.328796 27.046659 c
66.328796 26.07556 l
67.218102 26.122061 67.968498 26.24486 68.579903 26.444059 c
69.194603 26.64666 69.696503 26.935459 70.085602 27.310659 c
70.474701 27.689159 70.7771 28.167259 70.992897 28.744961 c
71.313301 29.614759 71.473503 30.81666 71.473503 32.350559 c
70.527 32.350559 l
70.527 31.427561 70.482803 30.66226 70.3946 30.054661 c
70.309601 29.447161 70.172203 28.955759 69.982597 28.580561 c
69.796204 28.208759 69.5494 27.91156 69.241997 27.689159 c
67.6334 32.350559 l
66.637802 32.350559 l
68.457298 27.300659 l
h
W
0 0 132 43 rc
65.328796 33.350559 m
72.473503 33.350559 l
72.473503 25.07556 l
65.328796 25.07556 l
h
f
Q
q
40.4842 28.24696 m
40.0919 26.23996 l
39.1404 26.23996 l
39.552399 28.226959 l
39.670101 28.798059 39.778 29.19976 39.876099 29.432159 c
39.974201 29.667959 40.096802 29.85886 40.2439 30.00486 c
40.394299 30.150961 40.595402 30.275459 40.847198 30.37846 c
39.429798 32.350559 l
40.543098 32.350559 l
42.755001 29.25786 l
43.000198 29.490259 43.194698 29.770861 43.3386 30.09956 c
43.485699 30.431561 43.582199 30.811661 43.627998 31.23996 c
43.740799 32.350559 l
44.6726 32.350559 l
44.559799 31.259859 l
44.5238 30.894661 44.458401 30.574261 44.363602 30.298759 c
44.298199 30.109461 44.219799 29.92856 44.128201 29.755859 c
44.036701 29.586559 43.918999 29.410561 43.775101 29.227961 c
43.634499 29.045361 43.451401 28.84116 43.2258 28.615459 c
44.9963 26.23996 l
43.848701 26.23996 l
41.259102 29.810659 l
40.997601 29.68116 40.811199 29.45706 40.700001 29.138359 c
40.667301 29.055361 40.632999 28.939159 40.597 28.789761 c
40.564301 28.64036 40.526699 28.45936 40.4842 28.24696 c
h
W
0 0 132 43 rc
38.1404 33.350559 m
45.9963 33.350559 l
45.9963 25.23996 l
38.1404 25.23996 l
h
f
Q
q
32.053299 31.762859 m
32.442402 31.371161 32.636902 30.72366 32.636902 29.82066 c
32.636902 26.23996 l
27.482401 26.23996 l
27.482401 32.350559 l
30.1161 32.350559 l
31.018499 32.350559 31.6642 32.154659 32.053299 31.762859 c
h
31.366699 31.120461 m
31.128 31.37606 30.707899 31.50396 30.1063 31.50396 c
28.3848 31.50396 l
28.3848 27.086559 l
31.729601 27.086559 l
31.729601 29.830561 l
31.729601 30.43486 31.608601 30.864759 31.366699 31.120461 c
h
W*
0 0 132 43 rc
26.482401 33.350559 m
33.636902 33.350559 l
33.636902 25.23996 l
26.482401 25.23996 l
h
f
Q
q
42.808899 14.92306 2.2363 5.5426998 rc
41.808899 21.465759 m
46.0452 21.465759 l
46.0452 13.92306 l
41.808899 13.92306 l
h
f
Q
q
40.484699 10.02806 m
40.484699 18.430361 l
41.7603 18.430361 l
41.7603 20.465759 l
32.6824 20.465759 l
32.6824 18.430361 l
38.248402 18.430361 l
38.248402 10.02806 l
40.484699 10.02806 l
h
W
0 0 132 43 rc
31.6824 21.465759 m
42.7603 21.465759 l
42.7603 9.02806 l
31.6824 9.02806 l
h
f
Q
q
29.513399 14.92306 2.2363 5.5426998 rc
28.513399 21.465759 m
32.749699 21.465759 l
32.749699 13.92306 l
28.513399 13.92306 l
h
f
Q
q
21.9792 12.23536 m
21.9792 20.57626 l
20.576401 20.57626 l
20.576401 22.725861 l
25.582899 22.725861 l
25.582899 20.57626 l
24.3435 20.57626 l
24.3435 12.23536 l
25.582899 12.23536 l
25.582899 10.08576 l
20.576401 10.08576 l
20.576401 12.23536 l
21.9792 12.23536 l
h
W
0 0 132 43 rc
19.576401 23.725861 m
26.582899 23.725861 l
26.582899 9.0857601 l
19.576401 9.0857601 l
h
f
Q
q
83.195503 26.23996 0.90240002 6.1106 rc
82.195503 33.350559 m
85.0979 33.350559 l
85.0979 25.23996 l
82.195503 25.23996 l
h
f
Q
q
80.686798 29.138359 0.90240002 3.2121999 rc
79.686798 33.350559 m
82.589203 33.350559 l
82.589203 28.138359 l
79.686798 28.138359 l
h
f
Q
q
56.551498 29.138359 0.90240002 3.2121999 rc
55.551498 33.350559 m
58.453899 33.350559 l
58.453899 28.138359 l
55.551498 28.138359 l
h
f
Q
q
54.7687 31.50396 m
54.7687 26.23996 l
53.861301 26.23996 l
53.861301 31.50396 l
50.4282 31.50396 l
50.4282 32.350559 l
55.519001 32.350559 l
55.519001 31.50396 l
54.7687 31.50396 l
h
W
0 0 132 43 rc
49.4282 33.350559 m
56.519001 33.350559 l
56.519001 25.23996 l
49.4282 25.23996 l
h
f
Q
q
48.5718 29.138359 0.90240002 3.2121999 rc
47.5718 33.350559 m
50.474201 33.350559 l
50.474201 28.138359 l
47.5718 28.138359 l
h
f
Q
q
37.583199 31.50396 m
37.583199 26.23996 l
36.6758 26.23996 l
36.6758 31.50396 l
33.242699 31.50396 l
33.242699 32.350559 l
38.3335 32.350559 l
38.3335 31.50396 l
37.583199 31.50396 l
h
W
0 0 132 43 rc
32.242699 33.350559 m
39.3335 33.350559 l
39.3335 25.23996 l
32.242699 25.23996 l
h
f
Q
q
119.654 21.344061 m
119.654 16.09866 115.401 11.84646 110.156 11.84646 c
104.911 11.84646 100.658 16.09866 100.658 21.344061 c
100.658 26.58946 104.911 30.84166 110.156 30.84166 c
115.401 30.84166 119.654 26.58946 119.654 21.344061 c
h
121.812 21.344061 m
121.812 14.90656 116.593 9.6879597 110.156 9.6879597 c
103.719 9.6879597 98.5 14.90656 98.5 21.344061 c
98.5 27.781561 103.719 33.000118 110.156 33.000118 c
116.593 33.000118 121.812 27.781561 121.812 21.344061 c
h
104.541 18.650459 m
108.055 15.80566 113.079 15.80566 116.592 18.650459 c
115.234 20.32786 l
112.512 18.124359 108.621 18.124359 105.9 20.32786 c
104.541 18.650459 l
h
106.004 22.344061 m
106.004 25.25996 l
108.163 25.25996 l
108.163 22.344061 l
106.004 22.344061 l
h
112.702 25.25996 m
112.702 22.344061 l
114.861 22.344061 l
114.861 25.25996 l
112.702 25.25996 l
h
W*
0 0 132 43 rc
97.5 34.000118 m
122.812 34.000118 l
122.812 8.6879597 l
97.5 8.6879597 l
h
f
ep
end
%%Trailer
%%EOF
