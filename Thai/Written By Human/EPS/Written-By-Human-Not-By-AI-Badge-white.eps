%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 12.6 (Build 21G115) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
q
109.087 10.8831 m
104.394 23.792801 l
101.17 23.792801 l
96.441002 10.8831 l
99.507698 10.8831 l
100.4108 13.4965 l
105.072 13.4965 l
105.913 10.8831 l
109.087 10.8831 l
h
102.754 20.467501 m
104.247 15.8838 l
101.212 15.8838 l
102.754 20.467501 l
h
W*
0 0 132 43 rc
95.441002 24.792801 m
110.087 24.792801 l
110.087 9.8830996 l
95.441002 9.8830996 l
h
f
Q
q
48.5266 11.4934 m
48.341301 11.8205 48.251598 12.2214 48.251598 12.6912 c
48.251598 20.295799 l
48.251598 20.705 48.2901 21.040501 48.370602 21.298401 c
48.449699 21.562599 48.558701 21.7826 48.7001 21.954901 c
48.7934 22.068501 48.889999 22.1698 48.989899 22.2584 c
46.5 22.2584 l
47.0116 24.1805 l
52.405998 24.1805 l
52.405998 22.2584 l
52.305099 22.2584 l
51.924599 22.2584 51.598801 22.139 51.322498 21.899799 c
51.0606 21.6731 50.913601 21.241301 50.913601 20.5674 c
50.913601 12.9788 l
50.913601 12.7892 50.954601 12.6692 51.0173 12.5989 c
51.090302 12.5292 51.207199 12.486 51.3866 12.486 c
51.465698 12.486 51.5513 12.4956 51.6436 12.5156 c
51.737701 12.536 51.826099 12.5613 51.908798 12.5915 c
52.0261 12.6344 l
52.2841 10.9112 l
52.220901 10.8788 l
52.0037 10.7674 51.759602 10.6847 51.489201 10.6299 c
51.219398 10.5751 50.933701 10.5479 50.632198 10.5479 c
50.130299 10.5479 49.699699 10.6239 49.3442 10.7803 c
48.987 10.9375 48.713402 11.1749 48.527302 11.4921 c
48.5266 11.4934 l
h
W
0 0 132 43 rc
45.5 25.1805 m
53.405998 25.1805 l
53.405998 9.5479002 l
45.5 9.5479002 l
h
f
Q
q
56.821999 10.9943 m
56.822899 10.9938 l
57.324699 10.6938 57.973499 10.5479 58.7617 10.5479 c
59.430401 10.5479 60.000599 10.6728 60.467602 10.9279 c
60.4692 10.9288 l
60.936199 11.1951 61.2836 11.5783 61.510502 12.0753 c
61.7477 12.5708 61.863998 13.1714 61.863998 13.8734 c
61.863998 19.659201 l
59.202 19.659201 l
59.202 14.4006 l
59.202 13.8242 59.083 13.4273 58.866402 13.1875 c
58.649799 12.9477 58.330799 12.8215 57.892502 12.8215 c
57.528 12.8215 57.221298 12.9124 56.9674 13.0905 c
56.714298 13.268 56.5172 13.5373 56.380299 13.9064 c
56.243301 14.2863 56.172901 14.7748 56.172901 15.3752 c
56.172901 19.659201 l
53.511002 19.659201 l
53.511002 10.7077 l
55.565498 10.7077 l
55.822701 12.0545 l
56.032299 11.626 56.366798 11.2727 56.821999 10.9943 c
h
W
0 0 132 43 rc
52.511002 20.659201 m
62.863998 20.659201 l
62.863998 9.5479002 l
52.511002 9.5479002 l
h
f
Q
q
64.815201 11.4934 m
64.629898 11.8205 64.540199 12.2214 64.540199 12.6912 c
64.540199 20.295799 l
64.540199 20.705 64.578697 21.0404 64.659203 21.2983 c
64.738297 21.562599 64.847298 21.7826 64.988701 21.954901 c
65.082001 22.068501 65.178596 22.1698 65.278603 22.2584 c
62.788601 22.2584 l
63.300201 24.1805 l
68.694603 24.1805 l
68.694603 22.2584 l
68.593697 22.2584 l
68.213203 22.2584 67.887398 22.139 67.611099 21.899799 c
67.349197 21.6731 67.202202 21.241301 67.202202 20.5674 c
67.202202 12.9788 l
67.202202 12.7892 67.243202 12.6692 67.305901 12.5989 c
67.378899 12.5292 67.495796 12.486 67.675301 12.486 c
67.754402 12.486 67.839897 12.4956 67.932198 12.5156 c
68.026299 12.536 68.1147 12.5613 68.197403 12.5915 c
68.314697 12.6344 l
68.572701 10.9112 l
68.509499 10.8788 l
68.292397 10.7674 68.048203 10.6847 67.777901 10.6299 c
67.508003 10.5751 67.222298 10.5479 66.920799 10.5479 c
66.4189 10.5479 65.988297 10.6239 65.632797 10.7803 c
65.275597 10.9375 65.001999 11.1749 64.815903 11.4921 c
64.815201 11.4934 l
h
W
0 0 132 43 rc
61.788601 25.1805 m
69.694603 25.1805 l
69.694603 9.5479002 l
61.788601 9.5479002 l
h
f
Q
q
70.6474 11.1267 m
70.648499 11.126 l
71.1959 10.7372 71.924301 10.5479 72.8237 10.5479 c
73.047302 10.5479 73.281403 10.5643 73.525803 10.5967 c
73.783798 10.6295 74.006699 10.6846 74.192596 10.7639 c
74.261597 10.7933 l
74.008598 12.7656 l
73.898102 12.7386 l
73.814301 12.7182 73.713997 12.6976 73.596901 12.6768 c
73.492401 12.6668 73.382301 12.6617 73.266502 12.6617 c
72.904602 12.6617 72.625603 12.7617 72.418602 12.9533 c
72.216698 13.1503 72.065498 13.4305 71.970398 13.8014 c
71.874397 14.1753 71.825798 14.609 71.825798 15.1036 c
71.825798 15.8334 71.902 16.3836 72.048401 16.7612 c
72.206703 17.1409 72.417702 17.3904 72.674698 17.525299 c
72.675903 17.5259 l
72.954201 17.6765 73.275902 17.753201 73.6437 17.753201 c
74.199402 17.753201 74.568703 17.622601 74.781502 17.3871 c
74.7845 17.384001 l
75.011703 17.153099 75.133698 16.803499 75.133698 16.317801 c
75.133698 10.7077 l
77.795601 10.7077 l
77.795601 16.509501 l
77.795601 17.182899 77.656197 17.7745 77.373802 18.281099 c
77.099602 18.7927 76.655098 19.184601 76.047798 19.458401 c
75.439102 19.733 74.635597 19.866899 73.6437 19.866899 c
72.990898 19.866899 72.386002 19.7915 71.829498 19.639799 c
71.279099 19.497499 70.800201 19.245199 70.394302 18.882999 c
69.985001 18.5284 69.670799 18.0334 69.448097 17.4042 c
69.4478 17.403299 l
69.235397 16.782801 69.130997 16.004499 69.130997 15.0716 c
69.130997 14.2006 69.247002 13.4225 69.480698 12.7395 c
69.716301 12.0622 70.104797 11.5232 70.6474 11.1267 c
h
W
0 0 132 43 rc
68.130997 20.866899 m
78.795601 20.866899 l
78.795601 9.5479002 l
68.130997 9.5479002 l
h
f
Q
q
72.370697 21.6525 m
72.297501 21.632099 l
72.297501 20.660801 l
77.862396 20.660801 l
77.862396 22.407101 l
75.442902 22.407101 l
75.546898 22.6054 75.599098 22.818001 75.599098 23.043699 c
75.599098 23.5014 75.454903 23.8626 75.153099 24.109501 c
75.151604 24.110701 l
74.844002 24.352699 74.430801 24.468 73.923698 24.468 c
73.696198 24.468 73.4216 24.434999 73.101501 24.370501 c
72.759201 24.314699 72.468903 24.1912 72.234596 23.997299 c
72.185204 23.9564 l
72.545799 22.7176 l
72.651398 22.7616 l
72.7248 22.792299 72.809601 22.823299 72.905998 22.854601 c
72.995903 22.883801 73.078003 22.897499 73.152901 22.897499 c
73.259102 22.897499 73.342201 22.864 73.4095 22.7985 c
73.473801 22.735901 73.511101 22.646099 73.511101 22.5165 c
73.511101 22.3517 73.451401 22.2183 73.330399 22.109501 c
73.197403 21.989901 73.043701 21.894899 72.868401 21.8246 c
72.685204 21.751101 72.519302 21.6938 72.370697 21.6525 c
h
W
0 0 132 43 rc
71.185204 25.468 m
78.862396 25.468 l
78.862396 19.660801 l
71.185204 19.660801 l
h
f
Q
q
80.407402 11.4934 m
80.408096 11.4921 l
80.5942 11.1749 80.867798 10.9375 81.225098 10.7803 c
81.580597 10.6239 82.011101 10.5479 82.5131 10.5479 c
82.814499 10.5479 83.100197 10.5751 83.370102 10.6299 c
83.640404 10.6847 83.884598 10.7674 84.1017 10.8788 c
84.164902 10.9112 l
83.906898 12.6344 l
83.789703 12.5915 l
83.708099 12.5618 83.615097 12.5365 83.510101 12.516 c
83.508003 12.5156 l
83.415703 12.4956 83.3302 12.486 83.251099 12.486 c
83.084297 12.486 82.972 12.5282 82.898201 12.5989 c
82.835403 12.6691 82.794403 12.7892 82.794403 12.9788 c
82.794403 18.538401 l
82.794403 18.797899 82.820999 18.998301 82.8703 19.1437 c
82.9319 19.2929 83.019302 19.4382 83.1334 19.5798 c
83.2658 19.740999 83.419701 19.9391 83.595001 20.173901 c
83.7845 20.4238 83.962097 20.710501 84.127998 21.0336 c
84.3116 21.3694 84.401703 21.7582 84.401703 22.197001 c
84.401703 22.9256 84.139198 23.4853 83.605103 23.8585 c
83.079399 24.225901 82.373001 24.4041 81.496201 24.4041 c
80.921501 24.4041 80.425003 24.344999 80.008698 24.2246 c
79.615196 24.118099 79.331299 24.019699 79.166397 23.9279 c
79.115601 23.899599 l
79.115601 21.888399 l
79.271301 21.986601 l
79.449402 22.0989 79.649399 22.191299 79.871696 22.2635 c
80.088997 22.334 80.340302 22.3703 80.626999 22.3703 c
80.999901 22.3703 81.248901 22.296801 81.396797 22.170799 c
81.4021 22.1668 l
81.560898 22.0485 81.641296 21.886801 81.641296 21.6698 c
81.641296 21.4564 81.577103 21.2698 81.448799 21.1064 c
81.308403 20.9275 81.129204 20.7159 80.9114 20.471901 c
80.7024 20.236099 80.540497 20.0299 80.427399 19.853901 c
80.311996 19.684999 80.230598 19.504299 80.184097 19.311899 c
80.183197 19.3064 l
80.149002 19.117599 80.132401 18.882401 80.132401 18.6024 c
80.132401 12.6912 l
80.132401 12.2214 80.222099 11.8205 80.407402 11.4934 c
h
W
0 0 132 43 rc
78.115601 25.4041 m
85.401703 25.4041 l
85.401703 9.5479002 l
78.115601 9.5479002 l
h
f
Q
q
85.933899 11.3233 m
85.935303 11.3221 l
86.605499 10.7688 87.578499 10.5 88.837799 10.5 c
90.086403 10.5 91.0495 10.7695 91.709 11.3233 c
92.370796 11.8901 92.694504 12.7194 92.694504 13.7935 c
92.694504 15.4231 l
92.694504 15.6855 92.666496 15.9279 92.609497 16.1499 c
92.551201 16.3771 92.445503 16.572901 92.291496 16.7349 c
92.167999 16.873301 92.005997 16.980101 91.809196 17.057501 c
92.187202 17.228901 92.459099 17.514799 92.621696 17.910801 c
92.803001 18.3522 92.891296 18.9035 92.891296 19.5609 c
92.891296 19.659201 l
90.245796 19.659201 l
90.245796 19.5609 l
90.245796 19.2577 90.218903 18.9655 90.165398 18.6842 c
90.164902 18.6812 l
90.123703 18.4198 90.026703 18.209101 89.877403 18.0443 c
89.738899 17.891399 89.519798 17.806 89.1987 17.806 c
88.999298 17.806 l
88.999298 16.3473 l
89.182297 16.3473 l
89.5149 16.3473 89.722504 16.2565 89.838303 16.1003 c
89.8424 16.095501 l
89.975998 15.9375 90.049004 15.7121 90.049004 15.4071 c
90.049004 13.8574 l
90.049004 13.4467 89.948601 13.1291 89.758797 12.8956 c
89.588898 12.684 89.292099 12.5658 88.837799 12.5658 c
88.566002 12.5658 88.335999 12.6115 88.144897 12.6993 c
87.959503 12.7948 87.816597 12.9425 87.716202 13.1471 c
87.625504 13.3541 87.577499 13.6267 87.577499 13.9693 c
87.577499 14.5764 l
87.577499 14.9747 87.626198 15.2666 87.715401 15.4608 c
87.823601 15.6716 87.948402 15.8988 88.0895 16.141899 c
88.244499 16.411501 88.372299 16.6712 88.472603 16.921 c
88.473099 16.9223 l
88.576599 17.191 88.627197 17.495899 88.627197 17.835501 c
88.627197 18.229601 88.5597 18.574499 88.421097 18.867201 c
88.279999 19.165001 88.0504 19.393499 87.7369 19.552 c
87.432602 19.711399 87.031601 19.787001 86.541702 19.787001 c
86.261002 19.787001 85.938103 19.754299 85.5737 19.6898 c
85.213303 19.6348 84.874802 19.5249 84.5588 19.360001 c
84.489098 19.323601 l
84.932297 17.632799 l
85.042397 17.682301 l
85.181099 17.744699 85.301903 17.7906 85.405098 17.8209 c
85.517403 17.850599 85.622902 17.865 85.721703 17.865 c
85.854698 17.865 85.946297 17.827999 86.010597 17.7654 c
86.020599 17.7579 l
86.082901 17.7106 86.129204 17.6152 86.129204 17.4361 c
86.129204 17.253799 86.075302 17.074301 85.9636 16.896299 c
85.9627 16.8948 l
85.855499 16.7173 85.715302 16.5124 85.541702 16.279699 c
85.361 16.037701 85.2145 15.7688 85.102203 15.4732 c
85.101097 15.4702 l
84.9981 15.1692 84.948303 14.7957 84.948303 14.3527 c
84.948303 13.7296 l
84.948303 12.6966 85.273003 11.8893 85.933899 11.3233 c
h
W*
0 0 132 43 rc
83.489098 20.787001 m
93.891296 20.787001 l
93.891296 9.5 l
83.489098 9.5 l
h
f
Q
q
87.8265 21.6525 m
87.753197 21.632099 l
87.753197 20.660801 l
93.318199 20.660801 l
93.318199 22.407101 l
90.898697 22.407101 l
91.002701 22.6054 91.054901 22.818001 91.054901 23.043699 c
91.054901 23.5014 90.910698 23.8626 90.608803 24.109501 c
90.6073 24.110701 l
90.299698 24.352699 89.886597 24.468 89.379501 24.468 c
89.151901 24.468 88.877403 24.434999 88.557297 24.370501 c
88.214996 24.314699 87.924599 24.1912 87.690399 23.997299 c
87.640999 23.9564 l
88.001602 22.7176 l
88.107101 22.7616 l
88.180603 22.792299 88.265404 22.823299 88.361702 22.854601 c
88.451698 22.883801 88.533798 22.897499 88.608597 22.897499 c
88.714897 22.897499 88.797997 22.864 88.865303 22.7985 c
88.929497 22.735901 88.966904 22.646099 88.966904 22.5165 c
88.966904 22.3517 88.907204 22.2183 88.786201 22.109501 c
88.653198 21.989901 88.499397 21.894899 88.324203 21.8246 c
88.1409 21.751101 87.975098 21.6938 87.8265 21.6525 c
h
W
0 0 132 43 rc
86.640999 25.468 m
94.318199 25.468 l
94.318199 19.660801 l
86.640999 19.660801 l
h
f
Q
q
111.168 21.433701 m
111.168 13.2393 l
109.561 13.2393 l
109.561 10.8802 l
115.5 10.8802 l
115.5 13.2393 l
114.08 13.2393 l
114.08 21.433701 l
115.5 21.433701 l
115.5 23.792801 l
109.561 23.792801 l
109.561 21.433701 l
111.168 21.433701 l
h
W
0 0 132 43 rc
108.561 24.792801 m
116.5 24.792801 l
116.5 9.8802004 l
108.561 9.8802004 l
h
f
Q
q
59.384998 20.6768 2.4651999 3.8232 rc
58.384998 25.5 m
62.850201 25.5 l
62.850201 19.6768 l
58.384998 19.6768 l
h
f
Q
q
49.591702 27.040001 m
49.4114 27.040001 49.237801 27.0704 49.0709 27.1311 c
48.903999 27.191799 48.767101 27.299801 48.660301 27.454901 c
48.553398 27.6101 48.5 27.826 48.5 28.1026 c
48.5 32.686749 l
49.391399 32.686749 l
49.391399 28.2139 l
49.391399 28.058701 49.424801 27.947399 49.4916 27.8799 c
49.5583 27.8125 49.665199 27.7787 49.812099 27.7787 c
49.8722 27.7787 49.9356 27.7855 50.002399 27.799 c
50.069099 27.8125 50.132599 27.8293 50.192699 27.8496 c
50.312901 27.191799 l
50.186001 27.1311 50.0625 27.090599 49.942299 27.0704 c
49.822102 27.0501 49.7052 27.040001 49.591702 27.040001 c
h
W
0 0 132 43 rc
47.5 33.686749 m
51.312901 33.686749 l
51.312901 26.040001 l
47.5 26.040001 l
h
f
Q
q
53.119301 27.040001 m
52.491699 27.040001 52.0042 27.191799 51.657001 27.495399 c
51.316502 27.8057 51.146198 28.2679 51.146198 28.8818 c
51.146198 29.4991 l
51.146198 29.836399 51.193001 30.1029 51.2864 30.2985 c
51.379902 30.4942 51.480099 30.6628 51.586899 30.804501 c
51.700401 30.9597 51.797199 31.094601 51.877399 31.209299 c
51.964199 31.323999 52.007599 31.462299 52.007599 31.624201 c
52.007599 31.7659 51.970901 31.8671 51.8974 31.927799 c
51.830601 31.988501 51.743801 32.018902 51.637001 32.018902 c
51.5569 32.018902 51.4701 32.005402 51.376598 31.978399 c
51.289799 31.951401 51.202999 31.9177 51.116199 31.877199 c
50.915901 32.524841 l
51.035999 32.605801 51.182899 32.663139 51.356499 32.696869 c
51.5368 32.730598 51.693699 32.747471 51.827301 32.747471 c
52.074299 32.747471 52.271301 32.703621 52.418201 32.615921 c
52.5718 32.52821 52.681999 32.406799 52.748699 32.251598 c
52.815498 32.103199 52.8489 31.927799 52.8489 31.725401 c
52.8489 31.4758 52.8055 31.27 52.7187 31.108101 c
52.638599 30.946199 52.541801 30.7876 52.4282 30.6325 c
52.314701 30.4638 52.221199 30.301901 52.1478 30.1467 c
52.074299 29.9916 52.037601 29.7892 52.037601 29.5396 c
52.037601 28.942499 l
52.037601 28.6322 52.0877 28.3927 52.187901 28.224001 c
52.287998 28.055401 52.4216 27.9373 52.588501 27.869801 c
52.755402 27.809099 52.9324 27.7787 53.119301 27.7787 c
53.453201 27.7787 53.706902 27.8563 53.880501 28.011499 c
54.060799 28.173401 54.151001 28.419701 54.151001 28.7502 c
54.151001 32.686749 l
55.0424 32.686749 l
55.0424 28.6996 l
55.0424 28.180201 54.878799 27.771999 54.551601 27.475201 c
54.231098 27.185101 53.7537 27.040001 53.119301 27.040001 c
h
W
0 0 132 43 rc
49.915901 33.747471 m
56.0424 33.747471 l
56.0424 26.040001 l
49.915901 26.040001 l
h
f
Q
q
50.772701 33.567162 m
50.772701 33.961819 l
51.503899 34.285648 l
55.029499 34.285648 l
55.029499 33.567162 l
50.772701 33.567162 l
h
54.198101 33.961819 m
54.198101 35.105339 l
55.039501 35.105339 l
55.039501 33.961819 l
54.198101 33.961819 l
h
W
0 0 132 43 rc
49.772701 36.105339 m
56.039501 36.105339 l
56.039501 32.567162 l
49.772701 32.567162 l
h
f
Q
q
58.777 27.0501 m
58.236198 27.0501 57.8022 27.121 57.474998 27.262699 c
57.154499 27.404301 56.920799 27.6033 56.773899 27.859699 c
56.633598 28.1161 56.563499 28.419701 56.563499 28.7705 c
56.563499 29.080799 56.606899 29.327 56.693699 29.509199 c
56.787201 29.698099 56.9007 29.836399 57.034302 29.924101 c
57.1745 30.011801 57.3181 30.069201 57.465 30.0961 c
57.465 30.1366 l
57.331402 30.177099 57.1912 30.2446 57.0443 30.339001 c
56.8974 30.4335 56.773899 30.565001 56.673698 30.7337 c
56.5802 30.9023 56.533501 31.114799 56.533501 31.371201 c
56.533501 31.6073 56.586899 31.83 56.693699 32.039101 c
56.800598 32.248199 56.974201 32.4203 57.2146 32.555199 c
57.454899 32.690128 57.772099 32.757591 58.1661 32.757591 c
58.326302 32.757591 58.493198 32.744099 58.666901 32.71711 c
58.8405 32.696869 58.973999 32.659771 59.067501 32.605801 c
58.9072 31.907499 l
58.833801 31.9345 58.737 31.958099 58.616798 31.978399 c
58.5033 32.005402 58.383099 32.018902 58.256199 32.018902 c
57.9758 32.018902 57.768799 31.951401 57.635201 31.8165 c
57.501701 31.688299 57.434898 31.5163 57.434898 31.3004 c
57.434898 31.064199 57.491699 30.8855 57.605202 30.764 c
57.725399 30.642599 57.875599 30.5583 58.055901 30.511 c
58.242901 30.4706 58.436501 30.4503 58.636799 30.4503 c
58.827099 30.4503 l
58.827099 29.7925 l
58.636799 29.7925 l
58.236198 29.7925 57.938999 29.7183 57.745399 29.569901 c
57.558399 29.4282 57.465 29.1887 57.465 28.8514 c
57.465 28.6558 57.501701 28.476999 57.5751 28.3151 c
57.6553 28.1532 57.788799 28.025 57.9758 27.9305 c
58.169399 27.8361 58.436501 27.7889 58.777 27.7889 c
59.117599 27.7889 59.381302 27.8361 59.568298 27.9305 c
59.761902 28.025 59.8988 28.159901 59.978901 28.3353 c
60.059101 28.5175 60.099098 28.7334 60.099098 28.983 c
60.099098 32.686749 l
60.990501 32.686749 l
60.990501 29.043699 l
60.990501 28.3353 60.8102 27.826 60.449699 27.5156 c
60.095798 27.205299 59.5382 27.0501 58.777 27.0501 c
h
W
0 0 132 43 rc
55.533501 33.757591 m
61.990501 33.757591 l
61.990501 26.0501 l
55.533501 26.0501 l
h
f
Q
q
64.503601 27.040001 m
64.109596 27.040001 63.7691 27.1075 63.481998 27.242399 c
63.2015 27.3841 62.984501 27.5966 62.830898 27.8799 c
62.683998 28.1633 62.6106 28.531 62.6106 28.983 c
62.6106 32.686749 l
63.501999 32.686749 l
63.501999 29.0336 l
63.501999 28.628799 63.6022 28.3218 63.802502 28.1127 c
64.009499 27.903601 64.306602 27.799 64.693901 27.799 c
65.161301 27.799 65.521896 27.9508 65.775597 28.2544 c
66.036003 28.558001 66.166199 28.966101 66.166199 29.4788 c
66.166199 32.686749 l
67.057602 32.686749 l
67.057602 27.141199 l
66.316498 27.141199 l
66.276398 27.960899 l
66.226303 27.960899 l
66.106102 27.691 65.895798 27.468399 65.595299 27.292999 c
65.301498 27.1243 64.937599 27.040001 64.503601 27.040001 c
h
W
0 0 132 43 rc
61.6106 33.686749 m
68.057602 33.686749 l
68.057602 26.040001 l
61.6106 26.040001 l
h
f
Q
q
69.043602 31.674801 m
69.043602 33.65823 l
69.043602 34.063019 68.9468 34.353111 68.753098 34.528519 c
68.5662 34.70393 68.325798 34.79163 68.031998 34.79163 c
68.031998 35.17617 l
68.773102 35.5 l
71.447403 35.5 l
71.447403 34.79163 l
69.4142 34.79163 l
69.404099 34.751148 l
69.551003 34.649948 69.674599 34.494789 69.774696 34.285648 c
69.881599 34.08326 69.934998 33.816769 69.934998 33.486198 c
69.934998 31.674801 l
69.043602 31.674801 l
h
70.1353 27.040001 m
69.955002 27.040001 69.781403 27.0704 69.614502 27.1311 c
69.447502 27.191799 69.310699 27.299801 69.203796 27.454901 c
69.097 27.6101 69.043602 27.826 69.043602 28.1026 c
69.043602 32.686749 l
69.934998 32.686749 l
69.934998 28.2139 l
69.934998 28.058701 69.968399 27.947399 70.035103 27.8799 c
70.101898 27.8125 70.208801 27.7787 70.355698 27.7787 c
70.415703 27.7787 70.479202 27.7855 70.545998 27.799 c
70.612701 27.8125 70.676201 27.8293 70.736298 27.8496 c
70.8564 27.191799 l
70.729599 27.1311 70.606003 27.090599 70.485901 27.0704 c
70.3657 27.0501 70.248802 27.040001 70.1353 27.040001 c
h
W
0 0 132 43 rc
67.031998 36.5 m
72.447403 36.5 l
72.447403 26.040001 l
67.031998 26.040001 l
h
f
Q
q
73.609299 27.040001 m
73.075104 27.040001 72.654503 27.164801 72.347298 27.4144 c
72.046799 27.670799 71.833199 28.0149 71.706299 28.4466 c
71.586098 28.878401 71.526001 29.354 71.526001 29.873501 c
71.526001 30.446899 71.582802 30.919201 71.696297 31.290199 c
71.816498 31.667999 71.983398 31.964899 72.197098 32.180801 c
72.417397 32.4034 72.677803 32.558571 72.978302 32.646271 c
73.2855 32.740719 73.622704 32.787949 73.989899 32.787949 c
74.524101 32.787949 74.958099 32.706989 75.292 32.545078 c
75.6325 32.3899 75.882896 32.167301 76.043198 31.877199 c
76.2034 31.587099 76.283501 31.2397 76.283501 30.8349 c
76.283501 27.141199 l
75.4021 27.141199 l
75.4021 30.753901 l
75.4021 31.172199 75.298599 31.4893 75.091698 31.7052 c
74.884697 31.927799 74.527397 32.039101 74.019997 32.039101 c
73.712799 32.039101 73.435699 31.9818 73.188599 31.8671 c
72.948303 31.752399 72.758003 31.5399 72.617699 31.2295 c
72.4842 30.919201 72.417397 30.4638 72.417397 29.8634 c
72.417397 29.472099 72.454102 29.117901 72.527603 28.8008 c
72.607697 28.490499 72.744598 28.244301 72.938202 28.062099 c
73.131897 27.8799 73.402298 27.7889 73.749496 27.7889 c
73.849701 27.7889 73.943199 27.795601 74.029999 27.809099 c
74.116798 27.822599 74.200203 27.8428 74.280403 27.869801 c
74.370499 27.1716 l
74.263702 27.1243 74.140099 27.090599 73.999901 27.0704 c
73.866402 27.0501 73.736198 27.040001 73.609299 27.040001 c
h
W
0 0 132 43 rc
70.526001 33.787949 m
77.283501 33.787949 l
77.283501 26.040001 l
70.526001 26.040001 l
h
f
Q
q
80.021599 27.0501 m
79.480698 27.0501 79.0467 27.121 78.719498 27.262699 c
78.399002 27.404301 78.165298 27.6033 78.018402 27.859699 c
77.878197 28.1161 77.808098 28.419701 77.808098 28.7705 c
77.808098 29.080799 77.851501 29.327 77.938301 29.509199 c
78.0317 29.698099 78.145302 29.836399 78.278801 29.924101 c
78.418999 30.011801 78.562599 30.069201 78.709503 30.0961 c
78.709503 30.1366 l
78.575897 30.177099 78.435699 30.2446 78.288803 30.339001 c
78.141899 30.4335 78.018402 30.565001 77.918198 30.7337 c
77.824799 30.9023 77.778 31.114799 77.778 31.371201 c
77.778 31.6073 77.831398 31.83 77.938301 32.039101 c
78.045097 32.248199 78.218697 32.4203 78.459099 32.555199 c
78.699501 32.690128 79.016602 32.757591 79.410599 32.757591 c
79.570801 32.757591 79.737801 32.744099 79.9114 32.71711 c
80.084999 32.696869 80.218498 32.659771 80.311996 32.605801 c
80.151802 31.907499 l
80.0783 31.9345 79.981499 31.958099 79.861298 31.978399 c
79.747803 32.005402 79.627602 32.018902 79.500702 32.018902 c
79.220299 32.018902 79.013298 31.951401 78.879799 31.8165 c
78.746201 31.688299 78.679398 31.5163 78.679398 31.3004 c
78.679398 31.064199 78.736198 30.8855 78.849701 30.764 c
78.969902 30.642599 79.120102 30.5583 79.3004 30.511 c
79.487396 30.4706 79.681 30.4503 79.881302 30.4503 c
80.071602 30.4503 l
80.071602 29.7925 l
79.881302 29.7925 l
79.480698 29.7925 79.183601 29.7183 78.989899 29.569901 c
78.803001 29.4282 78.709503 29.1887 78.709503 28.8514 c
78.709503 28.6558 78.746201 28.476999 78.819702 28.3151 c
78.899803 28.1532 79.033302 28.025 79.220299 27.9305 c
79.413902 27.8361 79.681 27.7889 80.021599 27.7889 c
80.362099 27.7889 80.625801 27.8361 80.812798 27.9305 c
81.0065 28.025 81.143303 28.159901 81.223503 28.3353 c
81.303596 28.5175 81.343597 28.7334 81.343597 28.983 c
81.343597 32.686749 l
82.2351 32.686749 l
82.2351 29.043699 l
82.2351 28.3353 82.054802 27.826 81.694199 27.5156 c
81.340302 27.205299 80.782799 27.0501 80.021599 27.0501 c
h
W
0 0 132 43 rc
76.778 33.757591 m
83.2351 33.757591 l
83.2351 26.0501 l
76.778 26.0501 l
h
f
Q
q
86.499298 27.040001 m
86.071999 27.040001 85.701401 27.1243 85.387497 27.292999 c
85.080399 27.468399 84.870102 27.7113 84.7565 28.021601 c
84.716499 28.021601 l
84.666397 27.141199 l
83.935204 27.141199 l
83.935204 32.686749 l
84.826698 32.686749 l
84.826698 29.4788 l
84.826698 29.1415 84.8834 28.8447 84.996902 28.588301 c
85.117104 28.338699 85.287399 28.143101 85.507698 28.0014 c
85.734802 27.866501 86.005203 27.799 86.319 27.799 c
86.712997 27.799 87.006798 27.903601 87.200401 28.1127 c
87.393997 28.3218 87.490898 28.628799 87.490898 29.0336 c
87.490898 32.686749 l
88.382301 32.686749 l
88.382301 28.9729 l
88.382301 28.527599 88.305496 28.1633 88.151901 27.8799 c
88.004997 27.5966 87.791298 27.3841 87.510902 27.242399 c
87.230499 27.1075 86.893303 27.040001 86.499298 27.040001 c
h
W
0 0 132 43 rc
82.935204 33.686749 m
89.382301 33.686749 l
89.382301 26.040001 l
82.935204 26.040001 l
h
f
Q
q
91.900398 27.040001 m
91.5065 27.040001 91.165901 27.1075 90.878799 27.242399 c
90.598396 27.3841 90.381401 27.5966 90.227798 27.8799 c
90.080902 28.1633 90.007401 28.531 90.007401 28.983 c
90.007401 32.686749 l
90.898804 32.686749 l
90.898804 29.0336 l
90.898804 28.628799 90.999001 28.3218 91.199303 28.1127 c
91.406303 27.903601 91.7034 27.799 92.090698 27.799 c
92.558098 27.799 92.918701 27.9508 93.172401 28.2544 c
93.4328 28.558001 93.563004 28.966101 93.563004 29.4788 c
93.563004 32.686749 l
94.454498 32.686749 l
94.454498 27.141199 l
93.713303 27.141199 l
93.673203 27.960899 l
93.6231 27.960899 l
93.502998 27.691 93.292603 27.468399 92.992104 27.292999 c
92.698303 27.1243 92.334396 27.040001 91.900398 27.040001 c
h
W
0 0 132 43 rc
89.007401 33.686749 m
95.454498 33.686749 l
95.454498 26.040001 l
89.007401 26.040001 l
h
f
Q
q
93.646004 24.5 m
93.646004 25.572701 l
93.646004 25.741301 93.572502 25.825701 93.425598 25.825701 c
93.392303 25.825701 93.358902 25.8223 93.3255 25.8155 c
93.2854 25.8088 93.248703 25.7987 93.215302 25.7852 c
93.145203 26.392401 l
93.245399 26.4261 93.355499 26.4531 93.4757 26.473301 c
93.589203 26.486799 93.682701 26.493601 93.756203 26.493601 c
93.989899 26.493601 94.163498 26.4396 94.277 26.3316 c
94.383797 26.216999 94.437202 26.0618 94.437202 25.8661 c
94.437202 24.5 l
93.646004 24.5 l
h
W
0 0 132 43 rc
92.145203 27.493601 m
95.437202 27.493601 l
95.437202 23.5 l
92.145203 23.5 l
h
f
Q
q
98.433601 27.040001 m
97.886002 27.040001 97.442001 27.1243 97.101501 27.292999 c
96.767601 27.4617 96.523903 27.7045 96.3703 28.021601 c
96.223396 28.3454 96.149902 28.7367 96.149902 29.195499 c
96.149902 32.686749 l
97.041397 32.686749 l
97.041397 29.1854 l
97.041397 28.7131 97.151497 28.362301 97.371902 28.1329 c
97.592201 27.903601 97.946098 27.7889 98.433601 27.7889 c
98.920998 27.7889 99.274902 27.903601 99.495201 28.1329 c
99.715599 28.362301 99.825798 28.7131 99.825798 29.1854 c
99.825798 32.686749 l
100.717 32.686749 l
100.717 29.195499 l
100.717 28.7367 100.64 28.3454 100.4868 28.021601 c
100.3399 27.7045 100.0995 27.4617 99.765701 27.292999 c
99.431801 27.1243 98.987801 27.040001 98.433601 27.040001 c
h
99.044502 29.4282 m
98.764099 29.4282 98.540398 29.4687 98.373497 29.5497 c
98.213203 29.6374 98.099701 29.748699 98.032898 29.8836 c
97.966202 30.0186 97.9328 30.1602 97.9328 30.308599 c
97.9328 30.4098 97.946098 30.5144 97.972801 30.6224 c
97.999496 30.730301 98.036301 30.8214 98.083 30.895599 c
98.8041 30.764 l
98.790802 30.737 98.777397 30.693199 98.764099 30.6325 c
98.750702 30.578501 98.744003 30.5245 98.744003 30.4706 c
98.744003 30.3829 98.767403 30.301901 98.814201 30.227699 c
98.867599 30.1535 98.957703 30.1164 99.084602 30.1164 c
101.358 30.1164 l
101.358 29.4282 l
99.044502 29.4282 l
h
W
0 0 132 43 rc
95.149902 33.686749 m
102.358 33.686749 l
102.358 26.040001 l
95.149902 26.040001 l
h
f
Q
q
104.67 27.0501 m
104.129 27.0501 103.695 27.121 103.368 27.262699 c
103.047 27.404301 102.814 27.6033 102.667 27.859699 c
102.527 28.1161 102.456 28.419701 102.456 28.7705 c
102.456 29.080799 102.5 29.327 102.587 29.509199 c
102.68 29.698099 102.794 29.836399 102.927 29.924101 c
103.067 30.011801 103.211 30.069201 103.358 30.0961 c
103.358 30.1366 l
103.224 30.177099 103.084 30.2446 102.937 30.339001 c
102.79 30.4335 102.667 30.565001 102.567 30.7337 c
102.473 30.9023 102.426 31.114799 102.426 31.371201 c
102.426 31.6073 102.48 31.83 102.587 32.039101 c
102.693 32.248199 102.867 32.4203 103.107 32.555199 c
103.348 32.690128 103.665 32.757591 104.059 32.757591 c
104.219 32.757591 104.386 32.744099 104.56 32.71711 c
104.733 32.696869 104.867 32.659771 104.96 32.605801 c
104.8 31.907499 l
104.727 31.9345 104.63 31.958099 104.51 31.978399 c
104.396 32.005402 104.276 32.018902 104.149 32.018902 c
103.869 32.018902 103.662 31.951401 103.528 31.8165 c
103.395 31.688299 103.328 31.5163 103.328 31.3004 c
103.328 31.064199 103.385 30.8855 103.498 30.764 c
103.618 30.642599 103.768 30.5583 103.949 30.511 c
104.136 30.4706 104.329 30.4503 104.53 30.4503 c
104.72 30.4503 l
104.72 29.7925 l
104.53 29.7925 l
104.129 29.7925 103.832 29.7183 103.638 29.569901 c
103.451 29.4282 103.358 29.1887 103.358 28.8514 c
103.358 28.6558 103.395 28.476999 103.468 28.3151 c
103.548 28.1532 103.682 28.025 103.869 27.9305 c
104.062 27.8361 104.329 27.7889 104.67 27.7889 c
105.01 27.7889 105.274 27.8361 105.461 27.9305 c
105.655 28.025 105.792 28.159901 105.872 28.3353 c
105.952 28.5175 105.992 28.7334 105.992 28.983 c
105.992 32.686749 l
106.883 32.686749 l
106.883 29.043699 l
106.883 28.3353 106.703 27.826 106.343 27.5156 c
105.989 27.205299 105.431 27.0501 104.67 27.0501 c
h
W
0 0 132 43 rc
101.426 33.757591 m
107.883 33.757591 l
107.883 26.0501 l
101.426 26.0501 l
h
f
Q
q
105.236 33.273689 m
105.19 33.3479 105.153 33.442348 105.126 33.557041 c
105.093 33.678471 105.076 33.796532 105.076 33.911221 c
105.076 34.052898 105.106 34.184448 105.166 34.305889 c
105.226 34.434071 105.333 34.538639 105.487 34.619598 c
105.64 34.70055 105.854 34.741032 106.128 34.741032 c
107.5 34.741032 l
107.5 34.042782 l
106.358 34.042782 l
106.225 34.042782 106.118 34.015789 106.038 33.961819 c
105.958 33.9146 105.918 33.830269 105.918 33.708832 c
105.918 33.66161 105.928 33.611012 105.948 33.557041 c
105.961 33.503071 105.981 33.4491 106.008 33.395119 c
105.236 33.273689 l
h
W
0 0 132 43 rc
104.076 35.741032 m
108.5 35.741032 l
108.5 32.273689 l
104.076 32.273689 l
h
f
Q
q
22.460501 18.342501 m
25.9266 15.5357 30.8836 15.5357 34.349701 18.342501 c
33.009499 19.9974 l
30.3248 17.8234 26.485399 17.8234 23.800699 19.9974 c
22.460501 18.342501 l
h
W
0 0 132 43 rc
21.460501 20.9974 m
35.349701 20.9974 l
35.349701 14.5357 l
21.460501 14.5357 l
h
f
Q
q
23.903999 21.986601 2.1296 2.8769 rc
22.903999 25.863501 m
27.0336 25.863501 l
27.0336 20.986601 l
22.903999 20.986601 l
h
f
Q
q
30.511999 21.986601 2.1294999 2.8769 rc
29.511999 25.863501 m
33.641499 25.863501 l
33.641499 20.986601 l
29.511999 20.986601 l
h
f
Q
q
39.5 21 m
39.5 14.6487 34.351299 9.5 28 9.5 c
21.648701 9.5 16.5 14.6487 16.5 21 c
16.5 27.351299 21.648701 32.5 28 32.5 c
34.351299 32.5 39.5 27.351299 39.5 21 c
h
37.370499 21 m
37.370499 15.8248 33.175201 11.6295 28 11.6295 c
22.8248 11.6295 18.629499 15.8248 18.629499 21 c
18.629499 26.1752 22.8248 30.370501 28 30.370501 c
33.175201 30.370501 37.370499 26.1752 37.370499 21 c
h
W*
0 0 132 43 rc
15.5 33.5 m
40.5 33.5 l
40.5 8.5 l
15.5 8.5 l
h
f
ep
end
%%Trailer
%%EOF
