%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 12.6 (Build 21G115) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
q
18.4606 18.342501 m
21.9266 15.5357 26.8836 15.5357 30.349701 18.342501 c
29.009501 19.9974 l
26.3248 17.8234 22.485399 17.8234 19.800699 19.9974 c
18.4606 18.342501 l
h
W
0 0 132 43 rc
17.4606 20.9974 m
31.349701 20.9974 l
31.349701 14.5357 l
17.4606 14.5357 l
h
f
Q
q
19.903999 21.986601 2.1296 2.8769 rc
18.903999 25.863501 m
23.0336 25.863501 l
23.0336 20.986601 l
18.903999 20.986601 l
h
f
Q
q
26.511999 21.986601 2.1294999 2.8769 rc
25.511999 25.863501 m
29.6415 25.863501 l
29.6415 20.986601 l
25.511999 20.986601 l
h
f
Q
q
35.5 21 m
35.5 14.6487 30.351299 9.5 24 9.5 c
17.648701 9.5 12.5 14.6487 12.5 21 c
12.5 27.351299 17.648701 32.5 24 32.5 c
30.351299 32.5 35.5 27.351299 35.5 21 c
h
33.370499 21 m
33.370499 15.8248 29.1752 11.6295 24 11.6295 c
18.8248 11.6295 14.6295 15.8248 14.6295 21 c
14.6295 26.1752 18.8248 30.370501 24 30.370501 c
29.1752 30.370501 33.370499 26.1752 33.370499 21 c
h
W*
0 0 132 43 rc
11.5 33.5 m
36.5 33.5 l
36.5 8.5 l
11.5 8.5 l
h
f
Q
q
117.005 34.5 m
119.26 32.4795 l
118.668 32.043098 118.124 31.622801 117.693 31.2672 c
116.685 30.5075 114.685 28.955799 113.678 28.066799 c
112.894 27.387899 112.926 27.2425 113.694 26.5474 c
114.045 26.2411 114.627 25.7633 115.307 25.2054 c
116.673 24.0853 118.432 22.6425 119.5 21.6175 c
117.229 19.5 l
116.717 20.0819 116.189 20.6476 115.661 21.181 c
114.813 22.0849 112.642 23.9653 111.182 25.228901 c
111.022 25.3675 l
109.391 26.7899 109.487 27.759701 111.182 29.165899 c
112.462 30.2166 114.525 31.93 115.597 32.964439 c
116.141 33.497849 116.717 34.06358 117.005 34.5 c
h
W
0 0 132 43 rc
108.391 35.5 m
120.5 35.5 l
120.5 18.5 l
108.391 18.5 l
h
f
Q
q
94.979301 31.8006 m
95.155197 29.537701 l
95.890999 29.489201 96.546799 29.473101 97.218597 29.473101 c
97.387001 29.473101 97.557404 29.476 97.729301 29.481501 c
97.031799 27.814501 95.809303 25.5385 94.5634 23.961201 c
96.898697 22.7651 l
98.200798 24.631599 99.545898 27.454 100.2964 29.7243 c
101.376 29.884501 102.351 30.096001 103.009 30.2813 c
102.945 32.528019 l
102.406 32.3633 101.732 32.1987 100.984 32.059299 c
101.205 32.873631 101.388 33.61097 101.505 34.112068 c
98.850197 34.370689 l
98.819901 33.544361 98.668602 32.615021 98.456497 31.733 c
98.038101 31.703699 97.617599 31.6875 97.202698 31.6875 c
96.674797 31.6875 95.715103 31.719801 94.979301 31.8006 c
h
W
0 0 132 43 rc
93.5634 35.370689 m
104.009 35.370689 l
104.009 21.7651 l
93.5634 21.7651 l
h
f
Q
q
105.239 27.2003 m
105.224 27.8487 105.209 28.4783 105.248 29.052799 c
102.817 29.052799 l
102.839 28.593599 102.869 28.0266 102.9 27.429701 c
102.931 26.8456 102.963 26.232901 102.991 25.6644 c
102.715 25.6922 102.433 25.7069 102.145 25.7069 c
99.6819 25.7069 98.418297 24.316799 98.418297 22.700399 c
98.418297 20.825399 100.0658 19.823299 102.177 19.823299 c
104.552 19.823299 105.376 20.995501 105.422 22.542101 c
106.169 22.024599 106.792 21.4317 107.281 20.9653 c
107.36 20.8901 l
108.639 22.9914 l
107.842 23.7393 106.713 24.555401 105.329 25.0956 c
105.316 25.358601 l
105.315 25.361601 l
105.315 25.362801 l
105.286 25.936199 105.26 26.4604 105.248 26.7899 c
105.246 26.9272 105.242 27.064301 105.239 27.2003 c
h
101.985 23.7349 m
102.363 23.7349 102.725 23.692301 103.073 23.616199 c
103.073 23.6112 103.073 23.606199 103.073 23.601299 c
103.073 23.580099 103.073 23.5599 103.073 23.540899 c
103.073 22.635799 102.785 22.07 101.825 22.07 c
101.154 22.07 100.706 22.4256 100.706 22.9429 c
100.706 23.4116 101.202 23.7349 101.985 23.7349 c
h
W*
0 0 132 43 rc
97.418297 30.052799 m
109.639 30.052799 l
109.639 18.823299 l
97.418297 18.823299 l
h
f
Q
q
107.744 27.953699 m
109.119 30.0226 l
108.256 30.620701 106.192 31.736 105.04 32.237099 c
103.793 30.2974 l
104.912 29.796301 106.784 28.7134 107.744 27.953699 c
h
W
0 0 132 43 rc
102.793 33.237099 m
110.119 33.237099 l
110.119 26.953699 l
102.793 26.953699 l
h
f
Q
q
84.614197 28.794201 m
84.598297 31.121799 l
85.526001 31.024799 86.485703 30.976299 87.461403 30.976299 c
87.757797 30.976299 88.055298 30.980301 88.3526 30.988501 c
88.346703 31.7453 88.335999 32.347198 88.325203 32.641159 c
88.325203 32.883621 88.2612 33.41703 88.197197 33.75647 c
90.964401 33.75647 l
90.916397 33.449348 90.884499 33.029099 90.8685 32.673489 c
90.848602 32.362 90.828697 31.825701 90.816498 31.1539 c
91.630302 31.2432 92.414299 31.3668 93.139801 31.5259 c
93.139801 29.0851 l
92.422501 28.9806 91.633698 28.8971 90.812103 28.8346 c
90.835602 27.3601 90.908997 26.2026 90.970001 25.2418 c
90.9701 25.2407 l
92.329201 24.671301 93.319199 23.8286 94.035599 23.153 c
92.7239 21.100201 l
92.126999 21.663601 91.561996 22.154699 91.016296 22.564501 c
90.803596 21.0474 89.808403 20.114201 87.7174 20.114201 c
85.461998 20.114201 83.974403 21.084101 83.974403 22.910601 c
83.974403 24.7209 85.445999 25.884701 87.685402 25.884701 c
87.959503 25.884701 88.224701 25.872801 88.481102 25.850401 c
88.438499 26.706699 88.391296 27.698 88.369499 28.712299 c
88.070999 28.7047 87.773102 28.6996 87.477402 28.697201 c
86.5177 28.697201 85.557999 28.7295 84.614197 28.794201 c
h
88.5644 23.8522 m
88.209 23.945499 87.853401 23.9935 87.493401 23.9935 c
86.7416 23.9935 86.245796 23.7026 86.245796 23.185301 c
86.245796 22.6196 86.805603 22.4256 87.493401 22.4256 c
88.2612 22.4256 88.565102 22.8459 88.565102 23.7349 c
88.565102 23.772301 88.564903 23.811399 88.5644 23.8522 c
h
W*
0 0 132 43 rc
82.974403 34.75647 m
95.035599 34.75647 l
95.035599 19.114201 l
82.974403 19.114201 l
h
f
Q
q
80.5354 33.772629 m
83.206596 33.546341 l
83.062698 33.190731 82.838799 32.188599 82.774803 31.8976 c
82.582802 31.0571 82.023003 27.290899 82.023003 25.787701 c
82.023003 25.739201 82.023003 25.4806 82.039001 25.415899 c
82.138702 25.6595 82.242798 25.859501 82.3489 26.0634 c
82.447098 26.2519 82.546898 26.4438 82.646797 26.676701 c
83.814499 25.723101 l
83.334602 24.268299 82.854797 22.635799 82.662804 21.698299 c
82.614799 21.472 82.566803 21.100201 82.566803 20.938601 c
82.566803 20.760799 82.566803 20.469801 82.582802 20.211201 c
80.391502 20.049601 l
80.055496 21.148701 79.735603 23.0399 79.735603 25.2381 c
79.735603 27.7054 80.181396 30.7358 80.3582 31.9377 c
80.359497 31.9461 l
80.423401 32.431 80.519402 33.174568 80.5354 33.772629 c
h
W
0 0 132 43 rc
78.735603 34.772629 m
84.814499 34.772629 l
84.814499 19.049601 l
78.735603 19.049601 l
h
f
Q
q
64.332001 29.6509 m
64.092102 32.317902 l
64.731903 32.334099 65.435699 32.366402 65.739601 32.398701 c
66.253304 32.442902 66.873398 32.494598 67.584 32.553879 c
68.9533 32.668098 70.6586 32.810341 72.585701 32.980598 c
74.185204 33.109921 76.072701 33.223061 77.240402 33.271549 c
77.256302 30.75 l
77.158997 30.7481 77.054298 30.746401 76.944099 30.744699 c
76.112801 30.7314 74.961998 30.712999 74.185204 30.556 c
72.457703 30.1681 70.9701 28.276899 70.9701 26.353399 c
70.9701 23.9774 73.177498 23.0399 75.944702 22.878201 c
75.032997 20.162701 l
71.466003 20.4375 68.410896 22.393299 68.410896 25.836201 c
68.410896 28.0506 69.578499 29.764 70.442299 30.556 c
69.066704 30.410601 66.251503 30.087299 64.332001 29.6509 c
h
W
0 0 132 43 rc
63.092098 34.271549 m
78.256302 34.271549 l
78.256302 19.162701 l
63.092098 19.162701 l
h
f
Q
q
73.593399 28.810301 m
74.985001 29.3922 l
75.384903 28.794201 75.944702 27.8244 76.232597 27.226299 c
74.808998 26.5959 l
74.377197 27.5334 74.105202 28.066799 73.593399 28.810301 c
h
W
0 0 132 43 rc
72.593399 30.3922 m
77.232597 30.3922 l
77.232597 25.5959 l
72.593399 25.5959 l
h
f
Q
q
75.416901 29.537701 m
76.792503 30.1681 l
77.208397 29.586201 77.800201 28.648701 78.120102 28.066799 c
76.712502 27.387899 l
76.248596 28.309299 75.944702 28.810301 75.416901 29.537701 c
h
W
0 0 132 43 rc
74.416901 31.1681 m
79.120102 31.1681 l
79.120102 26.387899 l
74.416901 26.387899 l
h
f
Q
q
42.5 19.873199 m
47.591301 34.29063 l
50.959702 34.29063 l
56.012299 19.873199 l
52.7794 19.873199 l
51.859901 22.836901 l
46.604 22.836901 l
45.616699 19.873199 l
42.5 19.873199 l
h
49.246498 30.9944 m
47.407398 25.321301 l
51.027401 25.321301 l
49.246498 30.9944 l
h
W*
0 0 132 43 rc
41.5 35.29063 m
57.012299 35.29063 l
57.012299 18.873199 l
41.5 18.873199 l
h
f
Q
q
58.553799 22.3223 m
58.553799 31.8382 l
56.796398 31.8382 l
56.796398 34.29063 l
63.068401 34.29063 l
63.068401 31.8382 l
61.515701 31.8382 l
61.515701 22.3223 l
63.068401 22.3223 l
63.068401 19.8699 l
56.796398 19.8699 l
56.796398 22.3223 l
58.553799 22.3223 l
h
W
0 0 132 43 rc
55.796398 35.29063 m
64.068398 35.29063 l
64.068398 18.8699 l
55.796398 18.8699 l
h
f
Q
q
66.511703 15.8219 m
65.577797 15.9187 l
65.577797 15.2611 65.476303 14.5056 65.321602 13.8049 c
64.711899 13.7556 64.124496 13.7088 63.790199 13.7002 c
63.736198 13.6986 l
63.439098 13.6895 63.190102 13.6819 62.8964 13.7002 c
62.976799 12.8574 l
63.1744 12.8867 63.458302 12.9216 63.684799 12.9494 c
63.702999 12.9516 63.720901 12.9538 63.7383 12.956 c
63.790401 12.9624 63.838501 12.9683 63.8806 12.9736 c
64.026199 12.9874 64.243698 13.0106 64.499901 13.0378 c
64.699402 13.0589 64.922203 13.0826 65.152702 13.1063 c
64.811401 11.8087 64.060699 9.6004 63.036999 8.2749996 c
63.8605 7.9650002 l
64.911102 9.5972996 65.600197 11.786 65.967598 13.1857 c
66.410004 13.2255 66.811203 13.2546 67.054001 13.2546 c
67.6968 13.2546 68.118599 13.0899 68.118599 12.1986 c
68.118599 11.1523 67.957901 9.8929005 67.636497 9.2341003 c
67.435699 8.8175001 67.134399 8.7399998 66.762802 8.7399998 c
66.481598 8.7399998 65.949402 8.8079004 65.527603 8.9337997 c
65.668198 8.1296997 l
65.9795 8.0522003 66.461502 7.9843998 66.843102 7.9843998 c
67.495903 7.9843998 67.998001 8.1491003 68.309402 8.7981997 c
68.731102 9.6022997 68.8918 11.1426 68.8918 12.2955 c
68.8918 13.6033 68.158699 13.9327 67.2649 13.9327 c
67.020103 13.9327 66.600998 13.9053 66.129303 13.8693 c
66.195503 14.1891 66.257004 14.5261 66.3078 14.8045 c
66.340599 14.9841 66.369003 15.1398 66.391197 15.2503 c
66.408401 15.3292 66.425697 15.4134 66.442902 15.4976 c
66.465797 15.6099 66.4888 15.7222 66.511703 15.8219 c
h
W
0 0 132 43 rc
61.8964 16.918699 m
69.8918 16.918699 l
69.8918 6.9650002 l
61.8964 6.9650002 l
h
f
Q
q
69.9664 14.7078 m
69.233299 14.3881 l
69.936302 13.584 70.729599 11.8983 71.020897 10.9101 c
71.804199 11.2686 l
71.4627 12.1598 70.588997 13.923 69.9664 14.7078 c
h
W
0 0 132 43 rc
68.233299 15.7078 m
72.804199 15.7078 l
72.804199 9.9101 l
68.233299 9.9101 l
h
f
Q
q
70.076797 16.112499 m
69.534599 15.8897 l
69.815697 15.5215 70.157204 14.9403 70.358002 14.5431 c
70.900299 14.7756 l
70.6894 15.1728 70.327904 15.7637 70.076797 16.112499 c
h
W
0 0 132 43 rc
68.534599 17.112499 m
71.900299 17.112499 l
71.900299 13.5431 l
68.534599 13.5431 l
h
f
Q
q
71.181503 16.5 m
70.6493 16.277201 l
70.940498 15.9187 71.271896 15.3665 71.482803 14.9403 c
72.035103 15.1728 l
71.834297 15.5312 71.452698 16.1416 71.181503 16.5 c
h
W
0 0 132 43 rc
69.6493 17.5 m
73.035103 17.5 l
73.035103 13.9403 l
69.6493 13.9403 l
h
f
Q
q
46.657001 15.9211 m
46.660702 16.002701 46.664101 16.076401 46.667702 16.1416 c
47.501202 16.1416 l
47.495399 16.028999 l
47.4911 15.9453 47.486401 15.8536 47.480801 15.7547 c
47.5532 14.5571 48.053101 9.9326 51.93 8.2168999 c
51.709 8.0522003 51.478001 7.8099999 51.357498 7.6065998 c
48.7612 8.8057003 47.643501 11.2871 47.150501 13.2432 c
46.707802 11.2846 45.665699 8.9450998 43.112598 7.6065998 c
42.981998 7.7905998 42.730999 8.0135002 42.5 8.1780996 c
46.390301 10.0914 46.586899 14.3888 46.657001 15.9211 c
h
W
0 0 132 43 rc
41.5 17.1416 m
52.93 17.1416 l
52.93 6.6065998 l
41.5 6.6065998 l
h
f
Q
q
60.405899 8.2652998 m
60.586601 8.2652998 60.6469 8.3234997 60.6469 8.4882002 c
60.6469 12.683 l
57.664299 12.683 l
57.664299 16.025299 l
61.400101 16.025299 l
61.400101 8.4882002 l
61.400101 8.0230999 61.2896 7.7809 60.9683 7.6550002 c
60.6469 7.5387998 60.104599 7.5290999 59.261002 7.5290999 c
59.2309 7.7325001 59.110401 8.0716 58.999901 8.2749996 c
59.612499 8.2460003 60.225101 8.2557001 60.405899 8.2652998 c
h
58.387299 14.1168 m
58.387299 13.2352 l
60.6469 13.2352 l
60.6469 14.1168 l
58.387299 14.1168 l
h
60.6469 14.6496 m
58.387299 14.6496 l
58.387299 15.4634 l
60.6469 15.4634 l
60.6469 14.6496 l
h
W*
0 0 132 43 rc
56.664299 17.025299 m
62.400101 17.025299 l
62.400101 6.5290999 l
56.664299 6.5290999 l
h
f
Q
q
84.5783 15.0565 m
83.604202 15.0759 l
83.664398 14.8531 83.664398 14.4365 83.664398 14.2137 c
83.664398 13.6518 83.684502 12.4699 83.774902 11.6367 c
84.056099 9.1275997 84.9599 8.2168999 85.914001 8.2168999 c
86.596901 8.2168999 87.199402 8.7788 87.811996 10.416 c
87.179298 11.1039 l
86.918198 10.1351 86.446198 9.1372004 85.933998 9.1372004 c
85.210999 9.1372004 84.728897 10.2126 84.558197 11.8305 c
84.4879 12.6249 84.477898 13.5161 84.4879 14.1168 c
84.498001 14.3687 84.528099 14.8337 84.5783 15.0565 c
h
W
0 0 132 43 rc
82.604202 16.075899 m
88.811996 16.075899 l
88.811996 7.2168999 l
82.604202 7.2168999 l
h
f
Q
q
89.8004 14.7949 m
89.0271 14.5334 l
89.981201 13.3999 90.593803 11.4042 90.764503 9.6604004 c
91.578003 9.9703999 l
91.427299 11.6076 90.7043 13.6712 89.8004 14.7949 c
h
W
0 0 132 43 rc
88.0271 15.7949 m
92.578003 15.7949 l
92.578003 8.6604004 l
88.0271 8.6604004 l
h
f
Q
q
95.866096 15.9962 m
96.820198 15.9187 l
96.775902 15.7622 96.726196 15.522 96.687103 15.3325 c
96.672897 15.2642 96.660103 15.2022 96.649399 15.1534 c
96.620598 15.0196 96.5895 14.8713 96.556099 14.712 c
96.555901 14.7109 l
96.496803 14.43 l
97.1483 14.511 97.815498 14.6281 98.427002 14.7756 c
98.427002 14.0199 l
97.770798 13.877 97.039299 13.7636 96.335403 13.6884 c
96.238602 13.2613 96.129402 12.8149 96.006699 12.3924 c
95.645203 11.0167 94.972298 9.0113001 94.440102 7.9552999 c
93.566399 8.2363005 l
94.1689 9.2438002 94.871902 11.2104 95.253502 12.5764 c
95.340202 12.8969 95.429497 13.26 95.511497 13.617 c
95.179901 13.5953 94.865402 13.584 94.580704 13.584 c
94.138802 13.584 93.7873 13.5936 93.415703 13.6227 c
93.395699 14.3784 l
93.867699 14.3202 94.229202 14.3009 94.6008 14.3009 c
94.929802 14.3009 95.291801 14.3163 95.670898 14.346 c
95.742996 14.695 95.798798 14.9972 95.825996 15.1921 c
95.866096 15.4634 95.8862 15.7928 95.866096 15.9962 c
h
W
0 0 132 43 rc
92.395699 16.996201 m
99.427002 16.996201 l
99.427002 6.9552999 l
92.395699 6.9552999 l
h
f
Q
q
99.632103 12.3536 m
99.009399 12.3536 98.386803 12.3149 97.7742 12.247 c
97.7742 12.9736 l
98.296402 13.0221 98.969299 13.0511 99.612 13.0511 c
100.1945 13.0511 100.807 13.0318 101.349 12.9736 c
101.329 12.2374 l
100.807 12.2955 100.2246 12.3536 99.632103 12.3536 c
h
W
0 0 132 43 rc
96.7742 14.0511 m
102.349 14.0511 l
102.349 11.2374 l
96.7742 11.2374 l
h
f
Q
q
97.231903 10.6873 m
97.975098 10.6195 l
97.894699 10.2998 97.834503 9.9995003 97.834503 9.7475996 c
97.834503 9.2922001 98.105598 8.8465996 99.5317 8.8465996 c
100.1945 8.8465996 100.877 8.9144001 101.5 9.0306997 c
101.47 8.2557001 l
100.928 8.1780996 100.2547 8.1199999 99.521599 8.1199999 c
97.944901 8.1199999 97.081299 8.585 97.081299 9.5440998 c
97.081299 9.9123001 97.141502 10.2804 97.231903 10.6873 c
h
W
0 0 132 43 rc
96.081299 11.6873 m
102.5 11.6873 l
102.5 7.1199999 l
96.081299 7.1199999 l
h
f
Q
q
59.090302 11.9661 m
59.090302 8.4300003 l
56.027302 8.4300003 l
56.027302 7.9359999 l
55.3344 7.9359999 l
55.3344 11.9661 l
59.090302 11.9661 l
h
56.027302 9.9413004 m
56.027302 8.9919004 l
58.3773 8.9919004 l
58.3773 9.9413004 l
56.027302 9.9413004 l
h
58.3773 10.5032 m
56.027302 10.5032 l
56.027302 11.3945 l
58.3773 11.3945 l
58.3773 10.5032 l
h
W*
0 0 132 43 rc
54.3344 12.9661 m
60.090302 12.9661 l
60.090302 6.9359999 l
54.3344 6.9359999 l
h
f
Q
q
56.760399 16.025299 m
56.760399 12.6927 l
53.858101 12.6927 l
53.858101 7.5194001 l
53.115002 7.5194001 l
53.115002 16.025299 l
56.760399 16.025299 l
h
53.858101 14.1168 m
53.858101 13.2546 l
56.047401 13.2546 l
56.047401 14.1168 l
53.858101 14.1168 l
h
56.047401 14.6496 m
53.858101 14.6496 l
53.858101 15.4634 l
56.047401 15.4634 l
56.047401 14.6496 l
h
W*
0 0 132 43 rc
52.115002 17.025299 m
57.760399 17.025299 l
57.760399 6.5194001 l
52.115002 6.5194001 l
h
f
Q
q
74.134003 7.5 m
74.134003 10.5226 l
80.601402 10.5226 l
80.601402 7.5194001 l
79.838203 7.5194001 l
79.838203 7.8196998 l
74.867203 7.8196998 l
74.867203 7.5 l
74.134003 7.5 l
h
74.867203 8.3234997 m
79.838203 8.3234997 l
79.838203 8.9434996 l
74.867203 8.9434996 l
74.867203 8.3234997 l
h
74.867203 9.4279003 m
79.838203 9.4279003 l
79.838203 10.0092 l
74.867203 10.0092 l
74.867203 9.4279003 l
h
W*
0 0 132 43 rc
73.134003 11.5226 m
81.601402 11.5226 l
81.601402 6.5 l
73.134003 6.5 l
h
f
Q
q
76.895699 15.7734 m
73.923103 15.7734 l
73.923103 15.289 l
76.895699 15.289 l
76.895699 14.7271 l
72.858597 14.7271 l
72.858597 14.1846 l
76.895699 14.1846 l
76.895699 13.6033 l
73.802597 13.6033 l
73.802597 13.1286 l
76.895699 13.1286 l
76.895699 12.5861 l
73.531502 12.5861 l
73.531502 12.092 l
76.895699 12.092 l
76.895699 11.5205 l
72.8386 11.5205 l
72.8386 10.9779 l
81.786499 10.9779 l
81.786499 11.5205 l
77.658997 11.5205 l
77.658997 12.092 l
81.1036 12.092 l
81.1036 12.5861 l
77.658997 12.5861 l
77.658997 13.1286 l
80.551201 13.1286 l
80.551201 14.1846 l
81.776398 14.1846 l
81.776398 14.7271 l
80.551201 14.7271 l
80.551201 15.7734 l
77.658997 15.7734 l
77.658997 16.451599 l
76.895699 16.451599 l
76.895699 15.7734 l
h
77.658997 15.289 m
77.658997 14.7271 l
79.797997 14.7271 l
79.797997 15.289 l
77.658997 15.289 l
h
79.797997 14.1846 m
77.658997 14.1846 l
77.658997 13.6033 l
79.797997 13.6033 l
79.797997 14.1846 l
h
W*
0 0 132 43 rc
71.8386 17.451599 m
82.786499 17.451599 l
82.786499 9.9778996 l
71.8386 9.9778996 l
h
f
ep
end
%%Trailer
%%EOF
