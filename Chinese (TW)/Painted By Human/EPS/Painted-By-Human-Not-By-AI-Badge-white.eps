%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 12.6 (Build 21G115) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 132 43
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 132 43
%%BeginPageSetup
cg_md begin
bp
sdmtx
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
%%EndPageSetup
0.60000002 i
/Cs1 SC
1 1 1 sc
q
1 42 m
116.5 42 l
124.508 42 131 35.508129 131 27.5 c
131 1 l
15.5 1 l
7.4918699 1 1 7.4919 1 15.5 c
1 42 l
h
W
0 0 132 43 rc
0 43 m
132 43 l
132 0 l
0 0 l
h
f
Q
0 0 0 sc
q
0 0 132 43 rc
1 0 0 -1 1 42 cm
0 0 m
115.5 0 l
123.508 0 130 6.4918699 130 14.5 c
130 41 l
14.5 41 l
6.4918699 41 0 34.508099 0 26.5 c
0 0 l
h
S
Q
q
18.460501 18.342501 m
21.9266 15.5357 26.8836 15.5357 30.349701 18.342501 c
29.009501 19.9974 l
26.3248 17.8234 22.485399 17.8234 19.800699 19.9974 c
18.460501 18.342501 l
h
W
0 0 132 43 rc
17.460501 20.9974 m
31.349701 20.9974 l
31.349701 14.5357 l
17.460501 14.5357 l
h
f
Q
q
19.903999 21.986601 2.1296 2.8769 rc
18.903999 25.863501 m
23.0336 25.863501 l
23.0336 20.986601 l
18.903999 20.986601 l
h
f
Q
q
26.511999 21.986601 2.1294999 2.8769 rc
25.511999 25.863501 m
29.6415 25.863501 l
29.6415 20.986601 l
25.511999 20.986601 l
h
f
Q
q
35.5 21 m
35.5 14.6487 30.351299 9.5 24 9.5 c
17.648701 9.5 12.5 14.6487 12.5 21 c
12.5 27.351299 17.648701 32.5 24 32.5 c
30.351299 32.5 35.5 27.351299 35.5 21 c
h
33.370499 21 m
33.370499 15.8248 29.1752 11.6295 24 11.6295 c
18.8248 11.6295 14.6295 15.8248 14.6295 21 c
14.6295 26.1752 18.8248 30.370501 24 30.370501 c
29.1752 30.370501 33.370499 26.1752 33.370499 21 c
h
W*
0 0 132 43 rc
11.5 33.5 m
36.5 33.5 l
36.5 8.5 l
11.5 8.5 l
h
f
Q
q
66.381699 32.458199 m
66.891899 32.70929 67.398804 33.02689 67.871101 33.389931 c
67.871101 32.969959 l
70.727501 32.969959 l
70.727501 33.403019 l
71.149498 33.142601 71.588203 32.909111 72.043503 32.689911 c
72.1455 32.87339 72.349503 33.09549 72.523003 33.240341 c
71.428902 33.684158 70.372299 34.24308 69.514397 35.052719 c
69.563499 35.12096 69.610901 35.18961 69.656303 35.258579 c
69.033997 35.5 l
68.4076 34.547619 67.286598 33.653759 66.147598 33.098419 c
66.209801 33.197109 66.270897 33.295979 66.330704 33.394852 c
65.698196 33.752151 l
65.500397 33.371868 65.267998 32.98716 65.030998 32.626469 c
63.916302 32.541088 l
64.499199 33.275749 65.069702 34.213249 65.524696 35.12339 c
64.851402 35.403431 l
64.422997 34.341202 63.688499 33.23069 63.464001 32.950642 c
63.249802 32.651291 63.076401 32.448502 62.892799 32.419498 c
62.9744 32.236099 63.086601 31.9174 63.127399 31.772499 c
63.269001 31.8396 63.495201 31.8848 64.605797 32.009201 c
64.2118 31.462099 63.856701 31.034 63.688499 30.864799 c
63.392601 30.5268 63.168201 30.2854 62.964199 30.246799 c
63.035599 30.063299 63.158001 29.735001 63.188599 29.5998 c
63.370602 29.6859 63.682999 29.753099 65.785301 30.0553 c
65.837898 29.8262 65.878799 29.615999 65.902199 29.445299 c
66.463303 29.6094 l
66.391899 30.111601 66.147003 30.9807 65.902199 31.646999 c
65.361504 31.531099 l
65.460503 31.2458 65.559601 30.922701 65.646301 30.6052 c
64.1063 30.4151 l
64.771103 31.129101 65.432503 31.992701 66.008301 32.880402 c
66.153503 32.747589 66.292999 32.587818 66.381699 32.458199 c
h
69.153099 34.59478 m
68.812401 34.197849 68.4161 33.821442 67.988602 33.481758 c
70.6017 33.481758 l
70.094498 33.80389 69.611603 34.1674 69.153099 34.59478 c
h
W*
0 0 132 43 rc
61.892799 36.5 m
73.523003 36.5 l
73.523003 28.445299 l
61.892799 28.445299 l
h
f
Q
q
64.443398 29.117001 m
64.565804 28.382999 64.678001 27.427 64.698402 26.7897 c
65.269699 26.886299 l
65.239098 27.513901 65.116699 28.4603 64.9841 29.203899 c
64.443398 29.117001 l
h
W
0 0 132 43 rc
63.443401 30.203899 m
66.269699 30.203899 l
66.269699 25.7897 l
63.443401 25.7897 l
h
f
Q
q
63.3722 29.1749 m
63.270199 28.334801 63.117199 27.427 62.862202 26.7897 c
63.035599 26.751101 63.331402 26.654499 63.464001 26.586901 c
63.688499 27.2146 63.882301 28.189899 64.0047 29.0783 c
63.3722 29.1749 l
h
W
0 0 132 43 rc
61.862202 30.1749 m
65.0047 30.1749 l
65.0047 25.586901 l
61.862202 25.586901 l
h
f
Q
q
65.463501 29.2908 m
65.708397 28.6341 65.983803 27.7554 66.0858 27.195299 c
66.616302 27.3594 l
66.504097 27.9195 66.2286 28.778999 65.973602 29.4356 c
65.463501 29.2908 l
h
W
0 0 132 43 rc
64.463501 30.4356 m
67.616302 30.4356 l
67.616302 26.195299 l
64.463501 26.195299 l
h
f
Q
q
51.171299 26.528999 m
50.4776 26.895901 49.314602 27.3594 48.1618 27.7167 c
48.6413 28.1996 l
49.794102 27.8519 51.048801 27.3981 51.793499 27.031099 c
51.171299 26.528999 l
h
W
0 0 132 43 rc
47.1618 29.1996 m
52.793499 29.1996 l
52.793499 25.528999 l
47.1618 25.528999 l
h
f
Q
q
42.5 27.0408 m
43.591599 27.2918 44.958599 27.7843 45.642101 28.1996 c
46.346001 27.7747 l
45.488998 27.2822 44.122002 26.780001 43.030499 26.509701 c
42.918301 26.654499 42.6632 26.9056 42.5 27.0408 c
h
W
0 0 132 43 rc
41.5 29.1996 m
47.346001 29.1996 l
47.346001 25.509701 l
41.5 25.509701 l
h
f
Q
q
56.981602 35.169048 m
56.983101 35.23534 56.984501 35.298061 56.986099 35.355148 c
57.832802 35.355148 l
57.831799 35.313332 l
57.823601 34.968319 57.812599 34.502338 57.766998 33.959801 c
57.910801 32.8242 58.531898 28.728201 62.168499 27.195299 c
61.944 27.031099 61.719601 26.780001 61.607399 26.577299 c
59.042599 27.7115 57.9375 30.0952 57.436001 31.899599 c
56.955299 29.9667 55.868999 27.805201 53.374802 26.538601 c
53.242199 26.7318 52.987099 26.953899 52.752499 27.1084 c
56.842098 29.0672 56.9436 33.507488 56.981602 35.169048 c
h
W
0 0 132 43 rc
51.752499 36.355148 m
63.168499 36.355148 l
63.168499 25.538601 l
51.752499 25.538601 l
h
f
Q
q
73.114601 28.2672 m
74.411499 28.4904 75.875198 28.9505 76.868797 29.522499 c
73.288101 29.522499 l
73.288101 30.111601 l
77.618698 30.111601 l
77.528198 30.317499 77.414398 30.540001 77.307404 30.719999 c
78.011299 30.913099 l
78.1754 30.6723 78.346199 30.3566 78.454399 30.111601 c
82.367401 30.111601 l
82.367401 29.522499 l
78.528801 29.522499 l
78.775597 29.104601 79.097 28.7379 79.487602 28.424299 c
80.108101 28.715099 80.848099 29.118601 81.306396 29.4356 c
81.8675 29.059 l
81.313797 28.6905 80.613297 28.3358 80.002602 28.0658 c
80.684601 27.6539 81.5233 27.367901 82.5 27.2146 c
82.357201 27.0697 82.163399 26.809 82.071503 26.6255 c
80.0261 27.0128 78.6194 27.954399 77.834999 29.4737 c
77.347801 29.1099 76.716904 28.7745 76.032303 28.4891 c
76.032303 27.3734 l
78.388802 27.8519 l
78.368401 27.678101 78.3582 27.436701 78.368401 27.3015 c
75.702499 26.7038 75.360298 26.618799 75.165298 26.5061 c
75.1651 26.5 l
75.163498 26.504999 l
75.1549 26.5 l
75.152802 26.535299 l
75.0951 26.692801 74.974098 26.9333 74.879501 27.0408 c
75.042702 27.1373 75.307999 27.3305 75.307999 27.7747 c
75.307999 28.2125 l
74.718399 28.006701 74.113098 27.8405 73.543098 27.7264 c
73.451302 27.8906 73.2575 28.132 73.114601 28.2672 c
h
W
0 0 132 43 rc
72.114601 31.913099 m
83.5 31.913099 l
83.5 25.5 l
72.114601 25.5 l
h
f
Q
q
80.929001 31.135201 m
81.082001 31.135201 81.122803 31.1738 81.122803 31.2994 c
81.122803 35.297211 l
81.816498 35.297211 l
81.816498 31.2897 l
81.816498 30.913099 81.734901 30.748899 81.449203 30.6427 c
81.163597 30.546101 80.694298 30.536501 79.970001 30.536501 c
79.9394 30.719999 79.827202 30.961399 79.725197 31.144899 c
80.286301 31.1255 80.786102 31.1255 80.929001 31.135201 c
h
W
0 0 132 43 rc
78.725197 36.297211 m
82.816498 36.297211 l
82.816498 29.536501 l
78.725197 29.536501 l
h
f
Q
q
74.818298 35.219959 m
74.7547 35.048031 74.680397 34.871861 74.598701 34.698502 c
75.563004 34.698502 l
75.563004 35.39378 l
76.226097 35.39378 l
76.226097 34.698502 l
78.042 34.698502 l
78.042 34.186699 l
76.226097 34.186699 l
76.226097 33.597641 l
78.399002 33.597641 l
78.399002 33.066521 l
76.226097 33.066521 l
76.226097 32.554722 l
78.123596 32.554722 l
78.123596 31.3766 l
78.123596 31.106199 78.082802 30.971001 77.8685 30.8841 c
77.654297 30.797199 77.348297 30.797199 76.899399 30.797199 c
76.873001 30.9303 76.793701 31.0777 76.726501 31.2024 c
76.722504 31.209999 76.718498 31.2174 76.7145 31.2248 c
76.708 31.237 76.7015 31.249001 76.695396 31.2607 c
77.021797 31.251101 77.287003 31.251101 77.368698 31.2607 c
77.460503 31.270399 77.491096 31.2897 77.491096 31.367001 c
77.491096 32.062199 l
76.226097 32.062199 l
76.226097 30.488199 l
75.563004 30.488199 l
75.563004 32.062199 l
74.389801 32.062199 l
74.389801 30.7393 l
73.777702 30.7393 l
73.777702 32.554722 l
75.563004 32.554722 l
75.563004 33.066521 l
73.247299 33.066521 l
73.247299 33.597641 l
75.563004 33.597641 l
75.563004 34.186699 l
74.3311 34.186699 l
74.205101 33.969372 74.072197 33.770378 73.941002 33.6073 c
73.818497 33.69421 73.543098 33.81974 73.390099 33.887341 c
73.747101 34.28326 74.032799 34.833691 74.2164 35.355148 c
74.818298 35.219959 l
h
W
0 0 132 43 rc
72.247299 36.39378 m
79.399002 36.39378 l
79.399002 29.488199 l
72.247299 29.488199 l
h
f
Q
q
67.799698 26.509701 m
67.799698 26.809 l
70.8601 26.809 l
70.8601 26.5483 l
71.553802 26.5483 l
71.553802 29.5998 l
67.126404 29.5998 l
67.126404 26.509701 l
67.799698 26.509701 l
h
70.370399 27.987101 m
67.799698 27.987101 l
67.799698 27.320801 l
70.8601 27.320801 l
70.8601 29.097601 l
67.799698 29.097601 l
67.799698 28.4603 l
70.370399 28.4603 l
70.370399 27.987101 l
h
W*
0 0 132 43 rc
66.126404 30.5998 m
72.553802 30.5998 l
72.553802 25.509701 l
66.126404 25.509701 l
h
f
Q
q
67.748703 31.646999 m
67.942497 31.3573 68.126099 30.971001 68.197502 30.7103 c
68.595398 30.8841 l
68.534203 31.1255 68.340302 31.4925 68.126099 31.772499 c
67.748703 31.646999 l
h
W
0 0 132 43 rc
66.748703 32.772499 m
69.595398 32.772499 l
69.595398 29.7103 l
66.748703 29.7103 l
h
f
Q
q
70.452103 31.7822 m
70.349998 31.511801 70.135803 31.0966 69.982803 30.8358 c
70.339798 30.691 l
70.482903 30.902599 70.641602 31.195801 70.802299 31.4925 c
70.8703 31.618 l
70.452103 31.7822 l
h
W
0 0 132 43 rc
68.982803 32.7822 m
71.8703 32.7822 l
71.8703 29.691 l
68.982803 29.691 l
h
f
Q
q
66.779503 32.448502 m
66.779503 30.044001 l
71.890503 30.044001 l
71.890503 32.448502 l
66.779503 32.448502 l
h
67.432404 31.9464 m
69.003403 31.9464 l
69.003403 30.555799 l
67.432404 30.555799 l
67.432404 31.9464 l
h
69.5849 30.555799 m
69.5849 31.9464 l
71.227402 31.9464 l
71.227402 30.555799 l
69.5849 30.555799 l
h
W*
0 0 132 43 rc
65.779503 33.448502 m
72.890503 33.448502 l
72.890503 29.044001 l
65.779503 29.044001 l
h
f
Q
q
42.693802 28.354099 m
42.693802 28.972099 l
44.1628 28.972099 l
44.1628 33.33691 l
46.733601 33.33691 l
46.733601 33.945278 l
42.9795 33.945278 l
42.9795 34.57296 l
46.733601 34.57296 l
46.733601 35.374458 l
47.488499 35.374458 l
47.488499 34.57296 l
51.487499 34.57296 l
51.487499 33.945278 l
47.488499 33.945278 l
47.488499 33.33691 l
50.314301 33.33691 l
50.314301 28.972099 l
51.752701 28.972099 l
51.752701 28.354099 l
42.693802 28.354099 l
h
44.897301 28.972099 m
49.549198 28.972099 l
49.549198 29.6481 l
44.897301 29.6481 l
44.897301 28.972099 l
h
44.897301 30.111601 m
49.549198 30.111601 l
49.549198 30.691 l
44.897301 30.691 l
44.897301 30.111601 l
h
44.897301 31.1642 m
49.549198 31.1642 l
49.549198 31.7339 l
44.897301 31.7339 l
44.897301 31.1642 l
h
44.897301 32.187801 m
49.549198 32.187801 l
49.549198 32.825111 l
44.897301 32.825111 l
44.897301 32.187801 l
h
W*
0 0 132 43 rc
41.693802 36.374458 m
52.752701 36.374458 l
52.752701 27.354099 l
41.693802 27.354099 l
h
f
Q
q
79.184502 31.724199 0.69370002 3.1674299 rc
78.184502 35.891628 m
80.878197 35.891628 l
80.878197 30.724199 l
78.184502 30.724199 l
h
f
Q
q
104.82 16.2495 m
104.82 16.510201 104.836 17.0804 104.836 17.0804 c
100.924 17.0804 l
100.924 18.6283 l
105.073 18.6283 l
105.264 16.276199 105.61 14.029 106.151 12.2016 c
105.276 11.2124 104.259 10.3843 103.112 9.7484999 c
103.607 9.2923002 104.453 8.2983999 104.788 7.7933002 c
105.638 8.3402996 106.43 8.9918003 107.158 9.7361002 c
107.838 8.5608997 108.693 7.8585 109.754 7.8585 c
111.398 7.8585 112.149 8.5427999 112.5 11.72 c
111.877 11.9644 111.063 12.5183 110.536 13.0723 c
110.456 11.0845 110.265 10.2699 109.945 10.2699 c
109.56 10.2699 109.17 10.814 108.812 11.7345 c
109.965 13.3756 110.889 15.3015 111.558 17.4389 c
109.211 18.009199 l
108.896 16.890499 108.483 15.841 107.978 14.8757 c
107.764 16.0116 107.59 17.289499 107.474 18.6283 c
112.34 18.6283 l
112.34 20.9582 l
110.642 20.9582 l
111.446 21.8055 l
110.887 22.343201 109.77 23.060101 108.955 23.5 c
107.55 22.0825 l
108.053 21.767099 108.648 21.3563 109.147 20.9582 c
107.335 20.9582 l
107.311 21.707701 107.308 22.4615 107.327 23.206699 c
104.884 23.206699 l
104.887 22.4636 104.903 21.7108 104.933 20.9582 c
98.481201 20.9582 l
98.481201 16.070299 l
98.481201 13.9358 98.401398 11.0519 97.219902 9.1293001 c
97.746803 8.8522997 98.800598 7.9724998 99.199699 7.5 c
100.0135 8.7502003 100.4567 10.4912 100.689 12.2247 c
101.006 11.6362 101.245 10.7494 101.275 10.0743 c
102.01 10.0743 102.68 10.0906 103.112 10.1721 c
103.591 10.2699 103.958 10.4328 104.309 10.9053 c
104.692 11.4267 104.772 12.9257 104.82 16.2495 c
h
100.697 12.2859 m
100.816 13.1948 100.878 14.1 100.906 14.9297 c
102.558 14.9297 l
102.523 13.3078 102.463 12.6356 102.329 12.4369 c
102.201 12.2739 102.058 12.2251 101.85 12.2251 c
101.602 12.2251 101.174 12.2404 100.697 12.2859 c
h
W*
0 0 132 43 rc
96.219902 24.5 m
113.5 24.5 l
113.5 6.5 l
96.219902 6.5 l
h
f
Q
q
86.367302 20.388 m
86.631401 21.081301 86.867203 21.795 87.065002 22.5061 c
84.654099 23.060101 l
84.111198 20.8605 83.089302 18.6283 81.859901 17.292299 c
82.450699 16.9664 83.488503 16.2658 83.9515 15.8585 c
84.429703 16.466801 84.900703 17.225599 85.338997 18.074301 c
88.406197 18.074301 l
88.406197 15.5815 l
84.270897 15.5815 l
84.270897 13.3004 l
88.406197 13.3004 l
88.406197 10.498 l
82.370796 10.498 l
82.370796 8.1843004 l
96.900497 8.1843004 l
96.900497 10.498 l
90.833199 10.498 l
90.833199 13.3004 l
95.415604 13.3004 l
95.415604 15.5815 l
90.833199 15.5815 l
90.833199 18.074301 l
96.054298 18.074301 l
96.054298 20.388 l
90.833199 20.388 l
90.833199 23.223 l
88.406197 23.223 l
88.406197 20.388 l
86.367302 20.388 l
h
W
0 0 132 43 rc
80.859901 24.223 m
97.900497 24.223 l
97.900497 7.1842999 l
80.859901 7.1842999 l
h
f
Q
q
46.843601 14.0355 m
46.937698 14.4715 46.9856 14.8859 46.998798 15.2556 c
43.346199 15.2556 l
43.346199 17.389999 l
47.002602 17.389999 l
47.002602 19.0193 l
43.1866 19.0193 l
43.1866 21.218901 l
47.002602 21.218901 l
47.002602 23.1415 l
49.3018 23.1415 l
49.3018 15.5 l
49.3018 12.6487 48.439602 9.4389 44.527802 7.5163002 c
44.1446 8.0866003 43.426102 8.8198004 42.867199 9.276 c
44.2784 9.8239002 45.241402 10.714 45.880402 11.6943 c
45.156799 11.5763 44.450699 11.4625 43.792099 11.3564 c
42.9151 11.2149 l
42.5 13.5774 l
43.6273 13.6764 45.205601 13.8504 46.843601 14.0355 c
h
W
0 0 132 43 rc
41.5 24.1415 m
50.3018 24.1415 l
50.3018 6.5163002 l
41.5 6.5163002 l
h
f
Q
q
72.175499 8.1695995 m
67.132004 22.702499 l
63.7696 22.702499 l
58.6875 8.1695995 l
61.798599 8.1695995 l
62.7841 11.1571 l
68.030502 11.1571 l
68.948402 8.1695995 l
72.175499 8.1695995 l
h
65.421799 19.3799 m
67.1996 13.6614 l
63.586102 13.6614 l
65.421799 19.3799 l
h
W*
0 0 132 43 rc
57.6875 23.702499 m
73.175499 23.702499 l
73.175499 7.1696 l
57.6875 7.1696 l
h
f
Q
q
53.245602 23.1415 m
53.245602 21.218901 l
57.428902 21.218901 l
57.428902 19.0193 l
53.245602 19.0193 l
53.245602 17.389999 l
57.0457 17.389999 l
57.0457 15.2556 l
53.245602 15.2556 l
53.245602 13.5937 l
57.716301 13.5937 l
57.716301 11.3941 l
53.245602 11.3941 l
53.245602 7.7444 l
50.914398 7.7444 l
50.914398 23.1415 l
53.245602 23.1415 l
h
W
0 0 132 43 rc
49.914398 24.1415 m
58.716301 24.1415 l
58.716301 6.7444 l
49.914398 6.7444 l
h
f
Q
q
74.712402 20.230499 m
74.712402 10.6383 l
72.958199 10.6383 l
72.958199 8.1662998 l
79.218903 8.1662998 l
79.218903 10.6383 l
77.668999 10.6383 l
77.668999 20.230499 l
79.218903 20.230499 l
79.218903 22.702499 l
72.958199 22.702499 l
72.958199 20.230499 l
74.712402 20.230499 l
h
W
0 0 132 43 rc
71.958199 23.702499 m
80.218903 23.702499 l
80.218903 7.1662998 l
71.958199 7.1662998 l
h
f
ep
end
%%Trailer
%%EOF
